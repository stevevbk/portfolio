<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="210mm"
   height="297mm"
   viewBox="0 0 210 297"
   version="1.1"
   id="svg1"
   xml:space="preserve"
   inkscape:export-filename="image.png"
   inkscape:export-xdpi="96"
   inkscape:export-ydpi="96"
   inkscape:version="1.4.2 (f4327f4, 2025-05-13)"
   sodipodi:docname="Vantablack.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:ns1="https://launchpad.net/jessyink"><sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     inkscape:zoom="0.68862935"
     inkscape:rotation="90"
     inkscape:cx="337.6272"
     inkscape:cy="528.58624"
     inkscape:window-width="1920"
     inkscape:window-height="1051"
     inkscape:window-x="-9"
     inkscape:window-y="-9"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" /><defs
     id="defs1"><clipPath
       clipPathUnits="userSpaceOnUse"
       id="clipPath27"><g
         id="g34"
         transform="translate(-13.87044,-92.097929)"
         style="fill:#000000"><path
           style="fill:#000000;fill-opacity:1"
           d="m 97.281312,243.15488 c 0.0276,0.0688 0.02425,0.15114 -0.0074,0.18286 -0.03168,0.0317 -0.05427,-0.0246 -0.05018,-0.12519 0.0045,-0.11114 0.02711,-0.13376 0.05761,-0.0577 z m 4.78e-4,0.85866 c 0.0276,0.0688 0.02425,0.15114 -0.0074,0.18286 -0.03169,0.0317 -0.05427,-0.0246 -0.05018,-0.12519 0.0045,-0.11115 0.02711,-0.13377 0.05761,-0.0577 z m 1.184709,17.23809 c 0.420021,0.41709 0.763686,0.77982 0.763701,0.80606 1.4e-5,0.0262 -0.343627,-0.29356 -0.763648,-0.71065 -0.42002,-0.41709 -0.763686,-0.77982 -0.7637,-0.80605 -1.5e-5,-0.0262 0.343627,0.29355 0.763647,0.71064 z m -0.538038,-2.9096 c 0.01981,-1e-5 0.09499,0.0751 0.167055,0.16687 0.118757,0.15126 0.115385,0.15463 -0.036,0.036 -0.158993,-0.12454 -0.209576,-0.20286 -0.131054,-0.20291 z m 0.400631,-29.6838 c 0.151253,-0.11876 0.15463,-0.11538 0.03604,0.036 -0.07197,0.0919 -0.147057,0.16705 -0.166868,0.16706 -0.07852,4e-5 -0.02803,-0.0783 0.130828,-0.20306 z m 1.610124,21.66854 c 0.131254,0.12317 0.238654,0.24541 0.238664,0.27165 2e-5,0.0262 -0.10736,-0.0531 -0.238611,-0.17624 -0.131252,-0.12317 -0.238653,-0.24541 -0.238667,-0.27165 -1.5e-5,-0.0262 0.107362,0.0531 0.238614,0.17624 z m 0.345894,-21.32802 0.40527,-0.37737 -0.37691,0.40569 c -0.2073,0.22313 -0.389664,0.40569 -0.405251,0.4057 -0.07218,4e-5 0,-0.0831 0.376891,-0.43402 z m 0.61306,30.10488 c 0.44627,0.44346 0.81141,0.82776 0.81143,0.854 1e-5,0.0262 -0.36511,-0.31513 -0.81138,-0.75859 -0.44627,-0.44346 -0.81141,-0.82776 -0.81143,-0.85399 -10e-6,-0.0262 0.36511,0.31512 0.81138,0.75858 z m -0.0899,-32.92735 c 0.15125,-0.11875 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16705 -0.16687,0.16706 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m 0.33501,1.96333 0.40527,-0.37736 -0.37691,0.40568 c -0.2073,0.22313 -0.38966,0.4057 -0.40525,0.40571 -0.0722,4e-5 0,-0.0831 0.37689,-0.43403 z m 8.52625,5.87477 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.61397,0.0156 c 0.2099,9.4e-4 0.28454,0.0204 0.16587,0.0433 -0.11866,0.0229 -0.29039,0.0221 -0.38162,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21575,-0.0416 z m 0.72786,22.10983 c 0.0525,-3e-5 0.0954,0.0454 0.0955,0.10099 3e-5,0.0556 -0.0429,0.0745 -0.0954,0.0421 -0.0525,-0.0324 -0.0954,-0.0778 -0.0955,-0.10098 -2e-5,-0.0231 0.0429,-0.0421 0.0954,-0.0421 z m 0.21467,-7.38798 c 0.0941,0.0358 0.14709,0.0891 0.11773,0.11848 -0.0294,0.0294 -0.10636,1.2e-4 -0.17111,-0.065 -0.0936,-0.0942 -0.0826,-0.10513 0.0534,-0.0534 z m 0.63438,-9.866 c 0.13119,-7e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.24769,2.18668 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.23354,5.35017 c 0.13118,-8e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.4e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.0559,0.37406 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.66673,-2.00391 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 2.55953,5.71543 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15126 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12454 -0.20958,-0.20286 -0.13105,-0.20291 z m 1.00911,-7.79055 c 0.44602,-2.5e-4 0.6285,0.0161 0.4055,0.0363 -0.22301,0.0202 -0.58794,0.0204 -0.81096,4.5e-4 -0.22302,-0.02 -0.0406,-0.0365 0.40546,-0.0367 z m -0.22468,10.56444 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 1.41832,-8.65901 c 0.36732,2.2e-4 0.5059,0.0174 0.30796,0.0382 -0.19793,0.0208 -0.49846,0.0206 -0.66784,-4e-4 -0.16938,-0.021 -0.007,-0.038 0.35988,-0.0378 z m 0.10839,9.03978 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.23036,-0.37422 c 0.13118,-7e-5 0.18486,0.0216 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.72604,-12.5316 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.17726,3.86879 c 0.55098,-3.1e-4 0.77638,0.0153 0.50091,0.0348 -0.27548,0.0194 -0.72627,0.0197 -1.00177,5.5e-4 -0.2755,-0.0191 -0.0501,-0.035 0.50086,-0.0353 z m 1.8116,-2.02478 c 0.13118,-8e-5 0.18486,0.0216 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.4e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 2.52258,-0.11188 c 0.0756,-4e-5 0.16156,0.0388 0.19099,0.0864 0.0294,0.0476 -0.0324,0.0641 -0.13746,0.0367 -0.2228,-0.0581 -0.251,-0.12295 -0.0535,-0.12306 z m 1.27773,19.869 c 0.022,0.14501 0.0215,0.35968 -0.001,0.47703 -0.0226,0.11736 -0.0406,-0.001 -0.04,-0.26366 5.7e-4,-0.26236 0.019,-0.35838 0.041,-0.21337 z m 3.2169,-38.88124 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11923 -7e-5,-0.13119 0.0215,-0.18487 0.0481,-0.11929 z m 0.19097,49.06267 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20287 -0.13105,-0.20291 z m 0.47497,-24.68325 c 0.26236,5.7e-4 0.35838,0.019 0.21337,0.0411 -0.14501,0.022 -0.35968,0.0215 -0.47703,-0.001 -0.11736,-0.0226 0.001,-0.0406 0.26366,-0.04 z m 0.0978,25.25537 c 0.0198,-1e-5 0.095,0.0751 0.16706,0.16687 0.11876,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 0.51125,-45.20789 c 0.13118,-7e-5 0.18486,0.0216 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.34396,39.00599 c 0.0198,-10e-6 0.095,0.0751 0.16705,0.16687 0.11876,0.15126 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12454 -0.20957,-0.20286 -0.13105,-0.20291 z m 1.4443,-28.64063 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 2.6e-4,0.47703 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.38149,31.12019 c 0.13125,0.12316 0.23865,0.2454 0.23867,0.27164 1e-5,0.0262 -0.10736,-0.0531 -0.23862,-0.17624 -0.13125,-0.12316 -0.23865,-0.2454 -0.23866,-0.27164 -2e-5,-0.0262 0.10736,0.0531 0.23861,0.17624 z m 1.71884,-28.64079 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.66891,-9.5353 c 0.15126,-0.11876 0.15463,-0.11538 0.0361,0.036 -0.12455,0.159 -0.20287,0.20958 -0.20291,0.13106 -1e-5,-0.0198 0.0751,-0.095 0.16686,-0.16706 z m 0.75487,-15.06761 0.35759,-0.32898 -0.32859,0.35795 c -0.30584,0.33318 -0.38654,0.40186 -0.38658,0.32901 -1e-5,-0.016 0.1609,-0.17703 0.35758,-0.35798 z m 3.45111,15.32578 c 0.0437,-0.0271 0.0795,0.0114 0.0796,0.0855 4e-5,0.0741 -0.0357,0.11262 -0.0795,0.0856 -0.0437,-0.027 -0.0795,-0.0655 -0.0796,-0.0855 -2e-5,-0.02 0.0357,-0.0586 0.0795,-0.0856 z m 0.28593,42.31032 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.78358,-34.87904 c 0.105,0.0949 0.19092,0.19405 0.19094,0.22028 1e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19404 -0.19094,-0.22028 -1e-5,-0.0262 0.0859,0.03 0.19088,0.12487 z m 1.00696,30.291 c 0.0198,-2e-5 0.095,0.0751 0.16705,0.16686 0.11876,0.15126 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20287 -0.13105,-0.20291 z m 4.7e-4,0.85865 c 0.0198,-10e-6 0.095,0.0751 0.16706,0.16687 0.11876,0.15126 0.11538,0.15463 -0.036,0.036 -0.15899,-0.12454 -0.20958,-0.20286 -0.13106,-0.20291 z m 0.3571,-22.19126 0.21457,-0.18187 -0.18163,0.21476 c -0.0999,0.11813 -0.19644,0.21478 -0.21455,0.21479 -0.0764,4e-5 -0.02,-0.0768 0.18161,-0.24768 z m 0.082,18.77145 c 0.13119,-7e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.53816,-18.7272 c 0.15125,-0.11876 0.15463,-0.11538 0.036,0.036 -0.12455,0.15899 -0.20286,0.20958 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 0.56545,30.2743 c 0.15742,0.002 0.21028,0.0232 0.11746,0.0475 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16876,-0.0441 z m 0.81095,-0.004 c 0.13118,-8e-5 0.18486,0.0215 0.11928,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 1.26456,-42.06596 c 0.2099,9.4e-4 0.28454,0.0204 0.16587,0.0433 -0.11866,0.0229 -0.29039,0.0221 -0.38162,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21575,-0.0416 z m 0.6772,16.79439 c 0.26237,5.7e-4 0.35839,0.019 0.21337,0.0411 -0.14501,0.022 -0.35967,0.0215 -0.47703,-0.001 -0.11735,-0.0226 0.001,-0.0406 0.26366,-0.04 z m 1.7818,30.13522 c 0.13118,-7e-5 0.18486,0.0215 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.43024,1.63792 c 0.36732,2.1e-4 0.5059,0.0174 0.30796,0.0382 -0.19793,0.0208 -0.49846,0.0206 -0.66784,-4e-4 -0.16938,-0.021 -0.007,-0.038 0.35988,-0.0378 z m -0.20141,-61.86676 c 0.15125,-0.11876 0.15463,-0.11538 0.036,0.036 -0.12455,0.159 -0.20287,0.20958 -0.20291,0.13106 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16706 z m 0.61522,33.99867 c 0.18366,-1.1e-4 0.2588,0.0195 0.16699,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33393,1.9e-4 -0.0918,-0.024 -0.0167,-0.0436 0.16694,-0.0437 z m 0.20542,26.22959 c 0.13118,-7e-5 0.18486,0.0215 0.11928,0.048 -0.0656,0.0265 -0.1729,0.0266 -0.23851,1.4e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.0231,-23.19885 c 0.0198,-10e-6 0.095,0.0751 0.16706,0.16687 0.11875,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 1.48248,-14.37861 c 0.2886,-1.6e-4 0.40668,0.0177 0.26239,0.0396 -0.14429,0.0219 -0.38042,0.0221 -0.52474,2.9e-4 -0.14431,-0.0218 -0.0263,-0.0397 0.26235,-0.0399 z m 0.14039,16.09502 c 0.0198,-10e-6 0.095,0.0751 0.16705,0.16687 0.11876,0.15126 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12454 -0.20957,-0.20286 -0.13105,-0.20291 z m 0.29842,-13.34954 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.81343,-24.10718 0.21456,-0.18187 -0.18163,0.21477 c -0.0999,0.11812 -0.19644,0.21477 -0.21454,0.21478 -0.0763,5e-5 -0.02,-0.0768 0.18161,-0.24768 z m 0.64223,-3.17234 c 0.13118,-8e-5 0.18486,0.0215 0.11928,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11924,-0.0482 z m -0.11761,13.36575 c 0.0241,0.0918 0.0241,0.24209 1.9e-4,0.33393 -0.0239,0.0918 -0.0436,0.0167 -0.0437,-0.16694 -1e-4,-0.18366 0.0195,-0.2588 0.0435,-0.16699 z m 0.10451,17.41759 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.65887,-16.12406 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.27308,7.76972 c 0.20989,9.4e-4 0.28453,0.0204 0.16587,0.0433 -0.11866,0.0229 -0.2904,0.0221 -0.38163,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21576,-0.0416 z m 0.0122,-10.59033 c 0.0241,0.0918 0.0241,0.24208 1.9e-4,0.33392 -0.0239,0.0918 -0.0436,0.0167 -0.0437,-0.16694 -1e-4,-0.18365 0.0195,-0.2588 0.0435,-0.16698 z m 0.10672,24.94873 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13118 0.0215,-0.18486 0.048,-0.11928 z m 0.56317,-3.11734 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.34738,-47.23393 c 0.13125,0.12317 0.23865,0.24541 0.23866,0.27164 2e-5,0.0262 -0.10736,-0.0531 -0.23861,-0.17623 -0.13125,-0.12317 -0.23865,-0.24541 -0.23867,-0.27165 -1e-5,-0.0262 0.10736,0.0531 0.23862,0.17624 z m -0.0315,71.92432 c 0.15126,-0.11876 0.15463,-0.11538 0.036,0.036 -0.12454,0.159 -0.20286,0.20958 -0.20291,0.13106 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16706 z m 0.0555,-43.10405 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.30197,14.75645 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13119 0.0215,-0.18487 0.048,-0.11929 z m 0.19262,3.24371 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11923 -8e-5,-0.13119 0.0216,-0.18486 0.0481,-0.11929 z m 0.72111,-47.87059 c 0.18376,0.1779 0.33412,0.34493 0.33413,0.37117 2e-5,0.0262 -0.15032,-0.0979 -0.33407,-0.27577 -0.18376,-0.1779 -0.33412,-0.34493 -0.33413,-0.37116 -2e-5,-0.0262 0.15032,0.0978 0.33407,0.27576 z m -0.27314,44.45956 c 0.0198,-10e-6 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20957,-0.20286 -0.13105,-0.20291 z m 0.38579,29.33279 0.40527,-0.37737 -0.37691,0.40569 c -0.35053,0.37729 -0.43357,0.44956 -0.43361,0.37738 -1e-5,-0.0156 0.18235,-0.19815 0.40525,-0.4057 z m 0.1356,-56.31804 c 0.13119,-8e-5 0.18486,0.0215 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.4e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.14285,-0.47358 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22162,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 0.20232,13.27571 c 0.081,-0.0311 0.16852,-0.0353 0.19459,-0.009 0.0261,0.026 -0.0402,0.0703 -0.14717,0.0983 -0.22731,0.0596 -0.26246,-0.006 -0.0474,-0.0891 z m 0.50186,24.17619 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13118 0.0215,-0.18486 0.048,-0.11928 z m 0.37145,-21.84233 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.47662,-12.20657 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12455,0.15899 -0.20287,0.20958 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 1.44817,38.2455 c 0.0228,0.11806 0.0229,0.31125 2.4e-4,0.42933 -0.0227,0.11808 -0.0413,0.0215 -0.0415,-0.21464 -1.3e-4,-0.23613 0.0184,-0.33274 0.0412,-0.21469 z m 0.57016,-7.3449 c 0.0213,0.17146 0.021,0.42906 -6.6e-4,0.57244 -0.0217,0.14337 -0.0391,0.003 -0.0388,-0.31176 3.6e-4,-0.31484 0.0181,-0.43215 0.0394,-0.26068 z m 0.4554,-28.14687 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 4.3e-4,0.76325 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11924 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 0.19857,0.0476 c 0.0181,0.40666 0.0185,1.07212 8.2e-4,1.4788 -0.0177,0.40668 -0.0325,0.074 -0.0329,-0.73938 -4.5e-4,-0.81334 0.014,-1.14608 0.0321,-0.73942 z m 0.0137,24.47175 c 0.0179,0.4329 0.0183,1.14129 8.7e-4,1.57421 -0.0174,0.43292 -0.0321,0.0787 -0.0326,-0.78709 -4.8e-4,-0.86581 0.0138,-1.22001 0.0317,-0.78712 z m 3.51427,-14.31292 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11923 -8e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 1.6217,-0.38253 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 0.003,5.81979 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11924 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 1.62438,0.86372 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z"
           id="path27" /><path
           style="fill:#000000;fill-opacity:1"
           d="m 97.282087,243.48284 c 0.02405,0.0918 0.02413,0.24208 1.86e-4,0.33392 -0.02395,0.0918 -0.04362,0.0167 -0.04373,-0.16694 -1.02e-4,-0.18365 0.01949,-0.2588 0.04354,-0.16698 z m 14.486393,-9.46963 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.05208,4.67433 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.95063,8.12009 c 0.15743,0.002 0.21029,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 0.58039,-0.0114 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 3.90734,6.51064 c 0.41979,1.1e-4 0.57966,0.0168 0.35527,0.0371 -0.22439,0.0203 -0.56785,0.0202 -0.76325,-2e-4 -0.1954,-0.0204 -0.0118,-0.037 0.40798,-0.0369 z m 2.01339,-25.13295 0.26224,-0.23144 -0.23115,0.26249 c -0.21604,0.24535 -0.29327,0.30629 -0.29331,0.23146 -1e-5,-0.0171 0.11799,-0.13522 0.26222,-0.26251 z m 2.27506,16.44543 c 0.31484,3.6e-4 0.43215,0.0181 0.26068,0.0394 -0.17147,0.0213 -0.42906,0.021 -0.57244,-6.5e-4 -0.14337,-0.0217 -0.003,-0.0391 0.31176,-0.0388 z m -0.14423,-2.01089 c 0.18366,-1e-4 0.2588,0.0195 0.16699,0.0435 -0.0918,0.0241 -0.24208,0.0241 -0.33393,1.9e-4 -0.0918,-0.0239 -0.0167,-0.0436 0.16694,-0.0437 z m 4.06373,-16.98108 c 0.0242,0.0928 0.0227,0.22162 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 1.62574,-2.90093 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12455,0.15899 -0.20287,0.20957 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 0.33571,46.0456 c 0.105,0.0949 0.19092,0.19404 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19405 -0.19094,-0.22029 -1e-5,-0.0262 0.0859,0.03 0.19089,0.12488 z m 0.99064,1.00121 c 0.0198,-10e-6 0.095,0.0751 0.16705,0.16687 0.11876,0.15126 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12454 -0.20957,-0.20286 -0.13105,-0.20291 z m 0.38301,2.48036 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20287 -0.13105,-0.20291 z m 2.49324,-12.4921 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.76357,0.57201 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.13353,-33.90131 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11924 -7e-5,-0.13118 0.0215,-0.18486 0.048,-0.11928 z m 1.25174,5.54456 c 0.15126,-0.11876 0.15463,-0.11538 0.036,0.036 -0.12455,0.15899 -0.20287,0.20958 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16686,-0.16705 z m 0.57212,-0.57276 c 0.15126,-0.11875 0.15463,-0.11538 0.0361,0.036 -0.072,0.0919 -0.14706,0.16705 -0.16687,0.16706 -0.0785,4e-5 -0.028,-0.0783 0.13082,-0.20306 z m 1.82125,30.32656 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13119 0.0216,-0.18486 0.0481,-0.11929 z m 0.57737,-0.61915 c 0.022,0.14501 0.0215,0.35968 -0.001,0.47703 -0.0226,0.11736 -0.0406,-10e-4 -0.04,-0.26365 5.7e-4,-0.26237 0.019,-0.35839 0.0411,-0.21338 z m 2.13321,13.15481 c 0.13118,-8e-5 0.18486,0.0215 0.11928,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.14324,-14.03237 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.5667,-10.30421 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.58599,24.32832 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.29163,-64.85736 c 0.26236,5.7e-4 0.35838,0.019 0.21337,0.0411 -0.14501,0.022 -0.35968,0.0215 -0.47703,-0.001 -0.11736,-0.0226 10e-4,-0.0406 0.26366,-0.04 z m 0.40441,40.92915 c 0.26237,5.7e-4 0.35839,0.019 0.21338,0.0411 -0.14501,0.022 -0.35968,0.0215 -0.47704,-0.001 -0.11735,-0.0226 0.001,-0.0406 0.26366,-0.04 z m 7.7e-4,-30.00281 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.4825,26.92978 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.13893,-10.68616 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0242 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.0561,29.39269 c 0.13118,-7e-5 0.18486,0.0215 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.47002,-12.59391 c 0.13118,-8e-5 0.18486,0.0215 0.11929,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.4e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 1.48501,11.14666 c 0.13125,0.12317 0.23865,0.24541 0.23866,0.27165 2e-5,0.0262 -0.10736,-0.0531 -0.23861,-0.17624 -0.13125,-0.12317 -0.23865,-0.24541 -0.23867,-0.27165 -10e-6,-0.0262 0.10736,0.0531 0.23862,0.17624 z m 0.45221,-58.85851 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.0831,77.85917 c 0.13119,-8e-5 0.18487,0.0215 0.11929,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 1.48314,-35.03729 0.26224,-0.23144 -0.23115,0.2625 c -0.12713,0.14437 -0.24513,0.2625 -0.26222,0.26251 -0.0748,4e-5 -0.014,-0.0772 0.23113,-0.29357 z m -0.0585,-30.14119 c 0.0164,-1e-5 0.15603,0.13945 0.31024,0.3099 l 0.28039,0.30992 -0.31022,-0.28005 c -0.28918,-0.26104 -0.35412,-0.33973 -0.28041,-0.33977 z m 0.2847,8.05263 0.21456,-0.18187 -0.18162,0.21476 c -0.0999,0.11812 -0.19645,0.21478 -0.21455,0.21479 -0.0763,4e-5 -0.02,-0.0768 0.18161,-0.24768 z m 0.0636,57.11733 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0242 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.0511,-44.27616 c 0.0198,-2e-5 0.095,0.0751 0.16705,0.16686 0.11876,0.15126 0.11539,0.15463 -0.036,0.0361 -0.15899,-0.12455 -0.20958,-0.20287 -0.13105,-0.20291 z m 0.83375,19.95455 c 0.13118,-8e-5 0.18486,0.0215 0.11928,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 1.91249,-34.99167 0.21457,-0.18186 -0.18163,0.21476 c -0.17069,0.20183 -0.24744,0.25824 -0.24748,0.18189 -1e-5,-0.0181 0.0965,-0.11476 0.21454,-0.21479 z m -0.13045,34.19447 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.3793,-5.87186 c 0.0242,0.0928 0.0227,0.22162 -0.003,0.28623 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16876 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 0.55974,-22.80245 c 0.0242,0.0928 0.0227,0.22161 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15743 0.0232,-0.21029 0.0474,-0.11747 z m 0.38295,4.05871 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.10688,20.60773 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.4787,6.57682 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11924 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 0.75816,-9.15944 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 0.68844,21.95973 0.26224,-0.23144 -0.23115,0.2625 c -0.12713,0.14437 -0.24513,0.2625 -0.26222,0.26251 -0.0748,4e-5 -0.014,-0.0772 0.23113,-0.29357 z m 0.35054,-27.27169 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.58503,22.61101 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.59534,12.58065 0.35759,-0.32899 -0.32858,0.35796 c -0.30585,0.33318 -0.38654,0.40186 -0.38658,0.329 -1e-5,-0.0159 0.1609,-0.17703 0.35757,-0.35797 z m 0.0625,-30.51744 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.3376,-13.66929 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.66149,-15.55647 c 0.0229,0.11867 0.0221,0.2904 -0.002,0.38163 -0.0238,0.0912 -0.0426,-0.006 -0.0416,-0.21576 9.5e-4,-0.20989 0.0204,-0.28453 0.0433,-0.16587 z m 0.28647,4.5842 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.76338,3.80987 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13119 0.0215,-0.18486 0.048,-0.11929 z m 0.1934,-0.61843 c 0.0242,0.0928 0.0227,0.22161 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 8.9e-4,3.29567 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.0119,21.27563 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m -1.3e-4,3.33327 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 3.52095,-16.31647 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11923 -8e-5,-0.13119 0.0215,-0.18487 0.0481,-0.11929 z m 0.005,4.53362 c 0.0242,0.0928 0.0227,0.22161 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15742 0.0232,-0.21028 0.0475,-0.11747 z m 1.62147,0.90961 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13376 0.0576,-0.0577 z m 1.61809,-6.87017 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z"
           id="path28" /><path
           style="fill:#000000;fill-opacity:1"
           d="m 88.981833,243.67827 c 0.02405,0.0918 0.02413,0.24208 1.86e-4,0.33392 -0.02395,0.0918 -0.04362,0.0167 -0.04372,-0.16693 -1.03e-4,-0.18366 0.01949,-0.2588 0.04354,-0.16699 z m 20.610467,5.86199 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 3.2e-4,0.57243 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.3808,-5.55746 c 0.13594,-0.0519 0.14691,-0.0409 0.0534,0.0534 -0.0647,0.0652 -0.14165,0.0946 -0.17104,0.0652 -0.0294,-0.0294 0.0235,-0.0827 0.1176,-0.11861 z m 0.65325,9.22979 c 0.31484,3.6e-4 0.43214,0.0181 0.26068,0.0394 -0.17147,0.0213 -0.42907,0.021 -0.57244,-6.5e-4 -0.14338,-0.0217 -0.003,-0.0391 0.31176,-0.0388 z m 1.85202,-15.08976 c 0.13118,-7e-5 0.18486,0.0216 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.34617,7.7202 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.52337,-5.62983 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 2.25558,-4.26344 0.21456,-0.18186 -0.18163,0.21476 c -0.17068,0.20183 -0.24743,0.25824 -0.24748,0.18189 -10e-6,-0.0181 0.0965,-0.11476 0.21455,-0.21479 z m 0.45179,-2.49732 c 0.18366,-1e-4 0.2588,0.0195 0.16698,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33392,1.8e-4 -0.0918,-0.0239 -0.0167,-0.0436 0.16694,-0.0437 z m -0.0395,0.36704 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.7076,0.007 c 0.13119,-7e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 1.19923,11.93414 c 0.20989,9.4e-4 0.28454,0.0204 0.16587,0.0433 -0.11866,0.0229 -0.29039,0.0221 -0.38163,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21576,-0.0416 z m 0.77119,-0.017 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.00733,-18.57371 0.21456,-0.18187 -0.18163,0.21476 c -0.17068,0.20183 -0.24743,0.25824 -0.24748,0.18189 -1e-5,-0.0181 0.0965,-0.11476 0.21455,-0.21478 z m 0.11929,21.04612 c 0.0198,-10e-6 0.095,0.0751 0.16706,0.16687 0.11876,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 1.10541,-6.18697 c 0.13119,-7e-5 0.18487,0.0215 0.11929,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.4e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 1.33681,2.00279 c 0.13118,-7e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.96784,-18.10113 0.30991,-0.28039 -0.28004,0.31023 c -0.26104,0.28917 -0.33973,0.35411 -0.33977,0.2804 -1e-5,-0.0164 0.13944,-0.15603 0.3099,-0.31024 z m 0.70855,15.99372 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.52687,-16.43618 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 2.34399,43.0926 c 0.105,0.0949 0.19092,0.19405 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.0299 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19405 -0.19094,-0.22028 -10e-6,-0.0262 0.0859,0.03 0.19089,0.12487 z m 0.32242,0.33374 c 0.0198,-1e-5 0.095,0.0751 0.16706,0.16687 0.11875,0.15126 0.11538,0.15463 -0.036,0.036 -0.15899,-0.12454 -0.20957,-0.20286 -0.13105,-0.20291 z m 1.0541,-45.10399 c 0.0241,0.0918 0.0241,0.24208 1.9e-4,0.33392 -0.0239,0.0918 -0.0436,0.0167 -0.0437,-0.16693 -1e-4,-0.18366 0.0195,-0.2588 0.0435,-0.16699 z m 0.34058,44.38767 c 0.105,0.0949 0.19092,0.19404 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19405 -0.19093,-0.22028 -2e-5,-0.0262 0.0859,0.0299 0.19088,0.12487 z m 2.6376,-6.36389 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 2.17066,-42.55249 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 4.01578,15.64442 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.86455,38.78047 c 0.2886,-1.6e-4 0.40668,0.0177 0.26239,0.0396 -0.14429,0.0219 -0.38042,0.0221 -0.52474,2.9e-4 -0.14431,-0.0218 -0.0263,-0.0397 0.26235,-0.0399 z m 2.3319,-24.2556 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 3.7897,-47.70534 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.31571,24.40418 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12455,0.15899 -0.20287,0.20957 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 0.1053,32.80808 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11924 -8e-5,-0.13118 0.0215,-0.18486 0.0481,-0.11928 z m 0.15328,-53.87336 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.91234,25.01059 c 0.18366,-1e-4 0.2588,0.0195 0.16699,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33392,1.9e-4 -0.0918,-0.024 -0.0167,-0.0436 0.16693,-0.0437 z m 1.05797,15.25738 c 0.13118,-8e-5 0.18486,0.0215 0.11928,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.4e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.68026,-31.30877 c 0.0164,0 0.15603,0.13945 0.31025,0.3099 l 0.28039,0.30992 -0.31023,-0.28005 c -0.28917,-0.26104 -0.35411,-0.33972 -0.28041,-0.33977 z m 0.85556,48.03668 c 0.105,0.0949 0.19092,0.19405 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.0299 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19404 -0.19093,-0.22028 -2e-5,-0.0262 0.0859,0.03 0.19088,0.12487 z m 1.64979,-25.58091 c 0.0756,-0.0291 0.21516,-0.0361 0.31007,-0.0156 0.10774,0.0233 0.0561,0.056 -0.13749,0.087 -0.32488,0.0521 -0.40635,0.0184 -0.17258,-0.0714 z m 0.58465,11.9129 c 0.20989,9.4e-4 0.28454,0.0204 0.16587,0.0433 -0.11866,0.0229 -0.29039,0.0221 -0.38162,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21575,-0.0416 z m 0.42374,-10.02691 c 0.13119,-7e-5 0.18487,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.003,5.15195 c 0.13119,-7e-5 0.18487,0.0215 0.11929,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.4e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.52995,9.35307 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22162,0.0227 -0.28623,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16876,-0.0441 z m 0.19919,-22.94224 c 0.0212,0.16936 0.0217,0.46989 10e-4,0.66784 -0.0205,0.19796 -0.0379,0.0594 -0.0385,-0.30792 -6.3e-4,-0.36731 0.0162,-0.52928 0.0374,-0.35992 z m 0.006,21.65939 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13119 0.0215,-0.18486 0.0481,-0.11929 z m 0.055,3.53649 c 0.0509,0.0508 0.0757,0.17216 0.0551,0.26958 -0.0277,0.13118 -0.0517,0.1072 -0.0926,-0.0925 -0.0356,-0.17408 -0.0223,-0.23682 0.0374,-0.17712 z m 0.27814,-41.86622 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11538,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20287 -0.13105,-0.20291 z m 0.38183,0.38141 c 0.0198,-1e-5 0.095,0.0751 0.16706,0.16687 0.11876,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20286 -0.13106,-0.20291 z m 0.94549,49.27692 c 0.0668,-0.15559 0.0831,-0.16105 0.0887,-0.0295 0.004,0.0887 -0.0361,0.18789 -0.0886,0.22035 -0.10966,0.0679 -0.10967,0.0645 -10e-5,-0.19081 z m 0.33372,-31.74073 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.5612,32.16956 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16686 0.11876,0.15126 0.11538,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20287 -0.13105,-0.20291 z m 0.2147,-20.90631 c 0.15125,-0.11876 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16705 -0.16687,0.16706 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m 1.41515,-17.17967 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.3847,-0.14929 c 0.0219,0.14429 0.0221,0.38042 3e-4,0.52474 -0.0218,0.14431 -0.0397,0.0263 -0.0399,-0.26235 -1.6e-4,-0.2886 0.0177,-0.40668 0.0396,-0.26239 z m 0.18787,3.95927 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13118 0.0215,-0.18486 0.048,-0.11928 z m 0.76304,-0.38205 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 0.018,28.7233 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 3.52192,-16.27292 c 0.0242,0.0928 0.0227,0.22162 -0.003,0.28623 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16876 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 0.002,3.52823 c 0.024,0.0918 0.0241,0.24208 1.8e-4,0.33392 -0.0239,0.0918 -0.0436,0.0167 -0.0437,-0.16694 -1e-4,-0.18365 0.0195,-0.2588 0.0435,-0.16698 z m 1.61842,-5.19459 c 0.0276,0.0689 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.004,6.96467 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.62175,-0.28713 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z"
           id="path29" /><path
           style="fill:#000000;fill-opacity:1"
           d="m 97.088224,227.60945 c 0.151253,-0.11876 0.15463,-0.11538 0.03604,0.036 -0.07197,0.0919 -0.147057,0.16705 -0.166868,0.16706 -0.07852,4e-5 -0.02803,-0.0783 0.130828,-0.20306 z m 2.570245,32.54434 c 0.183756,0.17791 0.334114,0.34493 0.334129,0.37117 1.5e-5,0.0262 -0.15032,-0.0978 -0.334076,-0.27576 -0.183757,-0.17791 -0.334115,-0.34493 -0.334129,-0.37117 -1.5e-5,-0.0262 0.150319,0.0979 0.334076,0.27576 z m 9.933991,-10.32731 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z M 110.15715,253 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 1.02869,-3.06112 c 0.0201,-1e-5 0.0569,0.106 0.0818,0.23559 0.0248,0.12958 0.008,0.21292 -0.0365,0.1852 -0.0791,-0.0488 -0.1191,-0.42075 -0.0453,-0.42079 z m 0.33987,-9.30232 c 0.0525,0.0324 0.0954,0.0778 0.0955,0.10099 10e-6,0.0231 -0.0429,0.0421 -0.0954,0.0421 -0.0525,3e-5 -0.0954,-0.0454 -0.0955,-0.10098 -3e-5,-0.0556 0.0429,-0.0745 0.0954,-0.0421 z m 5.00515,-6.61493 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0475 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 0.81117,0.37764 c 0.13118,-8e-5 0.18486,0.0215 0.11928,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.1906,-0.38174 c 0.13118,-7e-5 0.18486,0.0216 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.0687,6.35925 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.004,6.34038 c 0.0242,0.0928 0.0227,0.22161 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16876 0.002,-0.15742 0.0232,-0.21028 0.0475,-0.11746 z m 0.84798,-0.40024 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 3.14634,-3.7226 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0242 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 2.23522,2.02074 c 0.23614,-1.3e-4 0.33275,0.0184 0.21469,0.0412 -0.11805,0.0228 -0.31125,0.0229 -0.42933,2.4e-4 -0.11807,-0.0227 -0.0215,-0.0413 0.21464,-0.0415 z m 0.0448,15.81147 c 0.0198,-2e-5 0.095,0.0751 0.16705,0.16686 0.11876,0.15126 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20957,-0.20287 -0.13105,-0.20291 z m 5.16676,5.6261 c 0.13126,0.12317 0.23866,0.24541 0.23867,0.27164 2e-5,0.0262 -0.10736,-0.0531 -0.23861,-0.17623 -0.13125,-0.12317 -0.23865,-0.24541 -0.23867,-0.27165 -1e-5,-0.0262 0.10736,0.0531 0.23861,0.17624 z m 1.13897,-41.99737 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.99604,3.64976 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.86288,42.82949 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20957,-0.20287 -0.13105,-0.20291 z m 0.12019,-7.84129 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 5.3e-4,0.95407 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.33702,2.38441 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 2.13144,4.07148 c 0.105,0.0949 0.19093,0.19404 0.19094,0.22028 1e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19405 -0.19094,-0.22028 -1e-5,-0.0262 0.0859,0.0299 0.19088,0.12487 z m 2.13991,-43.47673 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.92679,22.04354 c 0.15125,-0.11875 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16704 -0.16687,0.16705 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m 0.35001,-28.2208 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 1.15807,10.17646 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11923 -8e-5,-0.13119 0.0215,-0.18487 0.048,-0.11929 z m 1.0512,16.63152 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.39789,10.41722 c 0.0242,0.0928 0.0227,0.22162 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 0.17609,-7.65075 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.1854,-9.73156 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.3791,9.74231 c 0.15742,0.002 0.21028,0.0232 0.11746,0.0475 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16876,-0.0441 z m 0.005,-22.26619 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 1.3655,42.07921 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12455,0.15899 -0.20286,0.20957 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 1.55823,-50.55413 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20286 -0.13105,-0.20291 z m 0.2964,-16.97498 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.66176,3.34992 c 0.15742,0.002 0.21028,0.0232 0.11746,0.0475 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16876,-0.0441 z m 0.0262,19.32505 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13119 0.0216,-0.18487 0.0481,-0.11929 z m 0.83241,-19.32552 c 0.15743,0.002 0.21029,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m -0.0883,33.65993 c 0.0198,-10e-6 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20957,-0.20287 -0.13105,-0.20291 z m 0.77731,-10.01058 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0242 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.0265,19.06157 c 0.15126,-0.11875 0.15463,-0.11538 0.0361,0.036 -0.12455,0.15899 -0.20287,0.20957 -0.20291,0.13105 -2e-5,-0.0198 0.0751,-0.095 0.16686,-0.16706 z m 0.13055,-22.56059 0.21456,-0.18187 -0.18162,0.21477 c -0.0999,0.11812 -0.19645,0.21477 -0.21455,0.21478 -0.0764,4e-5 -0.02,-0.0768 0.18161,-0.24768 z m 0.79652,2.63983 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.18882,10.69649 c 0.15743,0.002 0.21029,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 0.01,3.51896 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 2.27974,-3.71105 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 0.81903,14.50486 c 0.18366,-1e-4 0.2588,0.0195 0.16699,0.0435 -0.0918,0.0241 -0.24208,0.0241 -0.33392,1.8e-4 -0.0919,-0.0239 -0.0167,-0.0436 0.16693,-0.0437 z m -0.0248,8.1131 c 0.0242,0.0928 0.0227,0.22161 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16876 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11746 z m 0.58397,10.93853 0.26224,-0.23145 -0.23115,0.2625 c -0.12713,0.14437 -0.24513,0.2625 -0.26222,0.26251 -0.0748,5e-5 -0.014,-0.0772 0.23113,-0.29356 z m 0.27165,-14.70342 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.4074,-6.03997 c 0.0541,-0.0335 0.0701,0.005 0.0375,0.0898 -0.0633,0.16532 -0.1317,0.1956 -0.13178,0.0584 -3e-5,-0.0494 0.0424,-0.11602 0.0942,-0.14811 z m 0.63586,11.98001 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.10821,5.88972 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.20918,-21.30557 c 0.105,0.0949 0.19092,0.19404 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12488 -0.105,-0.0949 -0.19092,-0.19404 -0.19094,-0.22028 -1e-5,-0.0262 0.0859,0.03 0.19089,0.12488 z m 0.0789,-29.7041 c 0.13119,-7e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.46677,24.39657 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.072,0.0919 -0.14706,0.16704 -0.16687,0.16705 -0.0785,5e-5 -0.028,-0.0783 0.13083,-0.20305 z m 0.90536,-23.64914 c 0.0198,-1e-5 0.095,0.0751 0.16706,0.16687 0.11875,0.15125 0.11538,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20957,-0.20287 -0.13105,-0.20291 z m 0.52689,37.19034 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.74599,-31.00752 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.57542,3.66868 c 0.0242,0.0928 0.0227,0.22162 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 0.0963,2.19248 c 0.024,0.0918 0.0241,0.24208 1.9e-4,0.33392 -0.024,0.0919 -0.0436,0.0167 -0.0437,-0.16693 -1e-4,-0.18366 0.0195,-0.2588 0.0435,-0.16699 z m 0.68318,26.90606 c 0.0242,0.0928 0.0227,0.22161 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 3.52333,-16.03206 c 0.0219,0.14429 0.0221,0.38042 2.9e-4,0.52473 -0.0218,0.14432 -0.0397,0.0263 -0.0399,-0.26234 -1.6e-4,-0.28861 0.0177,-0.40668 0.0396,-0.26239 z m 0.002,1.95583 c 0.0213,0.17053 0.0214,0.44959 3.5e-4,0.62014 -0.0211,0.17055 -0.0385,0.031 -0.0387,-0.31005 -1.9e-4,-0.34108 0.017,-0.48062 0.0383,-0.31009 z m 3.2378,-3.90751 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.003,6.10601 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z"
           id="path30" /><path
           style="fill:#000000;fill-opacity:1"
           d="m 96.805405,243.48492 c 0.02424,0.0928 0.02272,0.22161 -0.0034,0.28622 -0.0261,0.0646 -0.04593,-0.0113 -0.04408,-0.16875 0.0019,-0.15742 0.02321,-0.21029 0.04745,-0.11747 z m 2.328036,16.14443 c 0.105,0.0949 0.190921,0.19404 0.190936,0.22028 1.4e-5,0.0262 -0.08588,-0.03 -0.190883,-0.12487 -0.105,-0.0949 -0.190921,-0.19405 -0.190935,-0.22028 -1.5e-5,-0.0262 0.08588,0.0299 0.190882,0.12487 z m 0.965319,-22.61787 0.30992,-0.28039 -0.28005,0.31023 c -0.154022,0.17062 -0.293476,0.31023 -0.309895,0.31024 -0.07371,4e-5 -0.0089,-0.0787 0.280025,-0.34008 z m 0.27566,23.85746 c 0.105,0.0949 0.19092,0.19405 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.0299 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19404 -0.19094,-0.22028 -1e-5,-0.0262 0.0859,0.03 0.19089,0.12487 z m 5.82961,-25.19655 0.30992,-0.28039 -0.28005,0.31023 c -0.26104,0.28917 -0.33973,0.35411 -0.33977,0.2804 -1e-5,-0.0164 0.13945,-0.15603 0.3099,-0.31024 z m 3.00247,2.22364 c 0.0229,0.11867 0.0221,0.2904 -0.002,0.38163 -0.0238,0.0912 -0.0426,-0.006 -0.0416,-0.21576 9.4e-4,-0.20989 0.0204,-0.28453 0.0433,-0.16587 z m 0.56945,15.86743 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.66742,-0.76362 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.7942,-15.79775 c 0.12071,-0.0747 0.12078,0.0516 1.4e-4,0.23852 -0.0796,0.12337 -0.0926,0.12086 -0.094,-0.0182 -8.5e-4,-0.0887 0.0414,-0.18789 0.0938,-0.22035 z m 0.0111,12.59114 c 0.0285,-0.0176 0.0612,0.091 0.0727,0.24131 0.0115,0.15034 -0.0117,0.29355 -0.0516,0.31824 -0.0399,0.0247 -0.0726,-0.0839 -0.0727,-0.24131 -9e-5,-0.15742 0.0231,-0.30063 0.0516,-0.31824 z m 0.24461,3.96927 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.99089,-22.70784 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 2.11154,22.61015 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.56149,-19.65404 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.71732,-9.6e-4 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 3.38376,8.59223 c 0.13118,-7e-5 0.18486,0.0216 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 1.39417,19.35167 c 0.18376,0.17791 0.33411,0.34493 0.33413,0.37117 1e-5,0.0262 -0.15032,-0.0979 -0.33408,-0.27576 -0.18375,-0.17791 -0.33411,-0.34493 -0.33413,-0.37117 -1e-5,-0.0262 0.15032,0.0979 0.33408,0.27576 z m 0.94137,-1.81324 c 0.0198,-2e-5 0.095,0.0751 0.16706,0.16686 0.11875,0.15126 0.11538,0.15463 -0.036,0.0361 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 0.86169,-15.53314 c 0.15742,0.002 0.21029,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 3.87354,-25.64098 0.50062,-0.47372 -0.47317,0.50115 c -0.43967,0.46567 -0.52802,0.54493 -0.52806,0.47374 -1e-5,-0.0151 0.22527,-0.24062 0.50061,-0.50117 z m 1.4768,-3.58715 c 0.15125,-0.11875 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14705,0.16704 -0.16687,0.16705 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m 0.0977,4.19783 c 0.15126,-0.11875 0.15464,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16704 -0.16687,0.16705 -0.0785,4e-5 -0.028,-0.0783 0.13082,-0.20306 z m 0.37903,-4.67512 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12455,0.15899 -0.20287,0.20957 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 2.86368,2.66978 c 0.15125,-0.11875 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16705 -0.16687,0.16706 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m -0.0103,10.1328 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0242 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.0315,35.36551 c 0.0229,0.11866 0.0221,0.29039 -0.002,0.38162 -0.0238,0.0912 -0.0426,-0.006 -0.0416,-0.21575 9.4e-4,-0.2099 0.0204,-0.28454 0.0433,-0.16587 z m 2.12048,-11.47492 c 0.105,0.0949 0.19092,0.19404 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12488 -0.105,-0.0949 -0.19092,-0.19404 -0.19093,-0.22028 -2e-5,-0.0262 0.0859,0.03 0.19088,0.12488 z m 0.0594,-6.75005 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11923 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11929 z m 0.51525,10.7568 c 0.26251,0.25827 0.4773,0.49106 0.47732,0.51729 1e-5,0.0262 -0.21476,-0.16361 -0.47727,-0.42189 -0.26251,-0.25827 -0.47731,-0.49106 -0.47732,-0.51729 -1e-5,-0.0262 0.21476,0.16361 0.47727,0.42189 z m 0.34105,-18.57464 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.1863,-19.55271 c 0.15126,-0.11876 0.15463,-0.11538 0.036,0.036 -0.12454,0.15899 -0.20286,0.20958 -0.2029,0.13105 -2e-5,-0.0198 0.0751,-0.095 0.16686,-0.16705 z m 1.81184,8.81241 c 0.0241,0.0918 0.0241,0.24208 1.9e-4,0.33392 -0.0239,0.0918 -0.0436,0.0167 -0.0437,-0.16694 -1.1e-4,-0.18365 0.0195,-0.2588 0.0435,-0.16698 z m 0.93,-10.7867 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m -0.1496,36.73813 c 0.022,0.14501 0.0215,0.35968 -0.001,0.47704 -0.0226,0.11735 -0.0406,-0.001 -0.04,-0.26366 5.7e-4,-0.26237 0.019,-0.35839 0.0411,-0.21338 z m 0.32427,19.92967 c 0.13118,-7e-5 0.18486,0.0216 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11924,-0.0482 z m 1.0948,-35.62017 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 1.61662,21.86507 c 0.13125,0.12317 0.23865,0.24541 0.23867,0.27164 1e-5,0.0262 -0.10736,-0.0531 -0.23862,-0.17623 -0.13125,-0.12317 -0.23865,-0.24541 -0.23866,-0.27165 -2e-5,-0.0262 0.10736,0.0531 0.23861,0.17624 z m 0.87687,-10.12574 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12455,0.15899 -0.20286,0.20957 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 0.65137,-1.03014 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 2.88164,17.81399 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 1.48203,-62.75286 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.80487,3.34631 c 0.13119,-7e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.4e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.43542,-3.347 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.0434,60.84388 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.72504,5.59427 0.40527,-0.37736 -0.37691,0.40569 c -0.2073,0.22313 -0.38966,0.40569 -0.40525,0.4057 -0.0722,4e-5 0,-0.0831 0.37689,-0.43403 z m 2.2152,-5.38721 c 0.18376,0.17791 0.33412,0.34493 0.33413,0.37117 2e-5,0.0262 -0.15032,-0.0979 -0.33407,-0.27576 -0.18376,-0.17791 -0.33412,-0.34493 -0.33413,-0.37117 -2e-5,-0.0262 0.15032,0.0979 0.33407,0.27576 z m -0.12462,-31.48406 c 0.0198,-1e-5 0.095,0.0751 0.16706,0.16687 0.11876,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 0.69955,2.88747 c 0.0242,0.0928 0.0227,0.22161 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 0.12439,-0.55047 c 0.0525,-0.0325 0.0954,-0.0135 0.0954,0.042 3e-5,0.0556 -0.0429,0.10106 -0.0953,0.10109 -0.0525,3e-5 -0.0954,-0.0189 -0.0954,-0.042 -1e-5,-0.0231 0.0429,-0.0686 0.0954,-0.10109 z m -0.022,18.43731 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11924 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 0.57414,3.05269 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 0.97674,-17.13479 c 0.13119,-8e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 0.078,23.05536 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.4002,-3.1313 c 0.0198,-1e-5 0.095,0.0751 0.16706,0.16687 0.11876,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 0.75555,-13.83436 c 0.0198,-10e-6 0.095,0.0751 0.16706,0.16687 0.11875,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 0.22844,-39.06907 c 0.105,0.0949 0.19093,0.19404 0.19094,0.22028 2e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12488 -0.105,-0.0949 -0.19092,-0.19404 -0.19094,-0.22028 -1e-5,-0.0262 0.0859,0.03 0.19088,0.12488 z m 0.61598,13.49967 c 0.0198,-10e-6 0.095,0.0751 0.16706,0.16687 0.11875,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 0.2613,30.05289 c 0.0494,-3e-5 0.11603,0.0424 0.14812,0.0942 0.0335,0.0541 -0.005,0.0701 -0.0898,0.0376 -0.16532,-0.0633 -0.1956,-0.1317 -0.0584,-0.13178 z m 1.97922,4.07752 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13119 0.0215,-0.18486 0.048,-0.11929 z m 0.67388,5.58272 c 0.0243,0.0928 0.0227,0.22162 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16875 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11747 z m 3.42283,-19.50838 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.10077,3.95335 c 0.0219,0.14429 0.0221,0.38042 2.9e-4,0.52474 -0.0218,0.14431 -0.0397,0.0262 -0.0399,-0.26235 -1.6e-4,-0.2886 0.0177,-0.40668 0.0396,-0.26239 z m 1.61671,-3.66809 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.62353,6.48078 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13118 0.0215,-0.18486 0.0481,-0.11928 z"
           id="path31" /><path
           style="fill:#000000;fill-opacity:1"
           d="m 96.804279,243.15514 c 0.0276,0.0689 0.02426,0.15115 -0.0074,0.18287 -0.03168,0.0317 -0.05427,-0.0246 -0.05018,-0.12519 0.0045,-0.11115 0.02711,-0.13377 0.05761,-0.0577 z m 4.25e-4,0.76326 c 0.0276,0.0688 0.02425,0.15114 -0.0074,0.18286 -0.03168,0.0317 -0.05427,-0.0246 -0.05018,-0.12519 0.0045,-0.11115 0.02711,-0.13377 0.05761,-0.0577 z m 1.887487,15.28187 c 0.01981,-10e-6 0.09499,0.0751 0.167054,0.16687 0.118758,0.15125 0.115385,0.15463 -0.036,0.036 -0.158992,-0.12455 -0.209576,-0.20287 -0.131053,-0.20291 z m 0.541484,-33.73555 0.214563,-0.18187 -0.181629,0.21476 c -0.170686,0.20183 -0.247437,0.25824 -0.247479,0.18189 -1e-5,-0.0181 0.09654,-0.11476 0.214545,-0.21478 z m 0.951045,37.40787 c 0.105,0.0949 0.19092,0.19404 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12488 -0.105,-0.0949 -0.19092,-0.19404 -0.190934,-0.22028 -1.5e-5,-0.0262 0.08588,0.03 0.190884,0.12488 z m 1.86468,-23.72744 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.26893,21.29338 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20286 -0.13105,-0.20291 z m 0.60021,-13.94185 c 0.15125,-0.11875 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16704 -0.16687,0.16705 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m 3.27078,5.59163 c 0.105,0.0949 0.19092,0.19404 0.19094,0.22028 10e-6,0.0262 -0.0859,-0.03 -0.19089,-0.12487 -0.105,-0.0949 -0.19092,-0.19405 -0.19093,-0.22028 -2e-5,-0.0262 0.0859,0.03 0.19088,0.12487 z m 3.30041,1.67531 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.0966,-16.10743 c 0.024,0.0918 0.0241,0.24208 1.8e-4,0.33392 -0.0239,0.0919 -0.0436,0.0167 -0.0437,-0.16693 -1e-4,-0.18366 0.0195,-0.2588 0.0435,-0.16699 z m 1.03775,-2.87909 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.14531,18.23009 c 0.13119,-8e-5 0.18486,0.0215 0.11929,0.048 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 3.00103,-21.95269 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.24671,11.54348 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m -0.0566,10.15737 c 0.0488,-0.0302 0.11135,-0.0185 0.13893,0.0261 0.0276,0.0446 -0.0124,0.0811 -0.0888,0.0811 -0.16087,9e-5 -0.17494,-0.03 -0.0502,-0.1072 z m 2.05841,1.02383 c 0.26236,5.7e-4 0.35838,0.019 0.21337,0.0411 -0.14501,0.022 -0.35968,0.0215 -0.47703,-0.001 -0.11736,-0.0226 0.001,-0.0406 0.26366,-0.04 z m 1.28092,-12.68652 c 0.34108,-1.9e-4 0.48062,0.0171 0.31009,0.0383 -0.17053,0.0213 -0.44959,0.0214 -0.62014,3.5e-4 -0.17055,-0.0211 -0.031,-0.0385 0.31005,-0.0387 z m 2.55066,-2.6201 c 0.15126,-0.11876 0.15463,-0.11539 0.036,0.036 -0.072,0.0919 -0.14705,0.16704 -0.16686,0.16705 -0.0785,5e-5 -0.028,-0.0783 0.13082,-0.20305 z m 3.42098,4.02486 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 4.29887,16.90995 c 0.081,-0.0311 0.16852,-0.0353 0.19459,-0.009 0.0261,0.026 -0.0402,0.0703 -0.14717,0.0984 -0.22731,0.0596 -0.26246,-0.006 -0.0474,-0.0891 z m 0.94944,-43.74179 c 0.15125,-0.11875 0.15463,-0.11538 0.036,0.036 -0.12455,0.159 -0.20286,0.20958 -0.20291,0.13106 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16706 z m 0.0981,4.86568 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12455,0.15899 -0.20287,0.20958 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 0.36831,18.92104 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22162,0.0227 -0.28623,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16876,-0.0441 z m -0.084,-14.8304 c 0.0228,0.11805 0.0229,0.31125 2.4e-4,0.42933 -0.0227,0.11807 -0.0413,0.0215 -0.0415,-0.21465 -1.3e-4,-0.23613 0.0184,-0.33274 0.0412,-0.21468 z m 1.04605,14.8188 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.0987,20.23718 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 1.69952,-31.96211 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22162,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 0.2199,20.85741 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.0921,11.18792 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m -0.0104,-35.70743 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.38415,0.66167 c 0.0228,0.11805 0.0229,0.31125 2.4e-4,0.42933 -0.0227,0.11807 -0.0413,0.0215 -0.0415,-0.21465 -1.4e-4,-0.23613 0.0184,-0.33274 0.0412,-0.21468 z m 5.93879,-8.06042 c 0.2886,-1.6e-4 0.40668,0.0177 0.26239,0.0396 -0.14429,0.0219 -0.38042,0.0221 -0.52474,2.9e-4 -0.14431,-0.0218 -0.0263,-0.0397 0.26235,-0.0399 z m -0.39228,35.15873 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 1.77667,-12.38594 c 0.0198,-1e-5 0.095,0.0751 0.16706,0.16686 0.11875,0.15126 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 1.02949,18.69909 c 0.0556,-3e-5 0.0745,0.0429 0.0421,0.0954 -0.0324,0.0525 -0.0778,0.0955 -0.10098,0.0955 -0.0231,10e-6 -0.0421,-0.0429 -0.0421,-0.0954 -3e-5,-0.0525 0.0454,-0.0954 0.10098,-0.0955 z m 0.59771,-44.45221 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.49045,38.36965 c 0.2099,9.4e-4 0.28454,0.0204 0.16587,0.0433 -0.11866,0.0229 -0.29039,0.0221 -0.38162,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21575,-0.0416 z m 0.36975,-35.60334 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 4.02689,35.58436 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.25237,-49.6864 c 0.2886,-1.6e-4 0.40668,0.0177 0.26239,0.0396 -0.14429,0.0219 -0.38042,0.0221 -0.52474,2.9e-4 -0.14431,-0.0218 -0.0263,-0.0397 0.26235,-0.0399 z m 0.18484,32.11111 c 0.15125,-0.11875 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16705 -0.16687,0.16706 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m 0.10322,14.0247 c 0.15125,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12455,0.15899 -0.20287,0.20957 -0.20291,0.13105 -10e-6,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m 1.27123,12.74822 c 0.105,0.0949 0.19092,0.19404 0.19094,0.22028 1e-5,0.0262 -0.0859,-0.03 -0.19089,-0.12487 -0.105,-0.0949 -0.19092,-0.19405 -0.19093,-0.22028 -2e-5,-0.0262 0.0859,0.0299 0.19088,0.12487 z m 0.79395,12.29793 0.21457,-0.18187 -0.18163,0.21477 c -0.17069,0.20182 -0.24744,0.25823 -0.24748,0.18188 -10e-6,-0.0181 0.0965,-0.11476 0.21454,-0.21478 z m 0.56219,-18.41376 0.21456,-0.18187 -0.18163,0.21476 c -0.0999,0.11813 -0.19644,0.21478 -0.21454,0.21479 -0.0763,4e-5 -0.02,-0.0768 0.18161,-0.24768 z m 1.08207,-12.08431 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11924 -7e-5,-0.13118 0.0215,-0.18486 0.048,-0.11928 z m 0.0884,-16.21319 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.01,17.93641 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.18725,-6.39233 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.04608,10.99658 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.95504,-11.76691 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13118 0.0216,-0.18486 0.0481,-0.11928 z m 0.76211,-5.62345 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.72701,16.35529 c 0.024,0.0918 0.0241,0.24208 1.9e-4,0.33392 -0.0239,0.0918 -0.0436,0.0167 -0.0437,-0.16694 -1.1e-4,-0.18365 0.0195,-0.2588 0.0435,-0.16698 z m 0.40246,-15.81385 c 0.0525,0.0324 0.0954,0.0779 0.0955,0.10099 1e-5,0.0231 -0.0429,0.0421 -0.0954,0.0421 -0.0525,3e-5 -0.0954,-0.0454 -0.0955,-0.10098 -3e-5,-0.0556 0.0429,-0.0745 0.0954,-0.0421 z m -0.0152,27.02986 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 2.67122,-0.28771 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 5.24151,-16.18028 c 0.0219,0.14429 0.0221,0.38042 2.9e-4,0.52474 -0.0218,0.14431 -0.0397,0.0263 -0.0399,-0.26235 -1.6e-4,-0.2886 0.0177,-0.40668 0.0396,-0.26239 z m 1.43089,5.30023 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.0892,-7.63853 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13118 0.0215,-0.18486 0.048,-0.11928 z m 0.005,5.0625 c 0.0276,0.0689 0.0243,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z"
           id="path32" /><path
           style="fill:#000000;fill-opacity:1"
           d="m 97.26152,259.96432 c 0.01981,-2e-5 0.09499,0.0751 0.167054,0.16686 0.118757,0.15126 0.115385,0.15463 -0.036,0.0361 -0.158993,-0.12455 -0.209576,-0.20287 -0.131053,-0.20291 z m 1.042452,-33.58366 c 0.393334,-0.39114 0.715164,-0.68971 0.715179,-0.66347 1.4e-5,0.0262 -0.321792,0.36773 -0.715126,0.75888 -0.393334,0.39114 -0.715165,0.6897 -0.715179,0.66346 -1.5e-5,-0.0262 0.321792,-0.36773 0.715126,-0.75887 z m 0.10184,32.53355 c 0.01981,-1e-5 0.09499,0.0751 0.167055,0.16687 0.118757,0.15125 0.115385,0.15463 -0.036,0.036 -0.158993,-0.12455 -0.209576,-0.20287 -0.131054,-0.20291 z m 1.138975,-31.58018 c 0.393334,-0.39114 0.715163,-0.6897 0.715183,-0.66346 1e-5,0.0262 -0.321796,0.36773 -0.71513,0.75887 -0.393334,0.39114 -0.715165,0.6897 -0.715179,0.66347 -1.5e-5,-0.0262 0.321792,-0.36773 0.715126,-0.75888 z m -0.285523,22.22987 c 0.01981,-1e-5 0.09499,0.0751 0.167054,0.16687 0.118758,0.15125 0.115385,0.15463 -0.036,0.036 -0.158992,-0.12455 -0.209576,-0.20287 -0.131053,-0.20291 z m 0.290735,8.10939 c 0.01981,-1e-5 0.09499,0.0751 0.167054,0.16686 0.118758,0.15126 0.115385,0.15463 -0.036,0.036 -0.158992,-0.12455 -0.209576,-0.20287 -0.131053,-0.20291 z m 0.193469,4.77021 c 0.01981,-10e-6 0.09499,0.0751 0.167054,0.16687 0.118758,0.15125 0.115388,0.15463 -0.036,0.036 -0.158992,-0.12455 -0.209576,-0.20286 -0.131053,-0.20291 z m 0.872882,-38.27065 c 0.15125,-0.11875 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16705 -0.16687,0.16706 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m 0.33082,37.26821 c 0.105,0.0949 0.19092,0.19405 0.19094,0.22028 1e-5,0.0262 -0.0859,-0.0299 -0.19088,-0.12487 -0.105,-0.0949 -0.19093,-0.19404 -0.19094,-0.22028 -1e-5,-0.0262 0.0859,0.03 0.19088,0.12487 z m 1.14419,-1.24092 c 0.105,0.0949 0.19092,0.19405 0.19094,0.22028 10e-6,0.0262 -0.0859,-0.0299 -0.19089,-0.12487 -0.105,-0.0949 -0.19092,-0.19404 -0.19093,-0.22028 -2e-5,-0.0262 0.0859,0.03 0.19088,0.12487 z m 0.0532,-32.97513 c 0.15126,-0.11876 0.15463,-0.11539 0.036,0.036 -0.12454,0.15899 -0.20286,0.20958 -0.20291,0.13105 -1e-5,-0.0198 0.0751,-0.095 0.16687,-0.16705 z m -0.09,21.17457 c 0.0276,0.0689 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 3.22639,-14.19194 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 4.81041,0.58821 c 0.23613,-1.3e-4 0.33274,0.0184 0.21468,0.0412 -0.11805,0.0228 -0.31125,0.0229 -0.42933,2.4e-4 -0.11807,-0.0227 -0.0215,-0.0413 0.21465,-0.0415 z m 1.01985,18.20361 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.85908,0.76278 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 2.7547,-7.43217 c 0.15742,0.002 0.21029,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 0.57831,-3.73225 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 1.37662,2.10571 c 0.13118,-7e-5 0.18486,0.0215 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 1.10223,9.072 c 0.20989,9.4e-4 0.28453,0.0204 0.16587,0.0433 -0.11867,0.0229 -0.2904,0.0221 -0.38163,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21576,-0.0416 z m 0.90393,-4.36556 c 0.105,0.0949 0.19092,0.19404 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19405 -0.19094,-0.22028 -10e-6,-0.0262 0.0859,0.03 0.19089,0.12487 z m 0.47239,-8.32619 c 0.18366,-1.1e-4 0.2588,0.0195 0.16699,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33393,1.8e-4 -0.0918,-0.0239 -0.0167,-0.0436 0.16694,-0.0437 z m 1.20727,12.10134 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.37573,-10.59032 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0242 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m -0.009,18.97836 c 0.0198,-2e-5 0.095,0.0751 0.16705,0.16686 0.11876,0.15126 0.11538,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20287 -0.13105,-0.20291 z m 1.24012,-0.28691 c 0.0198,-10e-6 0.095,0.0751 0.16705,0.16686 0.11876,0.15126 0.11539,0.15463 -0.036,0.0361 -0.15899,-0.12455 -0.20957,-0.20287 -0.13105,-0.20291 z m 0.0963,1.62185 c 0.0198,-10e-6 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20957,-0.20286 -0.13105,-0.20291 z m 3.0545,-18.30114 c 0.15742,0.002 0.21028,0.0232 0.11747,0.0475 -0.0928,0.0242 -0.22162,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 3.68436,-22.68875 0.21457,-0.18187 -0.18163,0.21477 c -0.17069,0.20182 -0.24744,0.25823 -0.24748,0.18188 -1e-5,-0.0181 0.0965,-0.11475 0.21454,-0.21478 z m 1.09268,3.3775 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.21355,40.83384 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.397,-26.674 c 0.18366,-1.1e-4 0.25881,0.0195 0.16699,0.0435 -0.0918,0.0241 -0.24208,0.0241 -0.33392,1.9e-4 -0.0918,-0.0239 -0.0167,-0.0436 0.16693,-0.0437 z m 1.68205,22.3261 c 0.20989,9.4e-4 0.28454,0.0204 0.16587,0.0433 -0.11866,0.0229 -0.29039,0.0221 -0.38162,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21575,-0.0416 z m 0.85864,-37.30331 c 0.022,0.14502 0.0215,0.35968 -0.001,0.47704 -0.0226,0.11735 -0.0406,-0.001 -0.04,-0.26366 5.7e-4,-0.26237 0.019,-0.35839 0.0411,-0.21338 z m 0.38052,35.29362 c 0.15743,0.002 0.21029,0.0232 0.11747,0.0475 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m 1.6141,6.94517 c 0.0198,-10e-6 0.095,0.0751 0.16705,0.16687 0.11876,0.15126 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12454 -0.20957,-0.20286 -0.13105,-0.20291 z m 1.2967,-5.32842 c 0.13119,-7e-5 0.18486,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.13673,9.52551 c 0.0198,-10e-6 0.095,0.0751 0.16706,0.16687 0.11876,0.15125 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 2.12811,-54.26533 c 0.18366,-1e-4 0.25881,0.0195 0.16699,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33392,1.9e-4 -0.0918,-0.024 -0.0167,-0.0436 0.16693,-0.0437 z m 0.16452,10.63945 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -8e-5,-0.13118 0.0215,-0.18486 0.048,-0.11928 z m 0.10416,8.0152 c 0.0229,0.11866 0.0221,0.29039 -0.002,0.38162 -0.0238,0.0912 -0.0426,-0.006 -0.0416,-0.21575 9.4e-4,-0.2099 0.0204,-0.28454 0.0433,-0.16587 z m 0.094,1.5313 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13376 0.0576,-0.0577 z m 0.81247,34.09968 c 0.18366,-1.1e-4 0.2588,0.0195 0.16699,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33393,1.9e-4 -0.0918,-0.024 -0.0167,-0.0436 0.16694,-0.0437 z m 0.21623,-54.30101 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.59779,16.96232 c 0.15125,-0.11876 0.15463,-0.11538 0.036,0.036 -0.072,0.0919 -0.14706,0.16704 -0.16687,0.16706 -0.0785,4e-5 -0.028,-0.0783 0.13083,-0.20306 z m -0.0919,17.83534 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.58165,-37.74126 c 0.18366,-1e-4 0.25881,0.0195 0.16699,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33392,1.9e-4 -0.0918,-0.024 -0.0167,-0.0436 0.16693,-0.0437 z m 0.37742,45.03518 c 0.0242,0.0928 0.0227,0.22161 -0.003,0.28622 -0.0261,0.0646 -0.0459,-0.0113 -0.0441,-0.16876 0.002,-0.15742 0.0232,-0.21028 0.0474,-0.11746 z m 0.0545,-19.39322 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15126 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12454 -0.20957,-0.20286 -0.13105,-0.20291 z m 0.42673,-25.64244 c 0.18366,-10e-5 0.2588,0.0195 0.16699,0.0435 -0.0918,0.0241 -0.24208,0.0241 -0.33392,1.9e-4 -0.0918,-0.0239 -0.0167,-0.0436 0.16693,-0.0437 z m 0.68023,22.22933 c 0.18365,-1e-4 0.2588,0.0195 0.16698,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33392,1.8e-4 -0.0918,-0.0239 -0.0167,-0.0436 0.16694,-0.0437 z m 0.14572,4.69978 c 0.10497,0.0413 0.2839,0.0797 0.39761,0.0854 0.11372,0.006 0.24254,0.0486 0.28627,0.0953 0.0462,0.0494 -0.0768,0.0609 -0.2939,0.0275 -0.20538,-0.0316 -0.42009,-0.10832 -0.47713,-0.17039 -0.0784,-0.0853 -0.0571,-0.0945 0.0872,-0.0378 z m 0.38539,6.75063 c 0.20989,9.4e-4 0.28454,0.0204 0.16587,0.0433 -0.11866,0.0229 -0.2904,0.0221 -0.38163,-0.002 -0.0912,-0.0238 0.006,-0.0426 0.21576,-0.0416 z m 0.75998,-20.14772 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0243 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.34568,23.98308 c 0.0559,-0.0346 0.12219,-0.0425 0.14721,-0.0175 0.025,0.025 -0.0207,0.0709 -0.1017,0.10202 -0.16808,0.0646 -0.19768,0.01 -0.0455,-0.0845 z m 2.68408,-30.47994 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20958,-0.20286 -0.13105,-0.20291 z m 1.0433,43.50477 c 0.0556,-3e-5 0.0745,0.0429 0.0421,0.0954 -0.0324,0.0525 -0.0778,0.0954 -0.10098,0.0955 -0.0231,2e-5 -0.0421,-0.0429 -0.0421,-0.0954 -3e-5,-0.0525 0.0454,-0.0954 0.10098,-0.0955 z m 0.19497,17.56974 c 0.13118,-7e-5 0.18486,0.0216 0.11928,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m 0.12669,-29.47713 c 0.15743,0.002 0.21029,0.0232 0.11747,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16875,-0.0441 z m -0.19756,8.85431 c 0.0198,-1e-5 0.095,0.0751 0.16705,0.16687 0.11876,0.15125 0.11539,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20957,-0.20286 -0.13105,-0.20291 z m 0.59991,-57.31748 c 0.18365,-1e-4 0.2588,0.0195 0.16698,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33392,1.8e-4 -0.0918,-0.0239 -0.0167,-0.0436 0.16694,-0.0437 z m 0.55382,37.95686 c 0.11115,0.005 0.13376,0.0271 0.0577,0.0576 -0.0688,0.0276 -0.15114,0.0242 -0.18286,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.15742,39.98275 c 0.13119,-7e-5 0.18487,0.0216 0.11929,0.0481 -0.0656,0.0265 -0.17291,0.0266 -0.23852,1.3e-4 -0.0656,-0.0264 -0.0119,-0.0481 0.11923,-0.0482 z m 1.13245,-22.31867 c 0.18366,-10e-5 0.2588,0.0195 0.16699,0.0435 -0.0918,0.024 -0.24208,0.0241 -0.33392,1.8e-4 -0.0918,-0.0239 -0.0167,-0.0436 0.16693,-0.0437 z m 0.69931,13.65924 0.21456,-0.18187 -0.18163,0.21477 c -0.0999,0.11812 -0.19644,0.21477 -0.21454,0.21478 -0.0763,4e-5 -0.02,-0.0768 0.18161,-0.24768 z m 0.25706,-9.53173 c 0.105,0.0949 0.19092,0.19405 0.19093,0.22028 2e-5,0.0262 -0.0859,-0.03 -0.19088,-0.12487 -0.105,-0.0949 -0.19092,-0.19404 -0.19094,-0.22028 -1e-5,-0.0262 0.0859,0.03 0.19089,0.12487 z m 0.43826,-15.33087 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 1.05282,6.01003 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.45682,-4.92491 c 0.15742,0.002 0.21028,0.0232 0.11746,0.0474 -0.0928,0.0242 -0.22161,0.0227 -0.28622,-0.003 -0.0646,-0.0261 0.0113,-0.0459 0.16876,-0.0441 z m 0.19062,-14.60836 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0242 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 0.0513,20.71071 c 0.13118,-8e-5 0.18486,0.0215 0.11928,0.048 -0.0656,0.0265 -0.1729,0.0266 -0.23851,1.3e-4 -0.0656,-0.0264 -0.012,-0.0481 0.11923,-0.0482 z m -0.1488,10.76595 c 0.0198,-2e-5 0.095,0.0751 0.16706,0.16686 0.11875,0.15126 0.11538,0.15463 -0.036,0.036 -0.159,-0.12455 -0.20958,-0.20287 -0.13106,-0.20291 z m 0.79435,-50.80439 c 0.105,0.0949 0.19092,0.19404 0.19094,0.22028 1e-5,0.0262 -0.0859,-0.03 -0.19089,-0.12487 -0.105,-0.0949 -0.19092,-0.19405 -0.19093,-0.22028 -2e-5,-0.0262 0.0859,0.0299 0.19088,0.12487 z m -0.0198,35.73727 c 0.11114,0.005 0.13376,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.1252,-0.0502 z m 0.75838,-22.26152 c 0.0265,0.0656 0.0266,0.17291 1.4e-4,0.23852 -0.0264,0.0656 -0.0481,0.012 -0.0482,-0.11923 -7e-5,-0.13119 0.0216,-0.18486 0.0481,-0.11929 z m 0.10487,16.9823 c 0.0265,0.0656 0.0266,0.1729 1.3e-4,0.23851 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11923 -7e-5,-0.13118 0.0215,-0.18486 0.0481,-0.11928 z m 0.009,13.07664 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.1252 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 0.22463,-36.38887 0.21456,-0.18187 -0.18162,0.21477 c -0.17069,0.20183 -0.24744,0.25823 -0.24748,0.18188 -1e-5,-0.0181 0.0965,-0.11475 0.21454,-0.21478 z m 0.32852,18.85919 c 0.11115,0.005 0.13377,0.0271 0.0577,0.0576 -0.0689,0.0276 -0.15115,0.0243 -0.18287,-0.007 -0.0317,-0.0317 0.0246,-0.0543 0.12519,-0.0502 z m 2.09004,19.26341 c 0.0198,-10e-6 0.095,0.0751 0.16706,0.16687 0.11875,0.15125 0.11538,0.15463 -0.036,0.036 -0.15899,-0.12455 -0.20957,-0.20286 -0.13105,-0.20291 z m 2.3204,-3.21995 c 0.022,0.14501 0.0216,0.35968 -10e-4,0.47704 -0.0226,0.11735 -0.0406,-10e-4 -0.04,-0.26366 5.7e-4,-0.26237 0.019,-0.35839 0.041,-0.21338 z m 0.18867,2.05579 c 0.0276,0.0688 0.0243,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 3.42364,-19.75105 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.004,7.63252 c 0.0276,0.0688 0.0242,0.15114 -0.007,0.18286 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11114 0.0271,-0.13376 0.0576,-0.0577 z m 1.71758,0.47607 c 0.0276,0.0689 0.0242,0.15115 -0.007,0.18287 -0.0317,0.0317 -0.0543,-0.0246 -0.0502,-0.12519 0.005,-0.11115 0.0271,-0.13377 0.0576,-0.0577 z m 0.0944,-5.63499 c 0.0228,0.11805 0.0229,0.31125 2.4e-4,0.42933 -0.0227,0.11807 -0.0413,0.0215 -0.0415,-0.21465 -1.3e-4,-0.23613 0.0184,-0.33274 0.0412,-0.21468 z m 0.003,1.81272 c 0.0213,0.17053 0.0214,0.44959 3.5e-4,0.62014 -0.0211,0.17055 -0.0385,0.031 -0.0387,-0.31005 -1.9e-4,-0.34108 0.0171,-0.48062 0.0383,-0.31009 z m 1.51903,-2.95845 c 0.0265,0.0656 0.0266,0.17291 1.3e-4,0.23852 -0.0264,0.0656 -0.0481,0.0119 -0.0482,-0.11923 -7e-5,-0.13119 0.0216,-0.18486 0.0481,-0.11929 z m 0.005,4.15018 c 0.024,0.0918 0.0241,0.24208 1.8e-4,0.33392 -0.0239,0.0919 -0.0436,0.0167 -0.0437,-0.16693 -10e-5,-0.18366 0.0195,-0.2588 0.0435,-0.16699 z"
           id="path33" /><path
           style="fill:#000000;fill-opacity:1"
           d="m 87.535669,242.57287 c 0.572469,-3.05137 3.289134,-7.64775 7.350459,-12.4364 1.456099,-1.71686 5.604942,-5.87568 7.375182,-7.39291 6.26436,-5.36905 11.97982,-9.16907 19.07424,-12.68183 8.5729,-4.24483 17.271,-6.93068 24.5047,-7.56673 1.60475,-0.1411 4.77531,-0.0644 5.6396,0.13651 4.1531,0.96521 7.39836,4.36398 10.11696,10.59552 2.67863,6.13992 4.46631,13.96501 5.20861,22.79924 0.70354,8.37309 0.18037,17.86515 -1.4188,25.74173 -1.37499,6.7724 -3.39375,12.52563 -5.78953,16.4995 -1.63935,2.71918 -3.61767,4.67706 -5.81407,5.754 -1.77658,0.87109 -3.49107,1.16577 -6.21662,1.06849 -4.10848,-0.14664 -8.21314,-0.90676 -13.4808,-2.49643 -11.23325,-3.38996 -22.21471,-9.48269 -31.32216,-17.37814 -5.916203,-5.1289 -10.650737,-10.67904 -13.547556,-15.88136 -1.478822,-2.65578 -2.032465,-4.88364 -1.680215,-6.76119 z m 1.520215,2.39812 c 0.420621,1.99406 2.103019,5.02332 4.742803,8.53972 4.974018,6.62578 12.634853,13.45962 20.654343,18.42467 4.61512,2.85733 10.63404,5.83432 15.26924,7.55224 5.45202,2.02066 10.65767,3.34316 15.50575,3.93924 0.57679,0.0709 1.95305,0.12058 3.24388,0.11705 2.01176,-0.005 2.32043,-0.0279 3.00518,-0.2178 2.5604,-0.71018 4.65487,-2.48566 6.66521,-5.65009 0.63925,-1.00623 2.02245,-3.82239 2.60672,-5.30722 4.13781,-10.51546 5.72637,-24.58075 4.33618,-38.39281 -0.54156,-5.38054 -1.7586,-11.31506 -3.23737,-15.786 -2.59289,-7.83938 -6.00606,-12.62327 -9.88999,-13.86179 -1.02589,-0.32714 -1.78201,-0.41769 -3.43486,-0.41134 -9.90379,0.0381 -24.62353,5.37246 -36.24715,13.13589 -7.69187,5.13742 -14.19931,11.11982 -18.664599,17.15871 -1.165815,1.57665 -2.576749,3.79614 -3.225936,5.07459 -1.342346,2.6435 -1.672839,4.0568 -1.329401,5.68494 z m 1.759047,-2.22395 c 0.218816,-0.79665 0.365112,-1.1552 0.934477,-2.29028 2.853413,-5.68849 8.741962,-12.31421 15.959242,-17.95713 9.95931,-7.7868 22.39691,-13.69779 33.42182,-15.88376 3.13926,-0.62243 4.82592,-0.81159 7.29814,-0.81845 1.99134,-0.006 2.19842,0.0102 2.86231,0.21707 2.52373,0.78649 4.45766,2.80904 6.47814,6.77501 3.08665,6.05871 5.06851,14.31492 5.8646,24.43112 0.16477,2.09382 0.17051,10.76835 0.008,12.78446 -0.59309,7.37885 -1.46953,12.40149 -3.1052,17.79503 -0.7615,2.51103 -1.54966,4.52356 -2.61601,6.67991 -1.87349,3.78851 -3.40866,5.64631 -5.491,6.64498 -1.22161,0.58587 -1.6764,0.67052 -3.62507,0.67472 -8.76845,0.0189 -21.49925,-4.15798 -32.20556,-10.56639 -7.44392,-4.45565 -14.3226,-10.19159 -19.520697,-16.27775 -2.100277,-2.4591 -4.276276,-5.64255 -5.432927,-7.94829 -0.941173,-1.87619 -1.167194,-3.03529 -0.830735,-4.26025 z m 6.02424,1.95498 c 0.211112,1.71255 0.677287,2.9959 1.584241,4.36129 1.070341,1.61137 2.883168,3.10547 4.543588,3.74473 0.90412,0.34809 2.24775,0.71731 2.32584,0.63914 0.082,-0.0821 -0.0345,-0.37087 -0.25731,-0.63758 -0.15701,-0.18797 -0.21097,-0.20726 -0.27765,-0.0992 -0.13078,0.21187 -1.30495,-0.10973 -2.4338,-0.66659 -1.53801,-0.75871 -3.292857,-2.42607 -3.941029,-3.74457 -1.296761,-2.63784 -1.407133,-5.95683 -0.279381,-8.40127 1.053766,-2.28408 3.21609,-4.27735 5.34323,-4.92548 0.66384,-0.20227 1.30165,-0.26248 1.30172,-0.12288 9e-5,0.15207 -0.55376,0.93698 -1.05819,1.49965 -1.35352,1.50982 -1.64366,2.01509 -1.64319,2.86152 4.1e-4,0.74375 0.24344,1.21401 0.9601,1.8578 0.6148,0.5523 2.26169,1.66771 3.38744,2.29425 0.4044,0.22508 0.71563,0.44105 0.69163,0.47994 -0.024,0.0389 -0.33321,0.22918 -0.68711,0.42287 -1.34573,0.73652 -3.02461,1.83108 -3.47472,2.2654 -0.58253,0.56208 -0.85875,1.16274 -0.86512,1.88127 -0.007,0.84421 0.31544,1.42756 1.47131,2.65795 0.54342,0.57845 1.00496,1.0348 1.02563,1.0141 0.0207,-0.0207 -0.19916,-0.4358 -0.48854,-0.92244 -0.91536,-1.5394 -1.08868,-2.04063 -0.97313,-2.81415 0.18256,-1.22205 2.20739,-2.96769 4.83144,-4.16527 0.40652,-0.18553 0.73911,-0.37302 0.73908,-0.41663 -2e-5,-0.0436 -0.41875,-0.28666 -0.93051,-0.54008 -1.09008,-0.53982 -2.27165,-1.29176 -3.17346,-2.01956 -0.9981,-0.80551 -1.43262,-1.54804 -1.43146,-2.44616 8.1e-4,-0.62504 0.17082,-0.99392 1.36931,-2.97109 0.50436,-0.83205 0.91701,-1.52912 0.917,-1.54904 -3e-5,-0.0575 -0.84243,0.055 -1.61141,0.21518 -2.48197,0.51701 -4.665569,2.25615 -5.914008,4.71028 -0.622256,1.2232 -0.860055,1.99342 -1.090054,3.53064 -0.07256,0.48498 -0.05846,1.21935 0.03851,2.00602 z m 7.970839,5.60125 c 0.23604,0.56414 1.15806,1.69769 1.84531,2.26867 0.75436,0.62674 1.53838,1.03632 2.27608,1.18904 0.68384,0.14156 3.59813,0.0846 3.75598,-0.0734 0.0812,-0.0813 0.0326,-0.2414 -0.19305,-0.6353 -0.16591,-0.28961 -0.40749,-0.83715 -0.53684,-1.21675 -0.12934,-0.3796 -0.32107,-0.77012 -0.42606,-0.86782 -0.15542,-0.14463 -0.19208,-0.30547 -0.19731,-0.86561 -0.005,-0.56315 -0.024,-0.64469 -0.10346,-0.44941 -0.0547,0.13445 -0.0702,0.48157 -0.0355,0.79535 0.056,0.50722 0.0461,0.55229 -0.11118,0.50638 -0.095,-0.0277 -0.38734,-0.0778 -0.64973,-0.11129 -0.85565,-0.10922 -0.81104,-0.0552 -0.81096,-0.98131 1.4e-4,-1.65237 0.35487,-2.1333 1.9969,-2.70736 0.36157,-0.1264 0.91221,-0.203 1.73816,-0.24179 l 1.20893,-0.0568 0.10633,0.41949 c 0.55379,2.18474 1.16397,3.2564 2.27275,3.99163 0.22331,0.14808 0.97483,0.49293 1.67004,0.76634 0.69522,0.27341 1.52036,0.63191 1.83366,0.79666 l 0.56962,0.29955 -0.47402,0.0635 c -0.85405,0.11434 -3.49781,0.0804 -4.25749,-0.0546 -1.00861,-0.1793 -1.21483,-0.30002 -1.6694,-0.97724 -0.31803,-0.47381 -0.44594,-0.80265 -0.64927,-1.66921 -0.42502,-1.81132 -0.54118,-1.9599 -1.44855,-1.85274 -0.63974,0.0755 -1.04384,0.26938 -1.11283,0.53377 -0.0466,0.17867 -0.0249,0.17384 0.24662,-0.0549 0.26184,-0.22057 0.35481,-0.24409 0.77109,-0.19502 0.26034,0.0307 0.50994,0.0924 0.55467,0.13703 0.0447,0.0447 0.18701,0.47525 0.31618,0.95682 0.29715,1.10792 0.50481,1.51768 1.20381,2.37542 0.30923,0.37944 0.56226,0.75496 0.56231,0.83449 1.9e-4,0.35682 0.33259,0.502 1.30107,0.56824 1.64817,0.11273 5.08497,-0.17539 5.93651,-0.49769 l 0.22513,-0.0852 -0.23445,-0.15344 c -0.341,-0.22315 -0.78209,-0.40067 -2.67327,-1.07582 -1.97688,-0.70575 -2.54551,-0.99328 -3.00446,-1.51921 -0.4975,-0.57011 -0.98922,-1.67029 -1.32292,-2.95991 l -0.2962,-1.14471 -1.27944,0.0293 c -3.03659,0.0696 -5.51359,0.56423 -7.19386,1.43654 -0.73994,0.38414 -1.72263,1.28885 -1.79003,1.64799 -0.0771,0.41093 -0.0714,0.47045 0.0792,0.83039 z m 0.76361,-1.3975 c 0.27078,-0.3015 0.65822,-0.59337 1.02519,-0.77228 0.63438,-0.30928 3.11707,-1.00268 3.97639,-1.11058 l 0.5247,-0.0659 -0.61607,0.32347 c -0.42063,0.22086 -0.70802,0.45443 -0.90595,0.73629 -0.28089,0.40001 -0.2909,0.45102 -0.32262,1.64436 -0.0259,0.97413 -0.006,1.23908 0.0961,1.26759 0.0709,0.0198 0.54745,0.1312 1.05909,0.2475 l 0.93025,0.21144 0.14996,0.53961 c 0.0825,0.29679 0.19024,0.66462 0.23948,0.8174 0.0492,0.15278 0.0786,0.28876 0.0652,0.30217 -0.0797,0.0798 -3.25101,-0.16259 -3.62499,-0.27702 -0.96837,-0.2963 -1.89803,-1.06437 -2.65641,-2.19468 -0.51255,-0.76391 -0.50256,-1.04332 0.0597,-1.66939 z m -0.63907,-10.42572 c 0.80614,1.578 4.45963,2.68665 8.82622,2.67832 l 1.24756,-0.002 0.30364,-1.249 c 0.36326,-1.49421 0.81754,-2.50022 1.38602,-3.06934 0.45295,-0.45345 0.71528,-0.56753 3.91212,-1.7013 0.93122,-0.33026 1.69311,-0.63045 1.69309,-0.66708 -5e-5,-0.0906 -0.43789,-0.16558 -1.6201,-0.27756 -1.46244,-0.13852 -4.69391,-0.22195 -4.91844,-0.12698 -0.10655,0.0451 -0.5205,0.43339 -0.91987,0.86294 -0.83885,0.90222 -1.28683,1.71964 -1.60594,2.93033 l -0.21663,0.8219 -0.45637,2.5e-4 c -0.25101,1.4e-4 -0.5686,-0.0423 -0.70577,-0.0944 -0.34826,-0.13219 -0.54973,-0.6616 -0.51092,-1.34254 0.0357,-0.62563 -0.0708,-0.66713 -0.16092,-0.0627 -0.0865,0.58019 0.20325,1.41162 0.54911,1.57573 0.33176,0.15741 1.12951,0.25301 1.44629,0.17332 0.31572,-0.0794 0.3771,-0.2061 0.7284,-1.50317 0.62594,-2.31113 1.38369,-2.94805 3.50359,-2.94491 0.95074,10e-4 2.13501,0.13277 2.36729,0.2626 0.0844,0.0472 -0.36395,0.28795 -1.27416,0.68437 -1.29272,0.56301 -1.4536,0.66153 -2.02413,1.23958 -0.76501,0.7751 -1.1183,1.43312 -1.58572,2.95347 l -0.3632,1.18136 -0.78378,-0.0598 c -2.17321,-0.16583 -3.80632,-0.83485 -4.03388,-1.6525 -0.14424,-0.5183 -0.13241,-2.0779 0.0167,-2.20147 0.12147,-0.10067 1.23032,-0.33982 1.5175,-0.32729 0.21093,0.009 0.39745,-0.2232 0.59667,-0.74341 0.0904,-0.23618 0.34039,-0.70148 0.55542,-1.03398 0.3197,-0.49437 0.36621,-0.62092 0.2552,-0.6943 -0.0774,-0.0512 -0.95619,-0.0767 -2.04387,-0.0594 -1.73603,0.0276 -1.95857,0.0505 -2.46756,0.25331 -1.07445,0.4282 -2.59993,1.88042 -3.16221,3.01035 -0.28379,0.57028 -0.29019,0.71816 -0.0513,1.18569 z m 0.29924,-1.00543 c 0.10842,-0.21933 0.54881,-0.7368 0.97866,-1.14993 1.23001,-1.18217 1.96848,-1.45619 3.92665,-1.45701 1.75941,-7.4e-4 1.6959,-0.0368 1.32192,0.74953 l -0.30717,0.64583 -0.69773,0.11751 c -1.35252,0.2278 -1.19647,0.093 -1.27129,1.09841 -0.0878,1.17945 0.0491,1.84009 0.45968,2.21819 0.47217,0.43486 0.5944,0.51295 1.18696,0.75831 l 0.55115,0.22821 -0.57247,-0.0586 c -1.77245,-0.18147 -3.72505,-0.74013 -4.54445,-1.3002 -0.49415,-0.33776 -1.22921,-1.16927 -1.22906,-1.39033 2e-5,-0.0336 0.0887,-0.24059 0.19715,-0.45991 z m 1.74621,8.85171 c 0.7326,-0.45334 2.87293,-0.99969 4.8821,-1.24624 1.8212,-0.22347 5.83162,-0.39244 9.52525,-0.40131 2.10728,-0.005 4.02461,-0.0401 4.26072,-0.0779 l 0.42929,-0.0687 -0.33398,-0.11296 c -0.52172,-0.17644 -1.64902,-0.39629 -3.04058,-0.59298 -0.70143,-0.0991 -1.29088,-0.19579 -1.3099,-0.21479 -0.019,-0.019 0.36159,-0.0902 0.84581,-0.15815 0.97328,-0.13666 3.29191,-0.69507 3.56685,-0.85903 0.12786,-0.0762 -0.54713,-0.0849 -2.49608,-0.0319 -7.75538,0.21088 -11.55549,0.0138 -14.94649,-0.77532 -0.89269,-0.20773 -0.53818,-0.0167 0.58756,0.31659 1.23049,0.36432 2.65496,0.69757 4.10301,0.9599 1.93029,0.3497 3.83135,0.79806 3.69878,0.87235 -0.0698,0.0391 -0.87672,0.18468 -1.79317,0.32351 -3.47571,0.5265 -5.2189,0.82495 -5.89229,1.00881 -0.69575,0.18996 -1.64657,0.62099 -2.14142,0.97075 -0.36771,0.25991 -0.32775,0.32391 0.0545,0.0874 z m 1.06211,-4.06417 c 0.78324,0.48757 1.51445,0.80268 2.81733,1.21409 l 0.90652,0.28626 -0.42922,0.18397 c -1.60669,0.68862 -2.21496,0.97766 -2.1223,1.00849 0.0585,0.0195 0.22735,-0.0271 0.37516,-0.10352 0.36422,-0.18827 1.71687,-0.58587 2.67741,-0.78701 0.43286,-0.0906 0.787,-0.20022 0.78697,-0.2435 -2e-5,-0.0433 -0.569,-0.25403 -1.26439,-0.46833 -1.86126,-0.57358 -2.29721,-0.73535 -3.49702,-1.29761 -0.59815,-0.28032 -1.108,-0.50966 -1.13299,-0.50964 -0.14018,7e-5 0.28197,0.34295 0.88253,0.7168 z m 3.63388,14.0144 c 0.31234,0.0584 2.11534,0.88379 4.30739,1.97184 2.63903,1.30991 4.5845,2.97069 8.13941,6.94831 1.73913,1.94594 2.59267,3.02105 4.12343,5.19382 1.88094,2.66983 4.57275,4.96297 7.41019,6.31271 2.45513,1.16787 3.8939,1.62481 5.9806,1.89938 1.38036,0.18162 3.7526,0.13184 5.04433,-0.10587 5.33138,-0.98107 10.04431,-4.63738 11.52566,-8.94166 0.21139,-0.61424 0.21264,-0.63882 0.0454,-0.8938 l -0.17201,-0.26219 -0.42406,0.48531 c -0.44859,0.51339 -0.82698,0.68726 -1.33423,0.6131 l -0.29337,-0.0429 -0.0487,0.61097 c -0.0783,0.98287 -0.33657,1.4275 -1.48688,2.56018 -1.69167,1.66574 -3.61689,2.80184 -6.12069,3.6119 -1.11631,0.36116 -2.26487,0.6818 -2.44265,0.6819 -0.0429,2e-5 0.44722,-0.26858 1.08919,-0.5969 2.21533,-1.13298 3.98291,-2.63302 5.50999,-4.67603 0.81822,-1.09466 1.72395,-2.60964 2.03938,-3.41121 l 0.19316,-0.49085 -0.28065,-0.3998 c -0.15436,-0.21989 -0.45048,-0.58217 -0.65806,-0.80506 -0.33951,-0.36458 -0.42192,-0.40525 -0.82082,-0.40502 -0.72757,4e-4 -1.01252,0.18541 -1.80521,1.17211 -1.45897,1.81602 -3.60804,3.65638 -5.73835,4.91405 -0.64003,0.37786 -1.03953,0.6679 -0.97164,0.70543 0.0634,0.0351 0.81293,0.13916 1.6656,0.23133 0.85267,0.0922 1.53469,0.18323 1.5156,0.20234 -0.0191,0.0191 -0.65063,0.16183 -1.40343,0.31715 -3.23239,0.6669 -6.21347,0.74328 -9.18214,0.23523 -2.43717,-0.41709 -5.09969,-1.80751 -7.28264,-3.80313 -1.61131,-1.47304 -3.93922,-4.0929 -5.83391,-6.56556 -1.34415,-1.75418 -2.3318,-2.66551 -4.12524,-3.80646 -0.39155,-0.24909 -0.68184,-0.45291 -0.64511,-0.45293 0.0514,-3e-5 2.10141,0.78589 2.92127,1.11995 0.19004,0.0774 -0.79686,-1.15982 -1.43725,-1.80185 -0.97556,-0.97806 -2.66989,-1.60478 -5.75909,-2.13028 -0.73527,-0.12507 -1.74426,-0.25359 -2.24221,-0.28559 -0.49796,-0.032 -1.00198,-0.0778 -1.12006,-0.10176 -0.11808,-0.0239 -0.21467,-0.005 -0.21464,0.043 3e-5,0.0476 0.14964,0.11458 0.33247,0.14878 z m 2.65888,-25.19937 c 1.03642,-0.0631 2.20373,-0.40731 3.54861,-1.04643 1.38561,-0.65848 2.83165,-2.04251 5.17656,-4.95461 2.34193,-2.9084 3.58499,-4.32033 5.37872,-6.10941 2.49651,-2.49005 3.74581,-3.3512 6.01782,-4.14814 2.54849,-0.89392 6.47995,-1.28334 9.73733,-0.96451 1.21219,0.11865 4.45425,0.56486 4.51019,0.62074 0.0418,0.0418 0.0595,0.0373 -1.51073,0.38015 -1.52313,0.33256 -2.28946,0.54337 -2.28941,0.62983 3e-5,0.0404 0.35435,0.26687 0.78739,0.50319 2.10355,1.14795 3.95692,2.74213 5.30994,4.56737 0.37909,0.51141 0.71935,0.93146 0.75612,0.93345 0.0368,0.002 0.46507,0.0206 0.95175,0.0414 l 0.88489,0.0378 0.37281,-0.47218 c 0.20504,-0.25969 0.39889,-0.55453 0.43078,-0.65518 0.13041,-0.41168 -1.16533,-2.73548 -2.33562,-4.18873 -1.46685,-1.82153 -3.13448,-3.15918 -5.53819,-4.44235 -0.55114,-0.29421 -0.89473,-0.5132 -0.76353,-0.48664 2.0732,0.41961 3.52851,0.89752 4.96205,1.62949 1.61035,0.82225 2.44628,1.41887 3.5862,2.55955 1.28015,1.281 1.57229,1.74177 1.64067,2.58777 l 0.0498,0.61632 0.37483,-2.1e-4 c 0.46438,-2.6e-4 0.68423,0.10933 1.18528,0.59086 l 0.39354,0.3782 0.21255,-0.29886 c 0.28549,-0.4014 0.22379,-0.67645 -0.45443,-2.02579 -1.52943,-3.04287 -3.60465,-4.86278 -7.49334,-6.57145 -2.54889,-1.11996 -6.25533,-1.64869 -8.99675,-1.2834 -2.89682,0.38599 -5.34833,1.32293 -7.8626,3.005 -2.58845,1.73169 -3.88923,3.01976 -7.00616,6.9377 -2.39697,3.01296 -3.39046,4.1679 -4.69655,5.4598 -1.81171,1.79201 -3.18919,2.88487 -5.03618,3.99556 -0.83171,0.50015 -1.53233,0.83525 -4.00182,1.91406 l -0.38153,0.16668 0.57248,0.0755 c 0.31486,0.0416 1.0018,0.0494 1.52651,0.0175 z m 3.91727,10.06296 c 0.36733,0.0165 0.88738,0.003 1.15567,-0.0297 l 0.48781,-0.0597 0.0594,-0.57089 c 0.11887,-1.1435 0.76266,-2.05235 1.84161,-2.59985 0.76732,-0.38937 2.35225,-0.90895 4.13515,-1.3556 2.23309,-0.55942 3.73977,-1.02369 5.00104,-1.541 1.35464,-0.55561 2.08881,-0.972 3.20011,-1.81494 0.89882,-0.68177 2.61275,-2.32512 2.42487,-2.32502 -0.0538,3e-5 -0.525,0.28414 -1.04701,0.63135 -0.52202,0.34721 -1.27103,0.79307 -1.66447,0.99082 -1.66901,0.83883 -4.67417,1.8562 -7.05875,2.38968 -2.89156,0.6469 -3.52586,0.80565 -4.48348,1.12211 -2.4477,0.80888 -3.73103,1.67699 -4.37673,2.96063 -0.27587,0.54845 -0.37944,1.02284 -0.35965,1.64745 l 0.0166,0.52472 z m -0.47444,6.88785 c 0.68696,1.96388 2.97561,3.20465 7.82694,4.24331 4.44324,0.9513 7.06454,1.91239 10.20804,3.74278 0.36604,0.21313 0.68812,0.36443 0.71573,0.33622 0.0276,-0.0282 -0.35969,-0.44416 -0.86069,-0.92432 -2.35034,-2.25259 -4.85813,-3.49164 -8.88857,-4.39168 -3.11228,-0.695 -4.93983,-1.35208 -5.75919,-2.07068 -0.5143,-0.45106 -0.87963,-1.16097 -1.00914,-1.96096 l -0.11237,-0.69408 -0.93476,5.2e-4 c -0.51412,2.8e-4 -1.05086,0.0447 -1.19275,0.0988 -0.24937,0.095 -0.25606,0.11649 -0.20052,0.64502 0.0316,0.30072 0.12488,0.73952 0.20728,0.9751 z m 1.97899,-17.89682 c 0.11363,-0.0339 0.95777,-0.34082 1.87587,-0.68201 0.9181,-0.34118 2.29168,-0.83703 3.05239,-1.10188 0.76072,-0.26486 1.39227,-0.48844 1.40344,-0.49685 0.0112,-0.008 -0.0267,-0.29784 -0.0841,-0.64316 -0.0862,-0.51842 -0.0765,-0.75046 0.0555,-1.3313 0.088,-0.38689 0.2163,-0.83228 0.2852,-0.98974 0.11238,-0.25684 0.1204,-0.20183 0.0781,0.53496 -0.0332,0.57724 0.001,1.03785 0.11542,1.55029 0.14561,0.65277 0.18582,0.72903 0.38432,0.72892 0.40951,-2.2e-4 2.19387,-0.39452 2.60331,-0.57525 l 0.40538,-0.17894 -0.001,-1.91156 c -7.7e-4,-1.38152 0.0416,-2.12392 0.15281,-2.67742 0.12306,-0.61251 0.13017,-0.79439 0.0355,-0.90832 -0.28326,-0.34092 -0.76809,-0.0723 -1.79716,0.99567 -0.36579,0.37963 -0.53895,0.51489 -0.43765,0.34186 0.4427,-0.75621 1.30146,-1.76194 2.30151,-2.69539 1.00841,-0.94126 2.01176,-2.08049 1.91631,-2.17584 -0.0647,-0.0647 -1.03612,0.61954 -1.68683,1.18811 -0.66094,0.57751 -2.12397,2.31783 -3.53788,4.20841 -2.23281,2.98556 -3.7937,4.48395 -6.12135,5.87625 -0.59334,0.35491 -1.13197,0.68639 -1.19695,0.73663 -0.17554,0.13569 -0.0397,0.27748 0.1979,0.20656 z m 1.79663,28.35591 c 1.79662,1.32322 3.57632,3.23882 5.34582,5.75401 1.7398,2.47297 3.20822,4.28587 4.06083,5.01345 0.28959,0.24713 0.5445,0.43133 0.56646,0.40933 0.11124,-0.11136 -0.82078,-1.45819 -1.50899,-2.18057 -0.43054,-0.45192 -0.94831,-1.05523 -1.1506,-1.34069 l -0.36781,-0.51901 0.41717,0.3941 c 1.05428,0.99599 1.27678,0.82632 1.08388,-0.82653 -0.0703,-0.60216 -0.1592,-1.7086 -0.1976,-2.45875 l -0.0698,-1.36391 -0.29654,-0.14198 c -0.62831,-0.30082 -0.84643,-0.44825 -0.88589,-0.5988 -0.0238,-0.0907 -0.3609,-0.28293 -0.80446,-0.45875 l -0.76354,-0.30267 -0.0923,0.24311 c -0.14663,0.38631 -0.27355,1.43495 -0.28646,2.36682 l -0.0119,0.85866 -0.19136,-0.71544 c -0.13755,-0.51423 -0.1928,-1.0289 -0.19647,-1.82997 l -0.005,-1.11452 -1.09962,-0.35477 c -0.60479,-0.19513 -1.5964,-0.59851 -2.20358,-0.89641 -1.37635,-0.67527 -2.31033,-1.05004 -2.59931,-1.04299 l -0.22224,0.005 0.23862,0.18137 c 0.13124,0.0997 0.6896,0.51352 1.24079,0.91948 z m 3.71482,-10.8391 c 0.44609,0.11818 1.75578,0.54711 2.91043,0.95317 2.3773,0.83604 3.79923,1.23073 4.43277,1.23041 l 0.43364,-2.1e-4 -6.4e-4,-1.1514 -6.4e-4,-1.1514 -0.23849,0.0522 c -1.27032,0.27799 -2.94353,0.298 -4.81799,0.0576 -0.97175,-0.12461 -3.35972,-0.37837 -3.55952,-0.37826 -0.33055,1.8e-4 0.0635,0.18203 0.84044,0.38786 z m -0.31429,-7.57854 c 2.57937,-0.49365 6.0824,-0.68235 7.51303,-0.40472 0.36736,0.0713 0.67749,0.1208 0.68918,0.11001 0.0117,-0.0108 -0.0258,-0.18891 -0.0833,-0.39582 -0.0587,-0.21122 -0.0834,-0.72141 -0.0563,-1.16334 l 0.0482,-0.78713 -0.36089,2e-4 c -0.19848,1.1e-4 -0.85662,0.1257 -1.46253,0.27908 -1.26141,0.31932 -6.54985,2.19782 -6.54978,2.32654 3e-5,0.047 0.1181,0.0628 0.26239,0.0352 z m 4.13818,19.76896 c 0.80929,0.36133 0.89215,0.36577 1.03335,0.0554 0.14779,-0.32484 0.15351,-0.31429 -0.19956,-0.36814 -0.77517,-0.11824 -1.50274,-0.15371 -1.50269,-0.0733 2e-5,0.048 0.30103,0.22175 0.6689,0.38599 z m 0.64939,-31.6365 c 0.36387,-0.0532 0.52467,-0.11972 0.52461,-0.21715 -1.2e-4,-0.22296 -0.27037,-0.2185 -1.01958,0.0168 -0.63945,0.20084 -0.66977,0.22151 -0.36367,0.24805 0.18367,0.0159 0.57006,-0.006 0.85864,-0.0477 z m 0.64179,-2.3588 c 0.11025,0.21261 0.31329,0.4379 0.45118,0.50063 0.26607,0.12105 1.79604,0.14542 2.07946,0.0331 0.15118,-0.0599 0.17125,-0.25871 0.1992,-1.97309 0.022,-1.34931 0.0825,-2.1714 0.207,-2.81294 0.0967,-0.49855 0.17804,-1.05456 0.18064,-1.23557 0.004,-0.30024 -0.0243,-0.33511 -0.3268,-0.39762 -0.21244,-0.0439 -0.4441,-0.0214 -0.64493,0.0626 -0.3085,0.1291 -0.31167,0.12787 -0.20264,-0.0791 0.57358,-1.08898 1.42636,-1.99005 2.43982,-2.57799 0.4076,-0.23646 0.86712,-0.56297 1.02115,-0.72558 0.26334,-0.27801 0.26789,-0.29564 0.0763,-0.29553 -0.38458,2.1e-4 -1.70146,0.47423 -2.15731,0.77654 -0.74064,0.49117 -1.98718,2.042 -2.56043,3.18545 -0.90713,1.80941 -1.2826,4.53642 -0.76265,5.53905 z m 0.0841,39.58689 c 0.75116,2.86446 2.11936,5.1659 3.48463,5.86145 0.41944,0.21368 2.29711,0.7086 2.37865,0.62697 0.0299,-0.03 -0.15005,-0.26184 -0.39996,-0.51528 -0.3493,-0.35423 -0.57972,-0.49569 -0.99636,-0.6117 -1.09734,-0.30553 -2.11231,-1.27282 -2.87824,-2.74303 -0.21157,-0.40612 -0.38469,-0.75865 -0.3847,-0.78341 -2e-5,-0.0248 0.16101,0.0319 0.35784,0.126 0.58651,0.28028 1.09683,0.32252 1.3562,0.11225 l 0.22193,-0.17991 -0.17332,-1.08971 c -0.0953,-0.59934 -0.19886,-1.81893 -0.23008,-2.7102 l -0.0568,-1.62049 -0.38166,-0.0672 c -0.20992,-0.037 -0.63926,-0.0705 -0.95411,-0.0745 -0.35291,-0.004 -0.73275,-0.0799 -0.99046,-0.19666 -0.41463,-0.18785 -0.41759,-0.19265 -0.36444,-0.59065 0.0836,-0.62595 0.21141,-0.67499 1.57374,-0.60397 0.64553,0.0337 1.22515,0.0802 1.28804,0.10342 0.0629,0.0232 0.21073,-0.10707 0.32855,-0.28955 l 0.21421,-0.33176 -0.21442,-0.044 c -0.11793,-0.0242 -0.80308,-0.062 -1.52256,-0.0841 -1.43433,-0.0439 -1.44924,-0.039 -1.68244,0.55582 -0.23257,0.59325 -0.29003,1.18938 -0.25749,2.67153 0.0278,1.26786 0.0758,1.68781 0.28321,2.47871 z m 0.22613,-37.63628 c 0.0738,0.11645 0.34869,0.14292 1.47734,0.14229 0.76264,-4.3e-4 1.38664,-0.0322 1.38666,-0.0705 6e-5,-0.11078 -0.35694,-0.1585 -1.43113,-0.1913 -0.77386,-0.0236 -1.06149,-0.0703 -1.26425,-0.205 -0.25492,-0.1694 -0.26242,-0.16929 -0.2609,0.004 8.6e-4,0.0979 0.0424,0.24231 0.0923,0.32099 z m 2.92583,-1.03064 c 0.22334,0.75182 0.481,1.19928 0.77927,1.35331 0.14666,0.0757 0.62931,0.2059 1.07255,0.28924 0.6799,0.12786 1.73825,0.38618 2.4042,0.58683 0.0918,0.0277 0.16696,0.002 0.16693,-0.0577 -1.3e-4,-0.23239 -2.08382,-1.05166 -3.27468,-1.28755 -0.19167,-0.038 -0.30795,-0.14706 -0.40569,-0.38061 -0.16977,-0.40569 -0.17972,-0.90532 -0.0181,-0.90773 0.0656,-9.8e-4 0.72221,0.0699 1.45916,0.15759 0.73695,0.0876 1.45456,0.13053 1.59469,0.0953 0.30598,-0.077 0.32781,-0.15327 0.6794,-2.37482 0.23066,-1.45738 0.34491,-1.96702 0.87511,-3.90375 0.21287,-0.77754 0.12988,-0.93989 -0.48027,-0.93955 -0.82565,4.6e-4 -1.64815,0.35573 -2.52454,1.09045 -0.48097,0.40322 -0.57718,0.35317 -0.57991,-0.30162 -0.002,-0.42018 -0.0689,-0.49007 -0.27476,-0.28606 -0.17327,0.17169 0.006,-0.27992 0.4361,-1.09992 0.44998,-0.85747 1.05697,-1.52212 1.66898,-1.82753 0.44001,-0.21957 0.60784,-0.24651 1.5481,-0.24855 0.58003,-10e-4 1.43377,-0.0424 1.89721,-0.0914 0.83853,-0.0887 1.78082,-0.33801 1.78075,-0.47117 -6e-5,-0.0995 -1.53047,-0.47175 -2.4332,-0.59176 -1.58955,-0.21133 -2.63092,0.12399 -3.63551,1.17062 -0.69542,0.72451 -1.02297,1.20073 -1.55306,2.258 -0.69144,1.37908 -1.16741,3.02827 -1.34124,4.64732 -0.10656,0.99248 -0.0308,2.4838 0.15848,3.12108 z m 0.19286,39.17844 c 0.60915,2.44261 2.38278,5.17887 3.80735,5.87377 0.96847,0.47241 1.84331,0.51496 3.64173,0.17709 1.04542,-0.1964 1.09104,-0.23438 0.63981,-0.53264 -0.59747,-0.3949 -1.08457,-0.48302 -2.5844,-0.46752 -1.32266,0.0137 -1.38992,0.005 -1.84524,-0.24267 -0.60678,-0.32981 -1.2183,-1.00259 -1.92829,-2.12144 -0.6327,-0.99706 -1.00416,-1.82055 -1.00779,-2.23419 l -0.002,-0.27579 0.31029,0.39135 c 0.53461,0.67427 1.33681,1.13571 2.50522,1.44104 1.38354,0.36156 1.74966,-0.22685 1.20232,-1.93226 -0.36407,-1.13437 -0.55096,-2.1739 -0.63882,-3.55315 l -0.0671,-1.05428 -1.07212,0.0225 c -0.93094,0.0196 -1.16846,0.06 -1.80381,0.30712 -0.61035,0.23739 -0.72489,0.25836 -0.69065,0.1264 0.0226,-0.087 0.0938,-0.36133 0.1583,-0.60962 0.0645,-0.24829 0.16554,-0.48968 0.22457,-0.53643 0.059,-0.0467 0.44013,-0.15806 0.84689,-0.24736 1.09249,-0.23987 2.93272,-1.23183 2.70576,-1.45853 -0.0225,-0.0225 -0.32522,0.0471 -0.67273,0.1547 -0.34751,0.10754 -1.12491,0.28771 -1.72756,0.40037 -0.66998,0.12525 -1.18464,0.27486 -1.32456,0.38504 -0.28893,0.22753 -0.63339,0.93093 -0.78886,1.61088 -0.16462,0.71993 -0.0919,3.55739 0.11216,4.37558 z m 0.58523,-25.74702 c 0.16209,0.39346 0.37153,0.88707 0.46541,1.09691 l 0.17068,0.38153 0.0737,-0.71558 c 0.10004,-0.97094 0.22546,-1.44725 0.603,-2.2901 0.55583,-1.24086 0.58187,-1.46747 0.28682,-2.49622 -0.1405,-0.4899 -0.29041,-0.92674 -0.33312,-0.97075 -0.0765,-0.0789 -0.94,0.88655 -1.16249,1.29973 -0.55323,1.02736 -0.59479,2.50326 -0.10403,3.69448 z m -0.0431,10.25622 c 0.13582,0.26229 0.48073,0.73303 0.76648,1.0461 l 0.51954,0.5692 0.30055,-0.90382 c 0.1653,-0.4971 0.3005,-0.9868 0.30045,-1.08822 -6e-5,-0.10143 -0.17111,-0.68082 -0.3801,-1.28754 -0.46011,-1.3357 -0.61667,-2.35181 -0.52822,-3.42818 0.0734,-0.89283 -0.0441,-0.98819 -0.2743,-0.22275 -0.0743,0.24704 -0.2503,0.74976 -0.39111,1.11715 -0.48541,1.26649 -0.62412,1.93834 -0.59099,2.86252 0.025,0.69858 0.0768,0.94754 0.2777,1.33554 z m 2.07459,2.3249 c 0.22061,0.14563 0.23007,0.14448 0.16695,-0.0204 -0.0368,-0.0961 -0.067,-0.32148 -0.0671,-0.50084 -2.1e-4,-0.37485 -0.11475,-0.42271 -0.26641,-0.11131 -0.14558,0.29894 -0.10493,0.45329 0.16655,0.6325 z m 0.0999,-17.39453 c 0.0473,0.0292 0.0879,0.0184 0.0901,-0.0241 0.002,-0.0425 0.0393,-0.25967 0.0823,-0.4827 0.0848,-0.43996 8.4e-4,-0.51459 -0.28636,-0.25439 -0.13566,0.12292 -0.14859,0.20288 -0.0694,0.42955 0.0535,0.15318 0.13598,0.30241 0.18331,0.33162 z m 0.87757,-1.04978 c 0.21735,0.0833 0.82006,-0.23581 0.95904,-0.50773 0.59171,-1.15765 0.91038,-2.90188 0.58018,-3.17562 -0.20937,-0.17356 -0.28359,-0.0556 -0.51746,0.82244 -0.11298,0.42416 -0.4137,1.17566 -0.66827,1.66999 -0.5002,0.9713 -0.54375,1.11803 -0.35349,1.19092 z m 0.47412,19.50437 c 0.13436,0.28853 0.31503,0.94599 0.40148,1.46102 0.17159,1.02219 0.27957,1.30539 0.49765,1.30527 0.24959,-1.4e-4 0.2641,-0.28137 0.0548,-1.06177 -0.25095,-0.9355 -0.5823,-1.64746 -0.9709,-2.08613 -0.32899,-0.37137 -0.32849,-0.36032 0.017,0.38161 z m 0.50776,-25.27162 c 0.19936,0.66997 0.53266,0.98233 1.4158,1.3269 0.7077,0.27612 0.76779,0.28515 0.87953,0.13217 0.16564,-0.2268 0.11996,-0.26878 -0.56292,-0.51714 -0.32964,-0.11989 -0.69228,-0.2787 -0.80587,-0.35291 -0.40203,-0.26268 -0.54435,-0.78728 -0.51941,-1.91466 0.009,-0.3995 0.0133,-0.40491 0.22376,-0.26955 0.38022,0.24458 0.88336,0.27983 1.44914,0.10152 0.48013,-0.15131 0.54656,-0.2076 0.76635,-0.64927 0.13236,-0.26597 0.24062,-0.54025 0.24058,-0.6095 -1.6e-4,-0.29359 0.92622,-2.65093 1.48775,-3.78583 0.65696,-1.32779 0.74687,-1.77472 0.43453,-2.16001 l -0.17347,-0.21398 -0.93466,0.39994 c -1.80083,0.77059 -2.15508,0.34964 -1.00513,-1.19438 0.41892,-0.56248 1.15427,-1.08786 1.52289,-1.08806 0.1457,-8e-5 0.43885,0.14354 0.68679,0.33649 0.31053,0.24165 0.58586,0.36149 0.97586,0.42474 0.2988,0.0485 0.6888,0.14064 0.86665,0.20484 0.33349,0.12038 0.80977,0.006 0.80966,-0.1937 -7e-5,-0.1283 -1.27336,-1.28622 -1.79082,-1.62856 -1.03283,-0.68329 -1.55191,-0.59704 -2.56134,0.42557 -1.90777,1.93269 -3.18954,4.76848 -3.5594,7.87487 -0.1101,0.92472 -0.0266,2.74449 0.15373,3.35051 z m 0.10665,34.68197 c 0.45449,3.04916 2.21637,6.47569 3.99772,7.77479 0.69169,0.50444 1.60792,0.26354 2.87131,-0.75493 0.64891,-0.52311 0.76686,-0.82058 0.39284,-0.99074 -0.29245,-0.13305 -1.18241,0.0676 -2.20403,0.49699 -1.02378,0.43027 -1.16323,0.39084 -1.79629,-0.50788 -0.47412,-0.67309 -1.46697,-2.5182 -1.39422,-2.59103 0.0263,-0.0263 0.32164,0.0626 0.65636,0.19758 0.33472,0.13498 0.85773,0.26787 1.16225,0.29532 0.66788,0.0602 0.72928,-0.0243 0.55239,-0.7598 -0.0661,-0.27472 -0.11506,-0.63629 -0.10886,-0.80349 0.006,-0.1672 -0.0904,-0.55464 -0.2146,-0.86098 -0.20591,-0.50778 -0.8582,-2.58792 -1.24799,-3.97986 l -0.15715,-0.56117 -0.56215,0.0513 c -0.35236,0.0322 -0.77907,0.15983 -1.14342,0.34216 l -0.58128,0.29087 0.0631,-0.44814 c 0.14721,-1.04536 0.3977,-1.33546 1.73808,-2.01303 0.44245,-0.22365 0.59257,-0.35014 0.59249,-0.4992 -7e-5,-0.12294 -0.0459,-0.18029 -0.11934,-0.14928 -0.0656,0.0277 -0.39124,0.16314 -0.7237,0.30098 -1.56289,0.64798 -1.88996,1.20173 -1.91141,3.2361 -0.005,0.51801 0.0566,1.38806 0.13788,1.93345 z m 0.41709,-26.72937 c 0.092,1.04193 0.28478,1.76704 0.4698,1.76693 0.0397,-2e-5 0.10048,-0.21377 0.13499,-0.47501 0.0504,-0.38133 0.0227,-0.55333 -0.14031,-0.87243 -0.16182,-0.31675 -0.18245,-0.44272 -0.10162,-0.62039 0.0558,-0.12262 0.1073,-0.64235 0.11447,-1.15495 0.016,-1.14156 0.1384,-1.41932 0.94941,-2.15406 0.37321,-0.33812 0.57281,-0.5896 0.55218,-0.69571 -0.0553,-0.28428 -0.22286,-0.25021 -0.85004,0.17287 -0.74374,0.50169 -1.0081,0.96789 -1.12483,1.98368 -0.0452,0.39358 -0.0873,0.75853 -0.0936,0.81101 -0.006,0.0525 0.0341,0.60961 0.0895,1.23806 z m 0.10405,17.03457 c 0.0616,0.48864 0.18493,0.95921 0.31198,1.18991 0.35943,0.65259 1.59159,1.31026 1.59133,0.84936 -4e-5,-0.0834 -0.18855,-0.33459 -0.4189,-0.55821 -0.53728,-0.52159 -1.01316,-1.1781 -1.01328,-1.39789 -5e-5,-0.0945 -0.0732,-0.21263 -0.1626,-0.26258 -0.13209,-0.0738 -0.14037,-0.11752 -0.0442,-0.23349 0.0993,-0.11975 0.16164,-0.96627 0.11036,-1.49784 -0.008,-0.0787 0.0564,-0.39566 0.14209,-0.70435 0.1818,-0.65447 0.12122,-1.38385 -0.0997,-1.20031 -0.41588,0.34554 -0.61948,2.20822 -0.41705,3.8154 z m 1.7161,-21.70577 c 0.54159,-0.24478 1.02725,-0.48696 1.07925,-0.53817 0.052,-0.0512 0.14398,-0.25235 0.20441,-0.44698 0.10089,-0.32497 0.11069,-0.33244 0.12001,-0.0915 0.006,0.1443 0.0491,0.26234 0.0967,0.26231 0.0476,-2e-5 0.36399,-0.12473 0.70313,-0.27712 0.60767,-0.27304 0.6176,-0.28358 0.6835,-0.72467 0.0368,-0.24618 0.0463,-0.46811 0.0212,-0.49317 -0.0761,-0.076 -0.99297,0.35489 -1.16863,0.54921 -0.0903,0.0999 -0.38309,0.28333 -0.65057,0.40755 -0.46812,0.21741 -2.212,1.65948 -2.11906,1.75232 0.0249,0.0249 0.48847,-0.15498 1.03005,-0.39977 z m -0.003,24.72687 c 0.39372,0.30781 0.87691,0.65319 1.07375,0.76752 l 0.35789,0.20787 -1.5e-4,-0.26178 c -8e-5,-0.14397 -0.064,-0.35282 -0.14203,-0.4641 -0.12886,-0.18376 -1.8421,-1.07931 -2.06454,-1.07918 -0.18866,1e-4 0.075,0.28238 0.77508,0.82967 z m -0.58882,-17.84485 c 0.31727,0.51968 1.18574,1.31276 1.72829,1.57829 0.97888,0.47905 1.17107,0.53123 1.90476,0.51706 0.64157,-0.0124 0.71553,-0.0331 0.71544,-0.20009 -7e-5,-0.13678 -0.12488,-0.23085 -0.46961,-0.35397 -0.82887,-0.29603 -1.58242,-1.06372 -1.58272,-1.61244 -2.5e-4,-0.43771 0.38262,-0.66094 1.13352,-0.6609 1.26659,6e-5 3.20292,0.44081 4.23858,0.96479 0.65951,0.33367 1.09162,0.72856 1.6123,1.47342 0.48553,0.69458 0.83008,0.93957 0.69127,0.49151 -0.15932,-0.51424 -0.48965,-1.01396 -1.00001,-1.51279 -0.45752,-0.44718 -0.68759,-0.58611 -1.39373,-0.8416 -2.10895,-0.76305 -4.43652,-1.15844 -4.92664,-0.83691 -0.19846,0.13019 -0.23594,0.13094 -0.31468,0.006 -0.0636,-0.10065 -0.16735,-0.12191 -0.35938,-0.0736 -0.22048,0.0555 -0.25859,0.10502 -0.20779,0.27023 0.0342,0.11127 0.10442,0.37401 0.15602,0.58388 0.17947,0.72988 0.88855,1.57312 1.48923,1.77099 0.34472,0.11355 0.40488,0.24154 0.14653,0.31174 -0.4723,0.12833 -0.65834,0.14271 -0.78786,0.0609 -0.12081,-0.0763 -0.11709,-0.0901 0.0246,-0.0914 0.23305,-0.002 0.21369,-0.0548 -0.17441,-0.47375 -0.53162,-0.57394 -0.78738,-0.95378 -0.96127,-1.42761 -0.21939,-0.59784 -0.3272,-0.69374 -0.73942,-0.65777 l -0.35102,0.0306 0.25158,0.50274 c 0.28602,0.57156 0.94761,1.27409 1.46033,1.55067 0.33557,0.18103 0.33759,0.18523 0.0608,0.12644 -0.70374,-0.1495 -1.36491,-0.63892 -1.87333,-1.38671 -0.2073,-0.3049 -0.43971,-0.55433 -0.51646,-0.55428 -0.18405,1e-4 -0.17566,0.0828 0.0451,0.44428 z m -0.0345,11.00449 c 0.079,-5e-5 0.23999,-0.11457 0.35763,-0.25451 0.66862,-0.79533 0.82396,-0.94864 1.20996,-1.19419 0.58827,-0.37422 0.69042,-0.3372 0.20867,0.0756 -0.41856,0.35867 -0.96358,1.20129 -0.96498,1.49187 -5.9e-4,0.12262 0.0763,0.16692 0.28941,0.1668 0.26452,-1.4e-4 0.31439,-0.0541 0.56329,-0.60972 0.1502,-0.33526 0.49292,-0.85258 0.7616,-1.1496 0.26868,-0.29702 0.46315,-0.58102 0.43215,-0.63111 -0.031,-0.0501 -0.19335,-0.0906 -0.3608,-0.09 -0.55708,0.002 -1.80008,0.87085 -2.36735,1.65487 -0.30915,0.42726 -0.33623,0.54009 -0.12958,0.53998 z m 0.18819,-14.90347 c 0.27956,0.39867 1.54448,0.85266 2.13969,0.76796 0.21633,-0.0308 0.19304,-0.0622 -0.26232,-0.35336 -0.93395,-0.59726 -1.2599,-1.18568 -0.88066,-1.58981 0.29213,-0.31131 1.38757,-0.75495 2.58636,-1.04746 1.79381,-0.43769 2.11092,-0.53391 2.98481,-0.90563 0.47606,-0.2025 1.10713,-0.43822 1.40238,-0.52383 0.50763,-0.1472 0.58365,-0.14546 1.39817,0.0318 1.8064,0.3932 2.65578,1.13555 2.98372,2.60776 0.15503,0.69595 0.33082,0.73046 0.2423,0.0476 -0.15667,-1.2087 -0.49343,-1.77276 -1.41268,-2.36618 -1.27541,-0.82333 -2.77901,-1.05832 -3.84397,-0.60076 -1.43661,0.61724 -2.07426,0.83769 -3.32869,1.15082 -2.28183,0.56959 -3.58756,1.20684 -3.98207,1.94343 -0.21564,0.40262 -0.22077,0.56142 -0.027,0.83767 z m 0.25004,19.30187 c 0.22485,0.3154 1.23938,0.96839 1.92523,1.23916 0.27574,0.10886 1.13724,0.36474 1.91443,0.56863 0.7772,0.20388 1.9366,0.5937 2.57646,0.86626 1.30343,0.55523 1.99935,0.66532 2.91167,0.46062 1.09209,-0.24504 2.14044,-0.88432 2.68548,-1.63761 0.31021,-0.42874 0.53044,-1.30147 0.42614,-1.6887 -0.059,-0.21911 -0.093,-0.15751 -0.24406,0.44275 -0.19074,0.75779 -0.37737,1.0769 -0.89698,1.53363 -0.66596,0.58538 -1.72527,0.9694 -2.73841,0.99272 -0.52031,0.012 -0.76188,-0.0524 -1.83779,-0.48952 -0.69726,-0.2833 -1.83544,-0.64571 -2.60379,-0.82909 -1.63936,-0.39125 -2.79997,-0.82237 -3.20611,-1.19093 l -0.29922,-0.27153 0.24482,-0.45666 c 0.17363,-0.32388 0.41873,-0.57465 0.84298,-0.86247 l 0.59816,-0.40581 -0.38023,2.1e-4 c -0.59602,3.4e-4 -1.63475,0.36221 -1.95235,0.68016 -0.31244,0.31279 -0.30406,0.57459 0.0336,1.04818 z m -0.0377,-16.78461 c 0.0398,0.0397 0.39351,-0.0319 0.78609,-0.15925 0.39259,-0.12732 1.03228,-0.32345 1.42155,-0.43584 0.38927,-0.1124 1.11459,-0.4162 1.61183,-0.67511 0.8642,-0.45 1.40917,-0.61717 2.78369,-0.85394 0.79304,-0.1366 1.48772,-0.51452 1.79201,-0.97489 0.13129,-0.19863 0.22072,-0.37912 0.19873,-0.40108 -0.022,-0.022 -0.29654,0.0843 -0.61012,0.23623 -0.59761,0.28945 -1.17684,0.40579 -2.77308,0.55697 -0.52951,0.0502 -1.09716,0.16078 -1.26143,0.24585 -0.28117,0.14559 -0.29517,0.14481 -0.23883,-0.0135 0.17844,-0.50117 0.73262,-0.76069 1.97401,-0.92444 1.17616,-0.15514 1.60989,-0.34162 1.97809,-0.85051 0.24194,-0.33438 0.35342,-0.63759 0.2344,-0.63752 -0.0222,1e-5 -0.35485,0.16723 -0.7392,0.3716 -0.81811,0.435 -1.19547,0.52676 -2.98124,0.72489 -1.39865,0.15518 -2.16632,0.34581 -2.5452,0.63203 l -0.22827,0.17245 0.33412,0.34726 c 0.36699,0.38144 0.76293,0.61896 1.17399,0.70428 0.33253,0.069 0.35355,0.20795 0.0562,0.37141 -0.20488,0.11262 -1.26784,0.10986 -2.56527,-0.007 -0.34348,-0.0308 -0.60189,0.49343 -0.5284,1.07206 0.0297,0.23399 0.0866,0.45795 0.12635,0.49767 z m 0.0909,14.58686 0.15709,0.39198 0.43939,-0.0537 c 1.23546,-0.15098 2.30127,-0.17777 2.44169,-0.0614 0.22582,0.1872 0.17417,0.27179 -0.23307,0.38169 -0.47944,0.12939 -1.18727,0.66434 -1.22522,0.92598 -0.0333,0.22985 0.37539,0.56412 0.85903,0.70254 0.16722,0.0478 0.92917,0.15456 1.69321,0.23712 2.08553,0.22537 2.452,0.32114 3.32156,0.86807 0.55109,0.34661 0.61298,0.28201 0.28448,-0.2969 -0.29243,-0.51536 -0.86491,-0.79209 -1.88321,-0.91034 -1.17611,-0.13657 -1.95719,-0.36059 -2.2391,-0.64218 -0.44581,-0.44532 -0.33658,-0.48656 0.47362,-0.17883 0.23997,0.0911 0.71828,0.14655 1.28807,0.14922 1.46087,0.007 1.84309,0.0967 3.1827,0.74797 0.21729,0.10565 -0.0907,-0.45265 -0.4151,-0.75244 -0.40116,-0.37074 -0.86739,-0.53553 -2.43416,-0.86036 -0.71747,-0.14876 -1.16731,-0.31237 -1.81335,-0.65956 -0.51377,-0.2761 -1.28106,-0.58053 -1.90855,-0.75724 -0.57716,-0.16253 -1.23448,-0.36272 -1.46073,-0.44486 -0.22625,-0.0821 -0.43688,-0.1238 -0.46808,-0.0926 -0.0459,0.046 -0.14426,0.44818 -0.20643,0.84415 -0.006,0.0383 0.0598,0.24602 0.14616,0.46161 z m 0.7535,-22.1413 c 0.20981,-1.1e-4 0.39454,-0.32506 0.34784,-0.61185 -0.0659,-0.40464 0.17416,-1.32219 0.49656,-1.89796 0.24285,-0.43369 0.26592,-0.4498 0.43082,-0.30073 0.10517,0.0951 0.48335,0.19679 0.95398,0.2566 l 0.77975,0.0991 -0.0423,0.51374 c -0.0687,0.83358 0.12433,0.54755 0.40636,-0.60227 0.28742,-1.17181 0.2431,-1.06971 1.16314,-2.67964 0.76474,-1.3382 0.87272,-1.78629 0.55302,-2.29506 -0.22981,-0.36571 -0.99705,-0.87999 -1.31259,-0.87981 -0.26126,1.5e-4 -0.27191,-0.0727 -0.051,-0.34881 0.25358,-0.31685 0.79846,-0.60492 1.14529,-0.60551 0.24178,-4.1e-4 0.45653,0.12114 0.94435,0.53451 0.34728,0.29427 0.7741,0.59456 0.9485,0.66731 0.37675,0.15717 0.85929,0.17265 0.94711,0.0304 0.13941,-0.22585 -1.53135,-2.34519 -2.0668,-2.62171 -0.26934,-0.13908 -0.31619,-0.13516 -0.71914,0.0602 -1.37902,0.66852 -3.15151,3.1572 -4.0276,5.65501 -0.53478,1.52472 -0.67067,2.21288 -0.89837,4.54948 -0.0179,0.18367 -0.0394,0.36614 -0.0478,0.4055 -0.008,0.0394 0.0136,0.0716 0.0488,0.0715 z m 0.10912,2.57592 c 0.0944,-6e-5 0.21249,-0.0407 0.26232,-0.0902 0.0498,-0.0496 0.54129,-0.25492 1.09215,-0.45632 0.96531,-0.35292 1.00156,-0.37644 1.0014,-0.64987 -2.5e-4,-0.4512 -0.29516,-0.38775 -1.77958,0.38294 -0.60382,0.31349 -0.95818,0.8137 -0.57629,0.81349 z m 0.293,23.80031 c 0.42168,0.28619 0.49091,0.29433 0.65005,0.0764 0.10691,-0.14637 0.11535,-0.13731 0.074,0.0794 -0.0423,0.22212 0.007,0.26797 0.54032,0.49877 0.72857,0.31549 0.84129,0.31653 0.91843,0.008 0.0789,-0.31512 0.0281,-0.35543 -0.77388,-0.61418 -0.36738,-0.11853 -0.87052,-0.31676 -1.1181,-0.44051 -0.54744,-0.27365 -0.64732,-0.27944 -0.64718,-0.0375 6e-5,0.10953 0.14807,0.2878 0.35631,0.42913 z m -0.0566,4.56977 c 0.36419,1.98092 0.96406,3.48522 2.04975,5.14022 0.99836,1.52188 2.29613,2.7416 2.91666,2.74126 0.15691,-9e-5 0.39097,-0.1644 0.71408,-0.50129 0.66407,-0.69237 0.99072,-1.11181 0.99064,-1.272 -1.4e-4,-0.24704 -0.68977,-0.15953 -1.32396,0.16799 -0.57845,0.29874 -0.59253,0.30095 -0.92063,0.14472 -0.35559,-0.16933 -1.19037,-0.89242 -1.19045,-1.03118 -2e-5,-0.0458 0.14381,-0.0833 0.31964,-0.0834 0.72132,-4.1e-4 1.2066,-0.38959 1.20628,-0.96741 -6e-5,-0.11713 -0.26353,-0.77384 -0.58548,-1.45936 -0.32195,-0.68552 -0.75702,-1.78297 -0.96681,-2.43877 -0.20979,-0.6558 -0.41785,-1.28779 -0.46236,-1.40441 -0.0529,-0.13868 -0.38749,-0.36562 -0.9669,-0.65589 -0.48729,-0.24411 -1.06551,-0.56694 -1.28494,-0.7174 -0.21944,-0.15047 -0.46352,-0.27354 -0.54241,-0.27349 -0.28737,1.6e-4 -0.27161,0.87812 0.0469,2.61044 z m 0.47343,-2.11428 c 0.48412,0.39499 1.28383,0.83852 1.51165,0.83839 0.28709,-1.6e-4 0.57961,0.28419 0.57977,0.56355 l 1.5e-4,0.26684 -0.4979,-0.12886 c -0.58021,-0.15016 -1.05152,-0.16343 -1.47562,-0.0415 -0.37486,0.10773 -0.39097,0.0732 -0.47561,-1.01994 l -0.0636,-0.8221 z m -0.0368,-8.36644 c 0.32224,0.13324 1.99406,0.16334 2.83444,0.051 0.93007,-0.1243 2.41051,-0.5643 3.14064,-0.93342 0.61473,-0.31079 1.3377,-0.99317 1.79038,-1.68988 0.61219,-0.94219 0.43274,-1.16725 -0.21633,-0.2713 -0.93241,1.28707 -1.48928,1.70489 -2.91681,2.18848 -0.94739,0.32094 -1.14043,0.35286 -2.38296,0.39393 -1.35194,0.0447 -1.35209,0.0447 -1.59817,-0.20113 -0.13536,-0.13521 -0.24617,-0.34516 -0.24623,-0.46654 -1.9e-4,-0.34246 0.42292,-0.88474 0.9638,-1.23525 0.32236,-0.20891 0.43823,-0.32909 0.33666,-0.34916 -0.21106,-0.0417 -0.8872,0.43066 -1.23373,0.86189 -0.25314,0.31503 -0.6275,1.1827 -0.63564,1.47325 -0.002,0.06 0.0721,0.14012 0.16395,0.1781 z m 0.27455,-20.94502 c 0.0394,-0.001 0.17884,-0.0897 0.30996,-0.19673 l 0.23841,-0.19457 -0.30999,0.15148 c -0.29456,0.14394 -0.39456,0.24454 -0.23838,0.23982 z m 0.37377,28.72341 c 0.20998,0.14833 0.48912,0.2831 0.62031,0.29949 0.22353,0.0279 0.23852,0.003 0.23829,-0.39953 -2.3e-4,-0.42697 -0.003,-0.43101 -0.57285,-0.73639 -0.31493,-0.16889 -0.60716,-0.30826 -0.64939,-0.30971 -0.0422,-10e-4 -0.0636,0.19515 -0.0475,0.4369 0.026,0.39022 0.0722,0.46982 0.4111,0.70924 z m 1.13908,-10.40827 c 0.14076,0.1286 0.2473,0.15282 0.40553,0.0922 0.11804,-0.0452 0.2146,-0.11795 0.21458,-0.16162 -1.2e-4,-0.21435 -0.27748,-0.30822 -0.90972,-0.30786 -0.78282,4.3e-4 -1.05251,0.12899 -0.36336,0.17321 0.27985,0.018 0.53735,0.0984 0.65297,0.20407 z m 0.0619,-17.36334 c 0.33494,-0.01 1.34869,-0.34973 1.41548,-0.47431 0.0422,-0.0787 0.18585,-0.37139 0.31918,-0.65033 0.20891,-0.43705 0.21946,-0.5001 0.0763,-0.45593 -0.0914,0.0282 -0.44992,0.13839 -0.79682,0.24489 -0.87218,0.26777 -1.13391,0.49046 -1.13365,0.96455 1.4e-4,0.23803 0.0437,0.3734 0.11947,0.37113 z m 0.19268,28.35431 c 0.19357,0.16946 1.61648,0.67944 1.69009,0.60574 0.0243,-0.0243 -0.0627,-0.29218 -0.19333,-0.59528 l -0.23747,-0.55108 -0.69104,-0.18234 c -0.5864,-0.15473 -0.7036,-0.16201 -0.77393,-0.0481 -0.11544,0.18701 -0.01,0.58219 0.20568,0.77103 z m 0.10409,-27.4367 c 0.0711,0.0272 0.37472,-0.0592 0.67466,-0.192 0.45895,-0.20327 0.54039,-0.27588 0.51413,-0.45837 -0.0349,-0.24218 -0.20228,-0.25356 -0.91301,-0.062 -0.35876,0.0967 -0.4054,0.1411 -0.40526,0.38606 8e-5,0.15225 0.0583,0.29911 0.12948,0.32636 z m 1.07629,5.85558 c 1.46275,0.35894 1.97662,0.5408 3.35525,1.18741 0.98819,0.46349 1.74028,0.6667 1.74017,0.47019 -1.2e-4,-0.21678 -0.47778,-0.75083 -0.95805,-1.07116 -0.9526,-0.63536 -2.51242,-1.05647 -3.92079,-1.05852 -0.7809,-0.001 -1.46904,0.0765 -1.3888,0.15661 0.0203,0.0203 0.54781,0.16225 1.17222,0.31547 z m 0.71381,14.38297 c 0.97271,-0.0347 1.33324,-0.0904 1.95566,-0.30226 1.48526,-0.50553 2.43221,-1.18147 2.4319,-1.7359 -1.2e-4,-0.22415 -0.0239,-0.23758 -0.31017,-0.17509 -0.17051,0.0372 -0.84654,0.34208 -1.50227,0.67747 -1.21501,0.62143 -2.38104,1.01167 -3.57708,1.19714 -0.92822,0.14394 -1.01396,0.18761 -0.57227,0.29144 0.20992,0.0494 0.91832,0.0706 1.57423,0.0472 z m -1.2398,6.15406 c 0.64017,0.17202 0.70518,0.15825 0.80379,-0.17033 0.0605,-0.20159 -0.0731,-0.29468 -0.97053,-0.67607 -0.29536,-0.12553 -0.31724,-0.12094 -0.40118,0.0842 -0.18646,0.4556 -0.0896,0.58554 0.56792,0.76224 z m 0.63964,4.01908 c 0.40656,1.29452 0.93594,2.2124 1.7474,3.02982 0.78522,0.79097 1.26901,1.13218 1.60581,1.13254 0.31391,3.4e-4 1.02584,-0.69976 1.40873,-1.38533 0.39928,-0.71491 0.41739,-0.90508 0.0862,-0.9049 -0.24754,1.4e-4 -0.38332,0.11863 -1.02744,0.8966 -0.39908,0.48202 -0.66282,0.55256 -1.06986,0.28618 -0.32364,-0.2118 -0.29829,-0.28568 0.17004,-0.49554 0.57415,-0.25729 0.78715,-0.5305 0.78484,-1.00669 -0.004,-0.78685 -0.76797,-1.83444 -1.89229,-2.59417 -0.50441,-0.34085 -1.51585,-0.70929 -1.94645,-0.70905 -0.23436,1.3e-4 -0.23904,0.0131 -0.17595,0.48657 0.0356,0.26754 0.17469,0.83633 0.30899,1.26397 z m 0.10644,-33.71184 c 0.79288,-4.4e-4 2.09365,-0.85857 2.4947,-1.64577 0.28255,-0.55461 0.33301,-1.2778 0.13335,-1.91132 -0.13131,-0.41668 -0.14228,-0.56664 -0.0536,-0.73262 0.11714,-0.21917 0.91053,-0.76877 1.10993,-0.76888 0.0639,-4e-5 0.24781,0.21349 0.40862,0.47451 0.38945,0.63214 0.63124,0.8606 0.91066,0.86044 0.20874,-1.1e-4 0.22418,-0.0268 0.15486,-0.26803 -0.20237,-0.70413 -0.91783,-1.69685 -1.29012,-1.79007 -0.62862,-0.1574 -2.27194,1.26601 -3.23346,2.80076 -0.44594,0.71181 -0.89907,2.03964 -0.9115,2.67106 -0.006,0.28147 0.02,0.31006 0.27653,0.30992 z m 0.35683,1.81252 c 0.25421,-1.4e-4 1.63658,-0.95211 1.71284,-1.17954 0.063,-0.18792 0.0538,-0.64056 -0.0145,-0.71193 -0.0561,-0.0586 -1.14744,0.53737 -1.30611,0.7133 -0.14813,0.16425 -0.53129,0.93956 -0.54694,1.10671 -0.004,0.0393 0.0659,0.0715 0.15473,0.0715 z m -0.0893,0.95382 c 0.24478,-0.001 1.59456,-0.82418 3.44015,-2.09767 2.221,-1.53253 2.9758,-2.12888 2.85305,-2.25412 -0.11434,-0.11667 -0.59322,0.1714 -1.93013,1.16109 -1.68437,1.24691 -2.31835,1.65642 -3.46046,2.23526 -0.83149,0.42141 -0.9744,0.52773 -0.97429,0.72482 7e-5,0.12703 0.0323,0.23081 0.0717,0.23062 z m 0.67068,27.42345 c 0.67672,0.29436 2.3716,1.40315 4.37888,2.86467 0.97644,0.71096 1.24824,0.86857 1.27579,0.73979 0.0434,-0.20296 -0.57246,-0.76335 -1.27271,-1.15804 -0.28081,-0.15827 -0.75622,-0.48763 -1.05648,-0.73192 -0.67607,-0.55004 -2.64456,-1.8697 -3.2803,-2.19908 -0.48672,-0.25218 -0.67714,-0.23929 -0.67698,0.0458 6e-5,0.11078 0.20497,0.25307 0.6318,0.43874 z m -0.44117,0.81531 c 0.10457,0.2047 0.33012,0.47703 0.50122,0.60516 0.29538,0.22121 1.05599,0.63598 1.16616,0.63592 0.0283,-2e-5 0.0514,-0.17037 0.0513,-0.37856 -1.9e-4,-0.34556 -0.0439,-0.4111 -0.5013,-0.75224 -0.44837,-0.33437 -1.22054,-0.7764 -1.35617,-0.77632 -0.10814,6e-5 -0.0439,0.30849 0.1388,0.66604 z m 2.33126,-22.79361 c 0.66413,0.0966 1.28879,0.20141 1.38813,0.23288 0.34143,0.10816 0.18015,-0.14276 -0.22508,-0.35019 -0.26171,-0.13395 -0.64827,-0.22332 -1.08966,-0.2519 -0.67268,-0.0436 -1.43748,0.0371 -1.33377,0.14073 0.0291,0.029 0.59625,0.13187 1.26038,0.22848 z m -0.60797,16.2122 c 0.61618,0.11356 1.32211,0.007 1.89755,-0.2873 0.41356,-0.21128 0.52313,-0.43858 0.16843,-0.34942 -0.47827,0.12021 -2.05144,0.34888 -2.40405,0.34943 -0.51972,8.2e-4 -0.32679,0.16477 0.33807,0.28729 z m 0.2202,-23.96483 c 0.0582,0.0685 0.5954,-0.27426 1.02827,-0.65611 0.38708,-0.34146 0.45089,-0.44481 0.40365,-0.65381 -0.0513,-0.2269 -0.0446,-0.23363 0.0775,-0.0783 0.12255,0.15591 0.25875,0.035 1.64641,-1.46135 2.34589,-2.52965 4.03932,-4.81123 4.03897,-5.44176 -9e-5,-0.16679 -0.11178,-0.0666 -0.49387,0.44296 -0.27157,0.36218 -0.70748,0.89475 -0.96871,1.1835 -0.26122,0.28875 -1.2132,1.34114 -2.1155,2.33864 -1.7295,1.91197 -2.33725,2.51028 -3.2267,3.17654 -0.53056,0.39743 -0.54332,0.41769 -0.48061,0.76352 0.0354,0.19539 0.0762,0.36915 0.0906,0.38613 z m 0.46744,32.41035 c 1.14591,0.86018 5.46821,5.41306 6.23738,6.57012 0.32498,0.48887 0.51665,0.65468 0.51653,0.44684 -2e-4,-0.35789 -0.84103,-1.75066 -1.7056,-2.82519 -0.53827,-0.66899 -3.68268,-3.97942 -3.83172,-4.03404 -0.0436,-0.016 -0.10725,0.0592 -0.14142,0.16704 -0.0342,0.10785 -0.1071,0.19612 -0.16207,0.19616 -0.055,3e-5 -0.0267,-0.1119 0.0629,-0.24872 0.15986,-0.24428 0.15703,-0.25485 -0.15632,-0.58476 -0.17551,-0.18479 -0.51239,-0.46064 -0.7486,-0.613 l -0.42948,-0.27702 -0.0619,0.21814 c -0.13728,0.48363 -0.0856,0.6046 0.42037,0.98443 z m -0.0571,-18.48827 c 0.60624,0.6041 2.86727,1.8301 3.38145,1.83352 0.35902,0.002 0.24479,-0.18925 -0.18953,-0.31797 -0.99857,-0.29593 -2.38966,-1.1508 -2.89522,-1.77919 -0.30599,-0.38033 -0.65577,-0.50679 -0.65562,-0.23705 4e-5,0.0787 0.16156,0.30402 0.35892,0.50069 z m -0.20041,4.22185 c 0.0333,-2e-5 0.36582,-0.29004 0.73904,-0.64448 0.39225,-0.37252 0.9733,-0.79929 1.37707,-1.01142 1.01064,-0.53097 0.76233,-0.54791 -0.31786,-0.0217 -0.94181,0.45881 -1.85899,1.20731 -1.85882,1.51696 5e-5,0.0884 0.0273,0.16063 0.0606,0.16062 z m 1.67119,-17.02896 c 0.75712,0.001 1.10702,0.0478 1.5496,0.20675 0.31441,0.11289 0.58794,0.18895 0.60784,0.16903 0.0199,-0.0199 0.008,-0.14866 -0.0267,-0.28609 -0.0838,-0.33302 -0.66485,-0.58325 -1.55386,-0.66914 -0.63529,-0.0614 -0.71962,-0.0472 -1.12092,0.18826 -0.23867,0.14005 -0.43394,0.28503 -0.43393,0.32217 1e-5,0.0371 0.44009,0.0682 0.97795,0.069 z m -0.15426,13.01358 c 0.49018,0.23007 1.41859,0.36362 1.50905,0.21707 0.082,-0.13284 -0.0977,-0.58819 -0.24915,-0.63114 -0.26712,-0.0758 -1.84335,-0.22289 -1.91587,-0.17881 -0.12787,0.0777 0.21107,0.38405 0.65597,0.59288 z m -0.15697,16.52219 c 0.47901,0.30341 0.84562,0.34241 1.63106,0.1735 0.58778,-0.12639 0.96241,-0.40513 0.96224,-0.71593 -1.6e-4,-0.28015 -0.0132,-0.28092 -0.64963,-0.0386 -0.54726,0.20835 -1.55388,0.2828 -2.15034,0.15904 -0.46468,-0.0964 -0.39851,0.0387 0.20667,0.42201 z m 0.65234,-12.96769 c 1.04986,-0.0318 1.26614,-0.10147 1.26597,-0.40793 -2.7e-4,-0.46997 -0.92114,-0.50325 -1.72297,-0.0623 -0.31041,0.17071 -0.56496,0.35331 -0.56567,0.40579 -8e-4,0.0596 0.38277,0.0838 1.02267,0.0644 z m -0.3354,-6.35588 c 0.60999,0.55076 1.41245,0.94329 1.75317,0.85757 0.20993,-0.0528 0.23259,-0.0967 0.17795,-0.34486 -0.0344,-0.15639 -0.0627,-0.46725 -0.0628,-0.69081 l -2.2e-4,-0.40646 -0.63603,0.0341 c -0.34981,0.0188 -0.88291,-0.005 -1.18466,-0.0538 -0.70586,-0.11312 -0.71485,0.002 -0.0474,0.6042 z m 0.38806,9.19304 c 0.97646,-0.13715 1.47474,-0.0665 1.59867,0.22665 0.31486,0.7448 0.62111,2.88982 0.55186,3.86531 -0.025,0.35216 -0.13526,0.84361 -0.24502,1.09212 -0.25645,0.58063 -1.05138,1.42057 -1.75736,1.85687 -0.30455,0.18821 -0.53768,0.35824 -0.51806,0.37784 0.0763,0.0762 0.89741,-0.34482 1.35903,-0.69694 0.59619,-0.45477 0.99117,-0.90447 1.2894,-1.46804 0.20268,-0.38299 0.22588,-0.543 0.2144,-1.47892 -0.0161,-1.3088 -0.26364,-2.80831 -0.56707,-3.43431 -0.15654,-0.32297 -0.23939,-0.67708 -0.25667,-1.09703 l -0.0255,-0.62013 -0.31122,-0.0298 c -0.18666,-0.0179 -0.48885,0.0587 -0.75505,0.19123 -0.46632,0.23224 -1.53823,1.17825 -1.44292,1.27345 0.0305,0.0305 0.42003,0.004 0.86551,-0.0583 z m 0.61831,-16.40425 c 0.46815,0.35401 1.24083,1.40262 1.36285,1.84954 0.13909,0.50943 0.0431,2.06557 -0.20779,3.36972 -0.10456,0.54343 -0.21437,1.0514 -0.24404,1.12884 -0.0659,0.1721 0.0661,0.18224 0.2779,0.0213 0.21613,-0.16421 0.55384,-2.22193 0.57549,-3.50651 0.016,-0.94859 0.002,-1.02894 -0.26692,-1.51348 -0.3862,-0.69637 -1.13053,-1.42772 -1.83268,-1.80072 -0.70664,-0.37539 -1.01428,-0.40978 -0.41015,-0.0459 0.23784,0.14327 0.57324,0.36698 0.74534,0.49712 z m 0.0131,-3.89405 c 0.36732,0.009 0.7424,0.0191 0.83351,0.0234 0.0911,0.004 0.17962,-0.0648 0.19668,-0.15366 0.0233,-0.12164 -0.0926,-0.19814 -0.46937,-0.30981 -0.2752,-0.0816 -0.55119,-0.14827 -0.6133,-0.14823 -0.14634,8e-5 -0.61549,0.36927 -0.61542,0.4843 3e-5,0.0487 0.30058,0.0955 0.6679,0.10401 z m -0.34036,31.27865 c 0.52779,0.3214 1.40737,0.20882 1.40715,-0.18009 -8e-5,-0.15243 -0.0958,-0.17151 -0.85875,-0.17108 -0.47227,2.6e-4 -0.85864,0.0369 -0.85862,0.0814 3e-5,0.0445 0.13963,0.1659 0.31022,0.26978 z m 1.36181,-31.99894 c 0.0177,-0.0177 0.004,-0.10488 -0.03,-0.19379 -0.0481,-0.12525 -0.12923,-0.14724 -0.36007,-0.0976 -0.49309,0.10594 -0.51105,0.17497 -0.0653,0.25118 0.23284,0.0398 0.43779,0.0579 0.45545,0.0403 z m -0.30635,32.66516 c 0.0687,-4e-5 0.20818,-0.0632 0.31,-0.14025 0.15968,-0.12092 0.16325,-0.14059 0.026,-0.14313 -0.22448,-0.004 -0.46092,0.0976 -0.46087,0.19825 3e-5,0.0469 0.0562,0.0852 0.12492,0.0851 z m 1.05748,-20.05033 c 0.28508,0.6115 0.29501,0.8646 0.0586,1.49315 -0.26515,0.70485 -0.32955,1.23283 -0.19867,1.62866 l 0.11389,0.34446 0.95237,-0.033 c 1.17717,-0.0408 1.24598,-0.10227 1.40959,-1.25946 0.10583,-0.74859 0.10023,-0.82625 -0.0859,-1.19067 -0.23633,-0.4626 -0.24785,-0.71299 -0.0577,-1.25299 0.13638,-0.38722 0.1324,-0.41844 -0.10493,-0.82289 l -0.24668,-0.4204 -0.82837,4.6e-4 c -1.01391,5.7e-4 -1.25283,0.12471 -1.25115,0.6501 6.2e-4,0.1938 0.10817,0.58197 0.239,0.86259 z m 0.0961,-12.46007 c 0.0826,0.2492 0.18963,0.45308 0.23789,0.45305 0.0483,-3e-5 0.0877,-0.0341 0.0877,-0.0757 -3e-5,-0.0416 0.21798,-0.33155 0.48446,-0.64427 0.47166,-0.55351 0.48311,-0.58122 0.43164,-1.04558 -0.0685,-0.61821 0.0889,-1.71127 0.29734,-2.06458 0.21716,-0.36809 0.84779,-0.66139 1.56222,-0.72657 0.52206,-0.0476 0.59929,-0.083 0.76052,-0.34847 0.28692,-0.47241 0.67632,-1.62935 0.64178,-1.90683 l -0.0317,-0.25453 -0.75266,0.44205 c -0.76639,0.45011 -1.58389,1.18956 -1.58375,1.43256 4e-5,0.0739 -0.0357,0.13437 -0.0793,0.13439 -0.0437,3e-5 -0.35232,0.39733 -0.6859,0.8829 -0.33358,0.48556 -0.76739,1.07613 -0.96402,1.31237 -0.68183,0.81915 -0.76658,1.32184 -0.40622,2.40924 z m 0.10072,18.13074 0.23431,0.74284 -0.28548,0.56631 c -0.33531,0.66516 -0.3677,1.15709 -0.0942,1.4303 0.15084,0.15067 0.31813,0.19064 0.79683,0.19037 0.83321,-4.7e-4 1.13442,-0.12529 1.38664,-0.57463 0.2013,-0.35863 0.20406,-0.39437 0.0626,-0.81033 -0.18891,-0.5554 -0.18452,-0.67299 0.0439,-1.17717 0.16863,-0.37215 0.17707,-0.48485 0.0822,-1.09722 -0.19121,-1.23395 -0.36194,-1.37344 -1.54973,-1.2662 -1.11383,0.10056 -1.19727,0.34651 -0.67706,1.99573 z m 0.40568,16.2584 c 0.28219,0.35372 0.71137,0.96618 0.95373,1.36103 0.24235,0.39484 0.5416,0.81617 0.66499,0.93629 0.12339,0.12012 0.22436,0.25404 0.22439,0.2976 1.2e-4,0.21675 1.92996,1.72473 2.20704,1.72458 0.21421,-1.2e-4 -0.38297,-2.04338 -0.695,-2.37793 -0.13527,-0.14503 -0.30377,-0.19805 -0.63373,-0.1994 -0.54821,-0.002 -1.15662,-0.26436 -1.43542,-0.61839 -0.3061,-0.38869 -0.49381,-1.13037 -0.49427,-1.95288 l -4.1e-4,-0.72708 -0.49339,-0.6418 c -0.27136,-0.353 -0.5263,-0.6082 -0.56652,-0.56713 -0.0402,0.0411 -0.15536,0.39332 -0.25585,0.78277 -0.22875,0.88643 -0.16865,1.11357 0.52444,1.98234 z m 0.373,-23.75717 c 0.99937,0.0204 1.02904,2.8e-4 1.134,-0.76871 0.0518,-0.37931 0.0327,-0.4398 -0.18294,-0.58094 -0.3116,-0.20392 -1.53876,-0.31631 -1.64122,-0.15031 -0.0856,0.13864 -0.22533,1.01632 -0.20558,1.29116 0.0125,0.17461 0.0886,0.19233 0.89574,0.2088 z m -0.72259,11.73294 c 0.1006,0.57579 0.11825,0.60404 0.37727,0.6039 0.36788,-2.1e-4 1.25689,-0.19303 1.39262,-0.30205 0.18186,-0.14609 0.23526,-0.54199 0.12713,-0.94266 l -0.10201,-0.37799 -0.95039,5.3e-4 c -1.09067,6.1e-4 -1.0343,-0.0674 -0.84462,1.01827 z m 0.26841,-18.71585 c 0.0573,0.41976 0.13392,0.78696 0.17035,0.81602 0.0364,0.029 0.3809,0.0137 0.76547,-0.0342 l 0.69924,-0.087 -0.0363,-1.68354 c -0.0315,-1.46485 -0.0637,-1.75169 -0.24777,-2.20816 -0.32619,-0.80906 -0.35287,-0.83657 -0.59759,-0.61601 -0.27435,0.24726 -0.7022,0.87934 -0.83727,1.23695 -0.11802,0.31246 -0.0845,1.34175 0.0838,2.57593 z m 0.26277,5.04286 c 0.19679,0.0324 0.56174,0.0593 0.81099,0.0597 l 0.45318,8e-4 -4.3e-4,-0.76325 c -4.6e-4,-0.83577 -0.16075,-1.14345 -0.59692,-1.14585 -0.11807,-6.5e-4 -0.30055,-0.0226 -0.40551,-0.0487 -0.40901,-0.10188 -0.59175,0.28845 -0.60965,1.30224 l -0.009,0.53611 z m -0.24022,22.24338 c 0.10711,0.39177 0.78496,1.38295 0.94571,1.38286 0.11072,-6e-5 0.30577,-0.3725 0.5248,-1.00206 0.12611,-0.36246 0.17281,-0.86116 0.19434,-2.07519 0.0156,-0.87895 -10e-4,-1.59839 -0.0369,-1.59876 -0.0359,-3.8e-4 -0.338,-0.0448 -0.67132,-0.0987 -0.74725,-0.12082 -0.86858,-0.0432 -0.8838,0.56513 -0.006,0.24282 -0.0437,0.57032 -0.0837,0.72776 -0.11187,0.44067 -0.10545,1.67324 0.0109,2.09894 z m 0.19181,-5.89839 c 0.16945,0.20394 1.12218,0.11082 1.2956,-0.12663 0.0733,-0.10037 0.12113,-0.45677 0.12088,-0.90087 -3.2e-4,-0.5817 -0.0318,-0.74685 -0.15119,-0.79258 -0.21045,-0.0806 -1.20487,0.0421 -1.36393,0.16835 -0.16524,0.13113 -0.0878,1.4273 0.0986,1.65173 z m 0.66729,-18.60568 c 0.38047,0.0541 0.71171,0.0813 0.7361,0.0603 0.0244,-0.021 0.0456,-0.39024 0.0472,-0.82061 l 0.003,-0.78249 -0.61011,-0.0284 c -0.33556,-0.0156 -0.66829,-0.006 -0.73939,0.0213 -0.0926,0.0356 -0.12917,0.24884 -0.12889,0.75062 l 3.9e-4,0.70093 z m 0.17848,20.68723 0.71555,-4e-4 0.0306,-0.42934 c 0.0168,-0.23614 0.003,-0.6118 -0.0302,-0.83479 l -0.0607,-0.40545 -0.60956,3.4e-4 c -0.75117,4.2e-4 -0.81683,0.0843 -0.78464,1.00221 l 0.0234,0.66783 z m 0.36165,-27.35448 c 0.12231,0.27736 0.25537,0.49195 0.2957,0.47687 0.19628,-0.0734 1.32099,-1.92971 1.4201,-2.34384 0.13183,-0.55087 0.16151,-1.37145 0.0558,-1.5423 -0.12624,-0.204 -1.10366,-0.0844 -1.47528,0.18053 -0.48543,0.34606 -0.58717,0.67323 -0.55054,1.77041 0.0248,0.74231 0.0812,1.06596 0.25423,1.45833 z m 0.009,35.16505 c 0.1003,0.22641 0.31864,0.50858 0.4852,0.62704 0.36713,0.26111 0.95229,0.35395 1.24437,0.19742 0.20086,-0.10763 0.21034,-0.15533 0.14731,-0.74079 -0.037,-0.34417 -0.12033,-0.82947 -0.18506,-1.07845 -0.12031,-0.46274 -1.16279,-2.28448 -1.30724,-2.2844 -0.13004,7e-5 -0.39917,0.58147 -0.5301,1.14517 -0.15425,0.66406 -0.0903,1.60169 0.14552,2.13401 z m 0.43668,-33.64889 c 0.0532,0.19787 0.0824,0.18682 0.59487,-0.22513 0.91788,-0.73781 0.98503,-0.80377 0.93933,-0.92266 -0.0244,-0.0635 -0.0965,-0.36583 -0.1602,-0.67178 -0.0637,-0.30595 -0.14853,-0.51946 -0.18852,-0.47447 -0.36678,0.41258 -0.92385,1.20394 -1.06538,1.51344 -0.1926,0.42122 -0.20137,0.47823 -0.1201,0.7806 z m 0.25832,1.47883 c 0.22565,-0.21895 0.47365,-0.33958 0.86913,-0.42276 0.65815,-0.13843 0.80693,-0.36382 0.63043,-0.95507 -0.129,-0.43215 -0.38337,-0.47249 -0.84219,-0.13358 -0.4247,0.31369 -0.69075,0.67737 -0.83595,1.14267 -0.19823,0.6353 -0.16559,0.7027 0.17858,0.36874 z m -0.12889,5.42079 c 0.1444,-8e-5 0.38812,-0.28751 0.39022,-0.46022 0.001,-0.0881 0.19284,-0.45517 0.42615,-0.81575 0.42193,-0.65211 0.45152,-0.87172 0.14311,-1.06208 -0.11093,-0.0685 -0.53104,0.36099 -0.73086,0.74715 -0.24395,0.47144 -0.40484,1.59099 -0.22862,1.5909 z m 0.15669,21.64675 c 0.67085,1.32203 1.63664,1.63926 1.56068,0.51264 -0.0282,-0.41804 -0.0398,-0.43196 -0.50598,-0.60822 -0.26242,-0.0992 -0.54915,-0.18037 -0.63718,-0.18037 -0.088,10e-6 -0.27009,-0.13946 -0.40459,-0.30992 -0.228,-0.28897 -0.24461,-0.2952 -0.24548,-0.0921 -5.1e-4,0.11981 0.10413,0.4249 0.23255,0.67797 z m -0.0276,1.66 c 0.26266,0.5148 0.95536,1.49832 1.05524,1.49827 0.0421,-3e-5 0.0771,-0.0966 0.0776,-0.21471 5.6e-4,-0.11807 0.0611,-0.44089 0.13454,-0.7174 l 0.13353,-0.50273 -0.30199,-0.15518 c -0.16609,-0.0854 -0.49528,-0.32002 -0.73152,-0.52149 -0.4189,-0.35723 -0.43106,-0.36101 -0.49146,-0.15267 -0.0955,0.32932 -0.0939,0.33872 0.12402,0.76591 z m 0.40348,-22.73522 c 0.25808,-0.24273 0.23286,-0.244 1.29636,0.0654 0.17606,0.0512 0.56303,-0.74747 0.5628,-1.1616 -2.8e-4,-0.50616 -0.54063,-1.2368 -0.83188,-1.12485 -0.13871,0.0533 -0.888,1.26589 -0.92078,1.49009 -0.0111,0.0759 -0.16075,0.25646 -0.33255,0.40119 -0.28192,0.23749 -0.29797,0.27752 -0.16465,0.41069 0.13333,0.13318 0.17141,0.12529 0.3907,-0.081 z m -0.37997,2.8288 c 0.15042,0.0576 0.57828,-0.17826 0.791,-0.43609 0.20137,-0.24408 0.87672,-1.65311 0.87662,-1.82898 -1.1e-4,-0.18784 -0.18781,-0.27751 -0.5804,-0.2773 -0.24133,1.4e-4 -0.2784,0.0357 -0.27827,0.2673 9e-5,0.14692 -0.053,0.32033 -0.11793,0.38535 -0.065,0.065 -0.11855,0.19078 -0.1191,0.27947 -6.7e-4,0.10583 -0.0799,0.162 -0.23052,0.16343 -0.18376,0.002 -0.25303,0.0783 -0.34756,0.38386 -0.16931,0.54741 -0.16671,0.99673 0.006,1.06296 z m 0.1106,1.76798 c 0.19873,0.21935 0.84119,0.14261 1.14911,-0.13726 0.23992,-0.21808 0.60073,-1.206 0.59893,-1.63992 -0.002,-0.40866 -0.10833,-1.00744 -0.17896,-1.0049 -0.0325,0.001 -0.18572,0.19108 -0.34052,0.42202 -0.15481,0.23094 -0.51205,0.60019 -0.79389,0.82056 -0.28183,0.22036 -0.55096,0.49222 -0.59805,0.60412 -0.1119,0.26593 -0.0328,0.71885 0.16338,0.93538 z m -0.12469,2.36872 c 0.2007,-1.1e-4 1.01661,-0.67703 1.16695,-0.96815 0.30398,-0.58864 0.0589,-1.10184 -0.47503,-0.99474 -0.41803,0.0839 -0.52156,0.22554 -0.67155,0.9191 -0.1724,0.79724 -0.17722,1.04388 -0.0204,1.04379 z m 0.12456,9.4602 c 0.15546,0.47763 0.51866,0.93875 0.73931,0.93862 0.0748,-4e-5 0.18658,-0.0611 0.24842,-0.13571 0.0886,-0.1069 0.0608,-0.23319 -0.13154,-0.59621 -0.94387,-1.78181 -1.17743,-2.03687 -1.06624,-1.16443 0.036,0.2824 0.13051,0.71338 0.21005,0.95773 z m -0.13679,13.12108 c 0.0565,0.14768 0.2296,0.82463 0.38458,1.50432 0.15497,0.67969 0.33451,1.26926 0.39896,1.31015 0.52468,0.3329 1.69108,-0.49141 1.69069,-1.19483 -1.4e-4,-0.25362 -0.4506,-0.69291 -1.31186,-1.27933 -1.31233,-0.89356 -1.38197,-0.91395 -1.16237,-0.34031 z m 0.0646,-44.23858 c 0.053,-3e-5 0.53685,-0.27849 1.07512,-0.61881 1.36113,-0.86059 1.54722,-1.23679 0.93909,-1.89848 -0.49185,-0.53516 -1.40069,-0.73184 -1.48497,-0.32134 -0.26539,1.29268 -0.37781,1.7705 -0.48553,2.06374 -0.15434,0.42011 -0.17436,0.77497 -0.0437,0.77489 z m 0.0595,23.12058 c 0.0789,0.41124 0.14351,0.76019 0.14352,0.77545 5e-5,0.0826 0.5869,0.25242 0.77817,0.22523 0.1888,-0.0268 0.22824,-0.0949 0.25278,-0.43639 0.0269,-0.37426 -0.007,-0.44041 -0.44913,-0.88226 -0.26301,-0.26272 -0.56611,-0.47762 -0.67356,-0.47756 -0.10744,6e-5 -0.19534,0.0109 -0.19532,0.024 1e-5,0.0131 0.0646,0.36033 0.14354,0.77157 z m 0.60428,3.10139 c 0.41035,0.40126 0.81351,0.83687 0.8959,0.96801 l 0.14981,0.23843 0.116,-0.42841 c 0.13945,-0.51498 0.0738,-1.0834 -0.19798,-1.71421 -0.26082,-0.60536 -0.46372,-0.77894 -0.97791,-0.83661 -0.3614,-0.0405 -0.44198,-0.0159 -0.57621,0.17594 -0.0858,0.12269 -0.15598,0.36801 -0.15588,0.54517 1.6e-4,0.27612 0.10668,0.42624 0.74627,1.05168 z m -0.55692,1.34871 c 0.0596,0.0368 0.0953,0.12631 0.0795,0.19898 -0.0167,0.0764 0.0642,0.1462 0.19171,0.16551 0.12128,0.0184 0.24342,0.10518 0.27141,0.19293 0.20127,0.6308 0.2448,0.68416 0.55794,0.68398 0.55462,-3.1e-4 0.59143,-0.19072 0.19712,-1.01982 -0.37463,-0.78774 -0.97936,-1.46031 -1.31284,-1.46012 -0.18717,1e-4 -0.1966,0.0378 -0.1466,0.5859 0.0294,0.32218 0.10219,0.61587 0.16176,0.65264 z m 0.003,1.76585 c 0.10445,0.0944 0.42978,0.57315 0.72296,1.06385 0.30151,0.50464 0.5964,0.89215 0.67888,0.8921 0.0802,-4e-5 0.29172,-0.14613 0.47003,-0.32464 0.38571,-0.38614 0.42623,-0.82464 0.13532,-1.46457 -0.20532,-0.45166 -0.41338,-0.50428 -1.05219,-0.26606 -0.31115,0.11603 -0.35131,0.10823 -0.59065,-0.11473 -0.15146,-0.14109 -0.31784,-0.21577 -0.40558,-0.18204 -0.19911,0.0765 -0.18735,0.18946 0.0412,0.39609 z m 0.31838,-18.76075 c 0.18759,0.1905 0.25216,0.20751 0.42865,0.11293 0.26745,-0.14333 0.57809,-0.65385 0.57839,-0.95053 4.9e-4,-0.50227 -0.50443,-0.73126 -0.93957,-0.42611 -0.44266,0.31042 -0.47164,0.85325 -0.0675,1.26371 z m 0.074,23.90051 c 0.28858,0.36646 0.75301,0.34877 0.98081,-0.0374 0.1655,-0.28052 0.16454,-0.29724 -0.0353,-0.6202 -0.19657,-0.31765 -0.53094,-0.6178 -0.68816,-0.61771 -0.0408,2e-5 -0.15999,0.0859 -0.26488,0.19096 -0.25064,0.25092 -0.2471,0.76097 0.008,1.0843 z m 0.43957,-11.99683 c 1.11776,0.98412 2.00619,2.62024 2.5262,4.6522 0.10608,0.41448 0.31964,1.03574 0.47459,1.38059 0.58694,1.30621 0.81105,2.75476 0.56124,3.6276 -0.0661,0.23109 -0.0489,0.59742 0.0607,1.28647 0.1169,0.73541 0.14102,1.35869 0.10193,2.63388 -0.0543,1.77128 -0.13129,2.20008 -0.47321,2.63527 -0.18629,0.23709 -0.21434,0.39143 -0.22308,1.22759 -0.006,0.52603 -0.0619,1.26365 -0.12545,1.63917 -0.10097,0.59717 -0.0957,0.72088 0.042,0.98676 0.0866,0.1672 0.1774,0.28399 0.20183,0.25953 0.0926,-0.0927 0.6026,-2.95779 0.74433,-4.18186 0.19986,-1.72604 0.20076,-6.21071 0.002,-7.72372 -0.079,-0.60007 -0.31989,-1.92812 -0.5353,-2.95124 -0.82216,-3.90494 -1.29515,-4.89058 -2.68147,-5.58775 -0.35871,-0.1804 -0.65222,-0.36035 -0.65224,-0.39991 -2e-5,-0.0395 0.23338,-0.2117 0.51867,-0.38256 1.29742,-0.777 1.89899,-2.09418 2.86397,-6.27086 0.55315,-2.39418 0.6426,-3.44019 0.58747,-6.86989 -0.0493,-3.06798 -0.14515,-4.02811 -0.63662,-6.37853 -0.10818,-0.51734 -0.19669,-0.95735 -0.19671,-0.97781 -1e-5,-0.0205 -0.0362,-0.0372 -0.0803,-0.0372 -0.16619,1e-4 -0.28333,0.71477 -0.20332,1.2404 0.0439,0.28858 0.0833,1.01222 0.0874,1.60809 0.007,1.00043 0.0252,1.10432 0.23774,1.35663 0.12659,0.15027 0.27819,0.49655 0.33688,0.7695 0.18535,0.8619 0.23761,2.99813 0.0965,3.94558 -0.0703,0.4723 -0.11759,1.07339 -0.10502,1.33575 0.0928,1.93667 0.0631,2.25118 -0.30578,3.24399 -0.19502,0.52484 -0.46259,1.29778 -0.59459,1.71765 -0.64876,2.06345 -1.02604,3.09587 -1.29027,3.53075 -0.44322,0.72949 -0.91958,1.27779 -1.42761,1.6432 -0.25355,0.18237 -0.46097,0.38241 -0.46094,0.44452 4e-5,0.0621 0.24705,0.3304 0.54892,0.59617 z m 0.30499,-10.79202 c 0.17073,0.15433 0.21936,0.15867 0.44193,0.0394 0.38755,-0.20768 0.72959,-0.7089 0.65146,-0.95462 -0.0394,-0.12401 -0.0291,-0.18452 0.0258,-0.15064 0.14607,0.0902 0.32851,-0.41289 0.37526,-1.03474 0.0331,-0.43965 -0.0103,-0.72692 -0.18686,-1.23818 l -0.2299,-0.66571 -0.065,0.42736 c -0.1938,1.27444 -0.47886,2.21906 -0.82873,2.74621 -0.19857,0.29919 -0.36436,0.56952 -0.36842,0.60074 -0.004,0.0312 0.0789,0.13481 0.18445,0.23019 z m 0.283,21.30373 c 0.35844,0.52937 0.64109,1.40415 0.85359,2.64182 l 0.0819,0.47699 0.21389,-0.66797 c 0.24559,-0.76698 0.21637,-1.41221 -0.0913,-2.01477 -0.1019,-0.19958 -0.18529,-0.4149 -0.18533,-0.47849 -8e-5,-0.15296 -0.44833,-0.68017 -0.68652,-0.80748 -0.14603,-0.0781 -0.2297,-0.0634 -0.3713,0.0648 -0.10053,0.0911 -0.18277,0.18277 -0.18276,0.20375 1e-5,0.021 0.16552,0.28257 0.36779,0.5813 z m 0.42324,-31.02285 0.61683,-0.61751 -0.15308,-0.46137 c -0.0842,-0.25375 -0.18264,-0.49446 -0.21877,-0.5349 -0.0912,-0.10204 -0.84789,1.63472 -0.85556,1.96362 -0.006,0.25551 0.0218,0.23961 0.61058,-0.34984 z m -0.40126,3.72371 c 0.14611,0.14595 0.17973,0.13179 0.47217,-0.1989 0.37625,-0.42546 0.8348,-0.7244 1.11141,-0.72455 0.40152,-2.2e-4 0.52604,-0.38962 0.45727,-1.43004 -0.0635,-0.96079 -0.17558,-1.41915 -0.37855,-1.54805 -0.49639,-0.31525 -1.39281,0.4956 -1.74547,1.57885 -0.18436,0.56632 -0.12906,2.1107 0.0832,2.32269 z m 0.17216,35.17225 c 0.31776,0.64455 0.94399,1.3039 1.23826,1.30373 0.31089,-1.7e-4 0.49126,-0.23072 0.58894,-0.75275 0.11105,-0.59352 0.1256,-2.01218 0.0222,-2.16758 -0.0386,-0.058 -0.22812,-0.1344 -0.42118,-0.16977 -0.26081,-0.0478 -0.47364,-0.19833 -0.82811,-0.58574 -0.39039,-0.42668 -0.67522,-0.63402 -0.68337,-0.49746 -7.8e-4,0.0131 -0.0658,0.19562 -0.14442,0.40556 -0.23917,0.63841 -0.13926,1.71974 0.22765,2.46401 z m 0.14256,1.88713 0.40591,1.01189 0.1632,-0.5549 c 0.20844,-0.70873 0.20507,-0.82019 -0.0286,-0.94508 -0.10539,-0.0563 -0.36313,-0.31915 -0.57276,-0.58404 -0.36765,-0.46458 -0.38101,-0.47204 -0.3774,-0.21069 0.002,0.14901 0.1864,0.72628 0.40964,1.28282 z m -0.23837,-22.71696 c 0.14109,-7e-5 0.59512,-0.83233 0.55824,-1.02327 -0.0493,-0.25501 -0.24875,-0.20436 -0.46022,0.11686 -0.19415,0.29491 -0.26029,0.9065 -0.098,0.90641 z m 0.19066,4.75672 c 0.15385,0.30434 0.34808,0.81655 0.43163,1.13825 0.14916,0.57431 0.67164,1.54602 0.83123,1.54593 0.15084,-8e-5 0.0822,-0.43758 -0.19557,-1.24613 -0.39393,-1.14676 -0.40025,-1.15892 -0.57787,-1.11237 -0.12437,0.0326 -0.15122,-0.0125 -0.12305,-0.20691 0.0373,-0.25757 -0.30448,-0.86767 -0.52697,-0.94058 -0.19502,-0.0639 -0.13697,0.23313 0.1606,0.82181 z m 0.10916,-12.42804 c 0.11262,0.0999 0.28651,0.36405 0.38641,0.58701 0.0999,0.22296 0.21875,0.40536 0.26409,0.40533 0.13374,-7e-5 0.48063,-0.79954 0.48046,-1.10731 -9e-5,-0.16984 -0.10545,-0.40905 -0.2627,-0.59646 l -0.26254,-0.31291 -0.40529,0.34817 c -0.2229,0.19149 -0.40526,0.3811 -0.40524,0.42135 2e-5,0.0402 0.0922,0.15492 0.20481,0.25482 z m 0.21177,19.68851 c 0.37644,0.35429 0.52361,0.33883 0.80887,-0.085 0.23831,-0.35406 0.22558,-0.75193 -0.0409,-1.27733 -0.16677,-0.32885 -0.33274,-0.29052 -0.44532,0.10283 -0.0466,0.16295 -0.20813,0.41457 -0.35889,0.55917 -0.15075,0.14459 -0.27408,0.29562 -0.27406,0.33561 2e-5,0.04 0.13965,0.20412 0.31027,0.3647 z m -0.12265,-15.52276 c 0.12916,0.46409 0.30477,0.38121 0.74685,-0.35252 0.29286,-0.48606 0.31716,-0.58216 0.26306,-1.04031 -0.0666,-0.56413 -0.23533,-1.11285 -0.34214,-1.11279 -0.0386,2e-5 -0.22734,0.33286 -0.41944,0.73963 -0.36394,0.77065 -0.41811,1.15594 -0.24833,1.76599 z m 0.11849,12.09187 c 0.055,0.18363 0.20643,0.54577 0.33645,0.80477 l 0.23641,0.4709 0.14172,-0.328 c 0.078,-0.1804 0.16347,-0.58561 0.19004,-0.90047 0.045,-0.53357 0.0262,-0.60443 -0.2775,-1.04306 -0.1792,-0.25884 -0.37188,-0.48593 -0.42819,-0.50467 -0.14643,-0.0487 -0.40654,0.64478 -0.34814,0.92818 0.027,0.13117 0.0942,0.38873 0.14921,0.57235 z m 0.0229,-9.82496 c 0.08,0.0663 0.16793,0.0981 0.19537,0.0707 0.0804,-0.0804 0.67532,-1.80901 0.7394,-2.14819 0.0322,-0.17055 0.0275,-0.30841 -0.0106,-0.30634 -0.15722,0.009 -0.73158,0.92562 -0.88961,1.42045 -0.21204,0.66397 -0.21735,0.8119 -0.0346,0.96342 z m 0.38478,-11.27264 c 0.48259,1.30892 0.57648,1.46619 0.8288,1.38825 0.79054,-0.24418 0.89129,-0.47855 0.80082,-1.86294 -0.0909,-1.39135 -0.57866,-2.16147 -1.20449,-1.90183 -0.52957,0.2197 -0.91334,0.8383 -0.80158,1.2921 0.0258,0.10494 0.19525,0.59292 0.37645,1.08442 z m -0.0343,30.69797 c 0.10127,0.16409 0.32117,0.36461 0.48867,0.44562 0.42139,0.2038 0.75055,0.0221 1.04215,-0.57535 0.18263,-0.37417 0.22877,-0.64615 0.25735,-1.51701 0.0405,-1.23319 -0.0234,-1.41379 -0.55624,-1.57312 -0.56952,-0.17029 -0.52273,-0.23868 -1.34594,1.96741 -0.19383,0.51944 -0.16882,0.79421 0.11401,1.25245 z m 0.14284,-37.55475 c 0.13043,0.38351 0.24964,0.55941 0.44316,0.65389 0.43003,0.20995 0.55882,-0.008 0.60694,-1.02612 0.0403,-0.85226 -0.12216,-1.88142 -0.40041,-2.53705 l -0.12103,-0.28518 -0.17028,0.26019 c -0.0936,0.14311 -0.27457,0.5077 -0.40203,0.81021 -0.26773,0.6354 -0.2552,1.24529 0.0436,2.12406 z m -0.0117,44.67538 c 0.12454,0.30237 0.30321,0.66679 0.39704,0.80983 l 0.17061,0.26006 0.11762,-0.28871 c 0.34838,-0.85514 0.53604,-2.77558 0.3253,-3.32895 -0.0721,-0.18945 -0.15942,-0.24464 -0.38663,-0.24451 -0.24865,1.4e-4 -0.31612,0.0545 -0.44198,0.3562 -0.15711,0.37662 -0.39441,1.37453 -0.40318,1.69551 -0.003,0.10495 0.0967,0.4382 0.22122,0.74057 z m 0.38778,-33.81982 0.35129,0.42822 0.18746,-0.22788 c 0.37154,-0.45166 0.64981,-1.21607 0.70362,-1.93292 0.0289,-0.38562 0.0147,-0.72417 -0.0317,-0.75234 -0.0464,-0.0282 -0.30577,0.0318 -0.57642,0.13334 -0.47456,0.178 -0.49632,0.20229 -0.61086,0.6821 -0.0653,0.27363 -0.1747,0.62635 -0.24304,0.78381 -0.17394,0.40073 -0.1721,0.40813 0.21965,0.88567 z m 0.0357,22.25347 c 0.24395,0.71224 0.25053,0.72036 0.74238,0.91556 0.33066,0.13122 0.50932,0.16189 0.53541,0.0919 0.14982,-0.40187 -0.32937,-2.20969 -0.70319,-2.65284 l -0.18428,-0.21848 -0.39089,0.41083 c -0.28324,0.29769 -0.37088,0.45539 -0.31822,0.57262 0.04,0.089 0.18342,0.48516 0.31879,0.88041 z m 0.1298,-19.19789 c 0.0734,0.38367 0.15623,0.72034 0.18408,0.74817 0.13117,0.13102 0.74756,-1.61821 0.86268,-2.44817 0.0655,-0.4719 -0.0334,-0.96886 -0.20401,-1.02563 -0.12974,-0.0432 -0.55826,0.76549 -0.7966,1.50322 -0.0932,0.28866 -0.17181,0.52484 -0.17457,0.52484 -0.003,0 0.055,0.31391 0.12842,0.69757 z m 0.25984,16.26995 c 0.20078,0.64877 0.58788,1.2214 0.72946,1.07909 0.13534,-0.13605 0.071,-1.32135 -0.10399,-1.91553 -0.24844,-0.84358 -0.53811,-1.58186 -0.62066,-1.58182 -0.10831,6e-5 -0.28024,1.044 -0.23745,1.44182 0.0204,0.18946 0.12507,0.62886 0.23264,0.97644 z"
           id="path34" /></g></clipPath></defs><g
     inkscape:groupmode="layer"
     id="layer2"
     inkscape:label="background"
     style="fill:#000000" /><g
     inkscape:label="Calque 1"
     inkscape:groupmode="layer"
     id="layer1"><rect
       style="fill:#000000;stroke:#000000;stroke-width:0.2;stroke-dasharray:none;stroke-opacity:1"
       id="rect10"
       width="210.5511"
       height="298.53687"
       x="0.38421798"
       y="-1.5368741"
       clip-path="url(#clipPath27)"
       transform="matrix(-1.9877289,0.04226181,-0.04322853,-2.0331971,335.83352,450.59724)" /></g><script
     id="JessyInk"
     ns1:version="1.5.5">// Copyright 2008, 2009 Hannes Hochreiner
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.

// Set onload event handler.
window.onload = jessyInkInit;

// Creating a namespace dictionary. The standard Inkscape namespaces are taken from inkex.py.
var NSS = new Object();
NSS['sodipodi']='http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd';
NSS['cc']='http://web.resource.org/cc/';
NSS['svg']='http://www.w3.org/2000/svg';
NSS['dc']='http://purl.org/dc/elements/1.1/';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['inkscape']='http://www.inkscape.org/namespaces/inkscape';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['jessyink']='https://launchpad.net/jessyink';

// Keycodes.
var LEFT_KEY = 37; // cursor left keycode
var UP_KEY = 38; // cursor up keycode
var RIGHT_KEY = 39; // cursor right keycode
var DOWN_KEY = 40; // cursor down keycode
var PAGE_UP_KEY = 33; // page up keycode
var PAGE_DOWN_KEY = 34; // page down keycode
var HOME_KEY = 36; // home keycode
var END_KEY = 35; // end keycode
var ENTER_KEY = 13; // next slide
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

// Presentation modes.
var SLIDE_MODE = 1;
var INDEX_MODE = 2;
var DRAWING_MODE = 3;

// Mouse handler actions.
var MOUSE_UP = 1;
var MOUSE_DOWN = 2;
var MOUSE_MOVE = 3;
var MOUSE_WHEEL = 4;

// Parameters.
var ROOT_NODE = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;svg&quot;)[0];
var HEIGHT = 0;
var WIDTH = 0;
var INDEX_COLUMNS_DEFAULT = 4;
var INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
var INDEX_OFFSET = 0;
var STATE_START = -1;
var STATE_END = -2;
var BACKGROUND_COLOR = null;
var slides = new Array();

// Initialisation.
var currentMode = SLIDE_MODE;
var masterSlide = null;
var activeSlide = 0;
var activeEffect = 0;
var timeStep = 30; // 40 ms equal 25 frames per second.
var lastFrameTime = null;
var processingEffect = false;
var transCounter = 0;
var effectArray = 0;
var defaultTransitionInDict = new Object();
defaultTransitionInDict[&quot;name&quot;] = &quot;appear&quot;;
var defaultTransitionOutDict = new Object();
defaultTransitionOutDict[&quot;name&quot;] = &quot;appear&quot;;
var jessyInkInitialised = false;

// Initialise char and key code dictionaries.
var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

// Initialise mouse handler dictionary.
var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();

var progress_bar_visible = false;
var timer_elapsed = 0;
var timer_start = timer_elapsed;
var timer_duration = 15; // 15 minutes

var history_counter = 0;
var history_original_elements = new Array();
var history_presentation_elements = new Array();

var mouse_original_path = null;
var mouse_presentation_path = null;
var mouse_last_x = -1;
var mouse_last_y = -1;
var mouse_min_dist_sqr = 3 * 3;
var path_colour = &quot;red&quot;;
var path_width_default = 3;
var path_width = path_width_default;
var path_paint_width = path_width;

var number_of_added_slides = 0;

/** Initialisation function.
 *  The whole presentation is set-up in this function.
 */
function jessyInkInit()
{
    // Make sure we only execute this code once. Double execution can occur if the onload event handler is set
    // in the main svg tag as well (as was recommended in earlier versions). Executing this function twice does
    // not lead to any problems, but it takes more time.
    if (jessyInkInitialised)
        return;

    // Making the presentation scalable.
    var VIEWBOX = ROOT_NODE.getAttribute(&quot;viewBox&quot;);

    if (VIEWBOX)
    {
        WIDTH = ROOT_NODE.viewBox.animVal.width;
        HEIGHT = ROOT_NODE.viewBox.animVal.height;
    }
    else
    {
        HEIGHT = parseFloat(ROOT_NODE.getAttribute(&quot;height&quot;));
        WIDTH = parseFloat(ROOT_NODE.getAttribute(&quot;width&quot;));
        ROOT_NODE.setAttribute(&quot;viewBox&quot;, &quot;0 0 &quot; + WIDTH + &quot; &quot; + HEIGHT);
    }

    ROOT_NODE.setAttribute(&quot;width&quot;, &quot;100%&quot;);
    ROOT_NODE.setAttribute(&quot;height&quot;, &quot;100%&quot;);

    // Setting the background color.
    var namedViews = document.getElementsByTagNameNS(NSS[&quot;sodipodi&quot;], &quot;namedview&quot;);

    for (var counter = 0; counter &lt; namedViews.length; counter++)
    {
        if (namedViews[counter].hasAttribute(&quot;id&quot;) &amp;&amp; namedViews[counter].hasAttribute(&quot;pagecolor&quot;))
        {
            if (namedViews[counter].getAttribute(&quot;id&quot;) == &quot;base&quot;)
            {
                BACKGROUND_COLOR = namedViews[counter].getAttribute(&quot;pagecolor&quot;);
                var newAttribute = &quot;background-color:&quot; + BACKGROUND_COLOR + &quot;;&quot;;

                if (ROOT_NODE.hasAttribute(&quot;style&quot;))
                    newAttribute += ROOT_NODE.getAttribute(&quot;style&quot;);

                ROOT_NODE.setAttribute(&quot;style&quot;, newAttribute);
            }
        }
    }

    // Defining clip-path.
    var defsNodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

    if (defsNodes.length &gt; 0)
    {
        var existingClipPath = document.getElementById(&quot;jessyInkSlideClipPath&quot;);

        if (!existingClipPath)
        {
            var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
            var clipPath = document.createElementNS(NSS[&quot;svg&quot;], &quot;clipPath&quot;);

            rectNode.setAttribute(&quot;x&quot;, 0);
            rectNode.setAttribute(&quot;y&quot;, 0);
            rectNode.setAttribute(&quot;width&quot;, WIDTH);
            rectNode.setAttribute(&quot;height&quot;, HEIGHT);

            clipPath.setAttribute(&quot;id&quot;, &quot;jessyInkSlideClipPath&quot;);
            clipPath.setAttribute(&quot;clipPathUnits&quot;, &quot;userSpaceOnUse&quot;);

            clipPath.appendChild(rectNode);
            defsNodes[0].appendChild(clipPath);
        }
    }

    // Making a list of the slide and finding the master slide.
    var nodes = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    var tempSlides = new Array();
    var existingJessyInkPresentationLayer = null;

    for (var counter = 0; counter &lt; nodes.length; counter++)
    {
        if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) &amp;&amp; (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;) == &quot;layer&quot;))
        {
            if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;masterSlide&quot;) == &quot;masterSlide&quot;)
                masterSlide = nodes[counter];
            else if (nodes[counter].getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;) &amp;&amp; nodes[counter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;) == &quot;presentationLayer&quot;)
                existingJessyInkPresentationLayer = nodes[counter];
            else
                tempSlides.push(nodes[counter].getAttribute(&quot;id&quot;));
        }
        else if (nodes[counter].getAttributeNS(NSS['jessyink'], 'element'))
        {
            handleElement(nodes[counter]);
        }
    }

    // Hide master slide set default transitions.
    if (masterSlide)
    {
        masterSlide.style.display = &quot;none&quot;;

        if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
            defaultTransitionInDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));

        if (masterSlide.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
            defaultTransitionOutDict = propStrToDict(masterSlide.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
    }

    if (existingJessyInkPresentationLayer != null)
    {
        existingJessyInkPresentationLayer.parentNode.removeChild(existingJessyInkPresentationLayer);
    }

    // Set start slide.
    var hashObj = new LocationHash(window.location.hash);

    activeSlide = hashObj.slideNumber;
    activeEffect = hashObj.effectNumber;

    if (activeSlide &lt; 0)
        activeSlide = 0;
    else if (activeSlide &gt;= tempSlides.length)
        activeSlide = tempSlides.length - 1;

    var originalNode = document.getElementById(tempSlides[counter]);

    var JessyInkPresentationLayer = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;JessyInk Presentation Layer&quot;);
    JessyInkPresentationLayer.setAttributeNS(NSS[&quot;jessyink&quot;], &quot;presentationLayer&quot;, &quot;presentationLayer&quot;);
    JessyInkPresentationLayer.setAttribute(&quot;id&quot;, &quot;jessyink_presentation_layer&quot;);
    JessyInkPresentationLayer.style.display = &quot;inherit&quot;;
    ROOT_NODE.appendChild(JessyInkPresentationLayer);

    // Gathering all the information about the transitions and effects of the slides, set the background
    // from the master slide and substitute the auto-texts.
    for (var counter = 0; counter &lt; tempSlides.length; counter++)
    {
        var originalNode = document.getElementById(tempSlides[counter]);
        originalNode.style.display = &quot;none&quot;;
        var node = suffixNodeIds(originalNode.cloneNode(true), &quot;_&quot; + counter);
        JessyInkPresentationLayer.appendChild(node);
        slides[counter] = new Object();
        slides[counter][&quot;original_element&quot;] = originalNode;
        slides[counter][&quot;element&quot;] = node;

        // Set build in transition.
        slides[counter][&quot;transitionIn&quot;] = new Object();

        var dict;

        if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;))
            dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionIn&quot;));
        else
            dict = defaultTransitionInDict;

        slides[counter][&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
        slides[counter][&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

        for (key in dict)
            if (key != &quot;name&quot;)
                slides[counter][&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

        // Set build out transition.
        slides[counter][&quot;transitionOut&quot;] = new Object();

        if (node.hasAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;))
            dict = propStrToDict(node.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;transitionOut&quot;));
        else
            dict = defaultTransitionOutDict;

        slides[counter][&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
        slides[counter][&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

        for (key in dict)
            if (key != &quot;name&quot;)
                slides[counter][&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

        // Copy master slide content.
        if (masterSlide)
        {
            var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + counter);
            clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
            clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
            clonedNode.style.display = &quot;inherit&quot;;

            node.insertBefore(clonedNode, node.firstChild);
        }

        // Setting clip path.
        node.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);

        // Substitute auto texts.
        substituteAutoTexts(node, node.getAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;), counter + 1, tempSlides.length);

        node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
        node.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);

        // Set effects.
        var tempEffects = new Array();
        var groups = new Object();

        for (var IOCounter = 0; IOCounter &lt;= 1; IOCounter++)
        {
            var propName = &quot;&quot;;
            var dir = 0;

            if (IOCounter == 0)
            {
                propName = &quot;effectIn&quot;;
                dir = 1;
            }
            else if (IOCounter == 1)
            {
                propName = &quot;effectOut&quot;;
                dir = -1;
            }

            var effects = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], propName);

            for (var effectCounter = 0; effectCounter &lt; effects.length; effectCounter++)
            {
                var element = document.getElementById(effects[effectCounter]);
                var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], propName));

                // Put every element that has an effect associated with it, into its own group.
                // Unless of course, we already put it into its own group.
                if (!(groups[element.id]))
                {
                    var newGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

                    element.parentNode.insertBefore(newGroup, element);
                    newGroup.appendChild(element.parentNode.removeChild(element));
                    groups[element.id] = newGroup;
                }

                var effectDict = new Object();

                effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
                effectDict[&quot;dir&quot;] = dir;
                effectDict[&quot;element&quot;] = groups[element.id];

                for (var option in dict)
                {
                    if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
                    {
                        if (!effectDict[&quot;options&quot;])
                            effectDict[&quot;options&quot;] = new Object();

                        effectDict[&quot;options&quot;][option] = dict[option];
                    }
                }

                if (!tempEffects[dict[&quot;order&quot;]])
                    tempEffects[dict[&quot;order&quot;]] = new Array();

                tempEffects[dict[&quot;order&quot;]][tempEffects[dict[&quot;order&quot;]].length] = effectDict;
            }
        }

        // Make invisible, but keep in rendering tree to ensure that bounding box can be calculated.
        node.setAttribute(&quot;opacity&quot;,0);
        node.style.display = &quot;inherit&quot;;

        // Create a transform group.
        var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

        // Add content to transform group.
        while (node.firstChild)
            transformGroup.appendChild(node.firstChild);

        // Transfer the transform attribute from the node to the transform group.
        if (node.getAttribute(&quot;transform&quot;))
        {
            transformGroup.setAttribute(&quot;transform&quot;, node.getAttribute(&quot;transform&quot;));
            node.removeAttribute(&quot;transform&quot;);
        }

        // Create a view group.
        var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

        viewGroup.appendChild(transformGroup);
        slides[counter][&quot;viewGroup&quot;] = node.appendChild(viewGroup);

        // Insert background.
        if (BACKGROUND_COLOR != null)
        {
            var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

            rectNode.setAttribute(&quot;x&quot;, 0);
            rectNode.setAttribute(&quot;y&quot;, 0);
            rectNode.setAttribute(&quot;width&quot;, WIDTH);
            rectNode.setAttribute(&quot;height&quot;, HEIGHT);
            rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + counter);
            rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

            slides[counter][&quot;viewGroup&quot;].insertBefore(rectNode, slides[counter][&quot;viewGroup&quot;].firstChild);
        }

        // Set views.
        var tempViews = new Array();
        var views = getElementsByPropertyNS(node, NSS[&quot;jessyink&quot;], &quot;view&quot;);
        var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

        // Set initial view even if there are no other views.
        slides[counter][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
        slides[counter].initialView = matrixOld.toAttribute();

        for (var viewCounter = 0; viewCounter &lt; views.length; viewCounter++)
        {
            var element = document.getElementById(views[viewCounter]);
            var dict = propStrToDict(element.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;view&quot;));

            if (dict[&quot;order&quot;] == 0)
            {
                matrixOld = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());
                slides[counter].initialView = matrixOld.toAttribute();
            }
            else
            {
                var effectDict = new Object();

                effectDict[&quot;effect&quot;] = dict[&quot;name&quot;];
                effectDict[&quot;dir&quot;] = 1;
                effectDict[&quot;element&quot;] = slides[counter][&quot;viewGroup&quot;];
                effectDict[&quot;order&quot;] = dict[&quot;order&quot;];

                for (var option in dict)
                {
                    if ((option != &quot;name&quot;) &amp;&amp; (option != &quot;order&quot;))
                    {
                        if (!effectDict[&quot;options&quot;])
                            effectDict[&quot;options&quot;] = new Object();

                        effectDict[&quot;options&quot;][option] = dict[option];
                    }
                }

                effectDict[&quot;options&quot;][&quot;matrixNew&quot;] = pointMatrixToTransformation(rectToMatrix(element)).mult((new matrixSVG()).fromSVGMatrix(slides[counter].viewGroup.getScreenCTM()).inv().mult((new matrixSVG()).fromSVGMatrix(element.parentNode.getScreenCTM())).inv());

                tempViews[dict[&quot;order&quot;]] = effectDict;
            }

            // Remove element.
            element.parentNode.removeChild(element);
        }

        // Consolidate view array and append it to the effect array.
        if (tempViews.length &gt; 0)
        {
            for (var viewCounter = 0; viewCounter &lt; tempViews.length; viewCounter++)
            {
                if (tempViews[viewCounter])
                {
                    tempViews[viewCounter][&quot;options&quot;][&quot;matrixOld&quot;] = matrixOld;
                    matrixOld = tempViews[viewCounter][&quot;options&quot;][&quot;matrixNew&quot;];

                    if (!tempEffects[tempViews[viewCounter][&quot;order&quot;]])
                        tempEffects[tempViews[viewCounter][&quot;order&quot;]] = new Array();

                    tempEffects[tempViews[viewCounter][&quot;order&quot;]][tempEffects[tempViews[viewCounter][&quot;order&quot;]].length] = tempViews[viewCounter];
                }
            }
        }

        // Set consolidated effect array.
        if (tempEffects.length &gt; 0)
        {
            slides[counter][&quot;effects&quot;] = new Array();

            for (var effectCounter = 0; effectCounter &lt; tempEffects.length; effectCounter++)
            {
                if (tempEffects[effectCounter])
                    slides[counter][&quot;effects&quot;][slides[counter][&quot;effects&quot;].length] = tempEffects[effectCounter];
            }
        }

        node.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);

        // Set visibility for initial state.
        if (counter == activeSlide)
        {
            node.style.display = &quot;inherit&quot;;
            node.setAttribute(&quot;opacity&quot;,1);
        }
        else
        {
            node.style.display = &quot;none&quot;;
            node.setAttribute(&quot;opacity&quot;,0);
        }
    }

    // Set key handler.
    var jessyInkObjects = document.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    for (var counter = 0; counter &lt; jessyInkObjects.length; counter++)
    {
        var elem = jessyInkObjects[counter];

        if (elem.getAttributeNS(NSS[&quot;jessyink&quot;], &quot;customKeyBindings&quot;))
        {
            if (elem.getCustomKeyBindings != undefined)
                keyCodeDictionary = elem.getCustomKeyBindings();

            if (elem.getCustomCharBindings != undefined)
                charCodeDictionary = elem.getCustomCharBindings();
        }
    }

    // Set mouse handler.
    var jessyInkMouseHandler = document.getElementsByTagNameNS(NSS[&quot;jessyink&quot;], &quot;mousehandler&quot;);

    for (var counter = 0; counter &lt; jessyInkMouseHandler.length; counter++)
    {
        var elem = jessyInkMouseHandler[counter];

        if (elem.getMouseHandler != undefined)
        {
            var tempDict = elem.getMouseHandler();

            for (mode in tempDict)
            {
                if (!mouseHandlerDictionary[mode])
                    mouseHandlerDictionary[mode] = new Object();

                for (handler in tempDict[mode])
                    mouseHandlerDictionary[mode][handler] = tempDict[mode][handler];
            }
        }
    }

    // Check effect number.
    if ((activeEffect &lt; 0) || (!slides[activeSlide].effects))
    {
        activeEffect = 0;
    }
    else if (activeEffect &gt; slides[activeSlide].effects.length)
    {
        activeEffect = slides[activeSlide].effects.length;
    }

    createProgressBar(JessyInkPresentationLayer);
    hideProgressBar();
    setProgressBarValue(activeSlide);
    setTimeIndicatorValue(0);
    setInterval(&quot;updateTimer()&quot;, 1000);
    setSlideToState(activeSlide, activeEffect);
    jessyInkInitialised = true;
}

/** Function to substitute the auto-texts.
 *
 *  @param node the node
 *  @param slideName name of the slide the node is on
 *  @param slideNumber number of the slide the node is on
 *  @param numberOfSlides number of slides in the presentation
 */
function substituteAutoTexts(node, slideName, slideNumber, numberOfSlides)
{
    var texts = node.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;tspan&quot;);

    for (var textCounter = 0; textCounter &lt; texts.length; textCounter++)
    {
        if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideNumber&quot;)
            texts[textCounter].firstChild.nodeValue = slideNumber;
        else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;numberOfSlides&quot;)
            texts[textCounter].firstChild.nodeValue = numberOfSlides;
        else if (texts[textCounter].getAttributeNS(NSS[&quot;jessyink&quot;], &quot;autoText&quot;) == &quot;slideTitle&quot;)
            texts[textCounter].firstChild.nodeValue = slideName;
    }
}

/** Convenience function to get an element depending on whether it has a property with a particular name.
 *    This function emulates some dearly missed XPath functionality.
 *
 *  @param node the node
 *  @param namespace namespace of the attribute
 *  @param name attribute name
 */
function getElementsByPropertyNS(node, namespace, name)
{
    var elems = new Array();

    if (node.getAttributeNS(namespace, name))
        elems.push(node.getAttribute(&quot;id&quot;));

    for (var counter = 0; counter &lt; node.childNodes.length; counter++)
    {
        if (node.childNodes[counter].nodeType == 1)
            elems = elems.concat(getElementsByPropertyNS(node.childNodes[counter], namespace, name));
    }

    return elems;
}

/** Function to dispatch the next effect, if there is none left, change the slide.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function dispatchEffects(dir)
{
    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (dir == 1)
        {
            effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
            activeEffect += dir;
        }
        else if (dir == -1)
        {
            activeEffect += dir;
            effectArray = slides[activeSlide][&quot;effects&quot;][activeEffect];
        }

        transCounter = 0;
        startTime = (new Date()).getTime();
        lastFrameTime = null;
        effect(dir);
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to skip effects and directly either put the slide into start or end state or change slides.
 *
 *  @param dir direction of the change (1 = forwards, -1 = backwards)
 */
function skipEffects(dir)
{
    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (((dir == 1) &amp;&amp; (activeEffect &lt; slides[activeSlide][&quot;effects&quot;].length)) || ((dir == -1) &amp;&amp; (activeEffect &gt; 0))))
    {
        processingEffect = true;

        if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == 1))
            activeEffect = slides[activeSlide][&quot;effects&quot;].length;
        else
            activeEffect = 0;

        if (dir == 1)
            setSlideToState(activeSlide, STATE_END);
        else
            setSlideToState(activeSlide, STATE_START);

        processingEffect = false;
    }
    else if (((dir == 1) &amp;&amp; (activeSlide &lt; (slides.length - 1))) || (((dir == -1) &amp;&amp; (activeSlide &gt; 0))))
    {
        changeSlide(dir);
    }
}

/** Function to change between slides.
 *
 *  @param dir direction (1 = forwards, -1 = backwards)
 */
function changeSlide(dir)
{
    processingEffect = true;
    effectArray = new Array();

    effectArray[0] = new Object();
    if (dir == 1)
    {
        effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
        effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
        effectArray[0][&quot;dir&quot;] = -1;
    }
    else if (dir == -1)
    {
        effectArray[0][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
        effectArray[0][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
        effectArray[0][&quot;dir&quot;] = 1;
    }
    effectArray[0][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

    activeSlide += dir;
    setProgressBarValue(activeSlide);

    effectArray[1] = new Object();

    if (dir == 1)
    {
        effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;name&quot;];
        effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionIn&quot;][&quot;options&quot;];
        effectArray[1][&quot;dir&quot;] = 1;
    }
    else if (dir == -1)
    {
        effectArray[1][&quot;effect&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;name&quot;];
        effectArray[1][&quot;options&quot;] = slides[activeSlide][&quot;transitionOut&quot;][&quot;options&quot;];
        effectArray[1][&quot;dir&quot;] = -1;
    }

    effectArray[1][&quot;element&quot;] = slides[activeSlide][&quot;element&quot;];

    if (slides[activeSlide][&quot;effects&quot;] &amp;&amp; (dir == -1))
        activeEffect = slides[activeSlide][&quot;effects&quot;].length;
    else
        activeEffect = 0;

    if (dir == -1)
        setSlideToState(activeSlide, STATE_END);
    else
        setSlideToState(activeSlide, STATE_START);

    transCounter = 0;
    startTime = (new Date()).getTime();
    lastFrameTime = null;
    effect(dir);
}

/** Function to toggle between index and slide mode.
*/
function toggleSlideIndex()
{
    var suspendHandle = ROOT_NODE.suspendRedraw(500);

    if (currentMode == SLIDE_MODE)
    {
        hideProgressBar();
        INDEX_OFFSET = -1;
        indexSetPageSlide(activeSlide);
        currentMode = INDEX_MODE;
    }
    else if (currentMode == INDEX_MODE)
    {
        for (var counter = 0; counter &lt; slides.length; counter++)
        {
            slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(1)&quot;);

            if (counter == activeSlide)
            {
                slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
                slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
                activeEffect = 0;
            }
            else
            {
                slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
                slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
            }
        }
        currentMode = SLIDE_MODE;
        setSlideToState(activeSlide, STATE_START);
        setProgressBarValue(activeSlide);

        if (progress_bar_visible)
        {
            showProgressBar();
        }
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to run an effect.
 *
 *  @param dir direction in which to play the effect (1 = forwards, -1 = backwards)
 */
function effect(dir)
{
    var done = true;

    var suspendHandle = ROOT_NODE.suspendRedraw(200);

    for (var counter = 0; counter &lt; effectArray.length; counter++)
    {
        if (effectArray[counter][&quot;effect&quot;] == &quot;fade&quot;)
            done &amp;= fade(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;appear&quot;)
            done &amp;= appear(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;pop&quot;)
            done &amp;= pop(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
        else if (effectArray[counter][&quot;effect&quot;] == &quot;view&quot;)
            done &amp;= view(parseInt(effectArray[counter][&quot;dir&quot;]) * dir, effectArray[counter][&quot;element&quot;], transCounter, effectArray[counter][&quot;options&quot;]);
    }

    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();

    if (!done)
    {
        var currentTime = (new Date()).getTime();
        var timeDiff = 1;

        transCounter = currentTime - startTime;

        if (lastFrameTime != null)
        {
            timeDiff = timeStep - (currentTime - lastFrameTime);

            if (timeDiff &lt;= 0)
                timeDiff = 1;
        }

        lastFrameTime = currentTime;

        window.setTimeout(&quot;effect(&quot; + dir + &quot;)&quot;, timeDiff);
    }
    else
    {
        window.location.hash = (activeSlide + 1) + '_' + activeEffect;
        processingEffect = false;
    }
}

/** Function to display the index sheet.
 *
 *  @param offsetNumber offset number
 */
function displayIndex(offsetNumber)
{
    var offsetX = 0;
    var offsetY = 0;

    if (offsetNumber &lt; 0)
        offsetNumber = 0;
    else if (offsetNumber &gt;= slides.length)
        offsetNumber = slides.length - 1;

    for (var counter = 0; counter &lt; slides.length; counter++)
    {
        if ((counter &lt; offsetNumber) || (counter &gt; offsetNumber + INDEX_COLUMNS * INDEX_COLUMNS - 1))
        {
            slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
            slides[counter][&quot;element&quot;].style.display = &quot;none&quot;;
        }
        else
        {
            offsetX = ((counter - offsetNumber) % INDEX_COLUMNS) * WIDTH;
            offsetY = Math.floor((counter - offsetNumber) / INDEX_COLUMNS) * HEIGHT;

            slides[counter][&quot;element&quot;].setAttribute(&quot;transform&quot;,&quot;scale(&quot;+1/INDEX_COLUMNS+&quot;) translate(&quot;+offsetX+&quot;,&quot;+offsetY+&quot;)&quot;);
            slides[counter][&quot;element&quot;].style.display = &quot;inherit&quot;;
            slides[counter][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);
        }

        setSlideToState(counter, STATE_END);
    }

    //do we need to save the current offset?
    if (INDEX_OFFSET != offsetNumber)
        INDEX_OFFSET = offsetNumber;
}

/** Function to set the active slide in the slide view.
 *
 *  @param nbr index of the active slide
 */
function slideSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0);
    slides[activeSlide][&quot;element&quot;].style.display = &quot;none&quot;;

    activeSlide = parseInt(nbr);

    setSlideToState(activeSlide, STATE_START);
    slides[activeSlide][&quot;element&quot;].style.display = &quot;inherit&quot;;
    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);

    activeEffect = 0;
    setProgressBarValue(nbr);
}

/** Function to set the active slide in the index view.
 *
 *  @param nbr index of the active slide
 */
function indexSetActiveSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,0.5);

    activeSlide = parseInt(nbr);
    window.location.hash = (activeSlide + 1) + '_0';

    slides[activeSlide][&quot;element&quot;].setAttribute(&quot;opacity&quot;,1);
}

/** Function to set the page and active slide in index view.
 *
 *  @param nbr index of the active slide
 *
 *  NOTE: To force a redraw,
 *  set INDEX_OFFSET to -1 before calling indexSetPageSlide().
 *
 *  This is necessary for zooming (otherwise the index might not
 *  get redrawn) and when switching to index mode.
 *
 *  INDEX_OFFSET = -1
 *  indexSetPageSlide(activeSlide);
 */
function indexSetPageSlide(nbr)
{
    if (nbr &gt;= slides.length)
        nbr = slides.length - 1;
    else if (nbr &lt; 0)
        nbr = 0;

    //calculate the offset
    var offset = nbr - nbr % (INDEX_COLUMNS * INDEX_COLUMNS);

    if (offset &lt; 0)
        offset = 0;

    //if different from kept offset, then record and change the page
    if (offset != INDEX_OFFSET)
    {
        INDEX_OFFSET = offset;
        displayIndex(INDEX_OFFSET);
    }

    //set the active slide
    indexSetActiveSlide(nbr);
}

/** Event handler for key press.
 *
 *  @param e the event
 */
function keydown(e)
{
    if (!e)
        e = window.event;

    code = e.keyCode || e.charCode;

    if (!processingEffect &amp;&amp; keyCodeDictionary[currentMode] &amp;&amp; keyCodeDictionary[currentMode][code])
        return keyCodeDictionary[currentMode][code]();
    else
        document.onkeypress = keypress;
}
// Set event handler for key down.
document.onkeydown = keydown;

/** Event handler for key press.
 *
 *  @param e the event
 */
function keypress(e)
{
    document.onkeypress = null;

    if (!e)
        e = window.event;

    str = String.fromCharCode(e.keyCode || e.charCode);

    if (!processingEffect &amp;&amp; charCodeDictionary[currentMode] &amp;&amp; charCodeDictionary[currentMode][str])
        return charCodeDictionary[currentMode][str]();
}

/** Function to supply the default char code dictionary.
 *
 * @returns default char code dictionary
 */
function getDefaultCharCodeDictionary()
{
    var charCodeDict = new Object();

    charCodeDict[SLIDE_MODE] = new Object();
    charCodeDict[INDEX_MODE] = new Object();
    charCodeDict[DRAWING_MODE] = new Object();

    charCodeDict[SLIDE_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
    charCodeDict[SLIDE_MODE][&quot;d&quot;] = function () { return slideSwitchToDrawingMode(); };
    charCodeDict[SLIDE_MODE][&quot;D&quot;] = function () { return slideQueryDuration(); };
    charCodeDict[SLIDE_MODE][&quot;n&quot;] = function () { return slideAddSlide(activeSlide); };
    charCodeDict[SLIDE_MODE][&quot;p&quot;] = function () { return slideToggleProgressBarVisibility(); };
    charCodeDict[SLIDE_MODE][&quot;t&quot;] = function () { return slideResetTimer(); };
    charCodeDict[SLIDE_MODE][&quot;e&quot;] = function () { return slideUpdateExportLayer(); };

    charCodeDict[DRAWING_MODE][&quot;d&quot;] = function () { return drawingSwitchToSlideMode(); };
    charCodeDict[DRAWING_MODE][&quot;0&quot;] = function () { return drawingResetPathWidth(); };
    charCodeDict[DRAWING_MODE][&quot;1&quot;] = function () { return drawingSetPathWidth(1.0); };
    charCodeDict[DRAWING_MODE][&quot;3&quot;] = function () { return drawingSetPathWidth(3.0); };
    charCodeDict[DRAWING_MODE][&quot;5&quot;] = function () { return drawingSetPathWidth(5.0); };
    charCodeDict[DRAWING_MODE][&quot;7&quot;] = function () { return drawingSetPathWidth(7.0); };
    charCodeDict[DRAWING_MODE][&quot;9&quot;] = function () { return drawingSetPathWidth(9.0); };
    charCodeDict[DRAWING_MODE][&quot;b&quot;] = function () { return drawingSetPathColour(&quot;blue&quot;); };
    charCodeDict[DRAWING_MODE][&quot;c&quot;] = function () { return drawingSetPathColour(&quot;cyan&quot;); };
    charCodeDict[DRAWING_MODE][&quot;g&quot;] = function () { return drawingSetPathColour(&quot;green&quot;); };
    charCodeDict[DRAWING_MODE][&quot;k&quot;] = function () { return drawingSetPathColour(&quot;black&quot;); };
    charCodeDict[DRAWING_MODE][&quot;m&quot;] = function () { return drawingSetPathColour(&quot;magenta&quot;); };
    charCodeDict[DRAWING_MODE][&quot;o&quot;] = function () { return drawingSetPathColour(&quot;orange&quot;); };
    charCodeDict[DRAWING_MODE][&quot;r&quot;] = function () { return drawingSetPathColour(&quot;red&quot;); };
    charCodeDict[DRAWING_MODE][&quot;w&quot;] = function () { return drawingSetPathColour(&quot;white&quot;); };
    charCodeDict[DRAWING_MODE][&quot;y&quot;] = function () { return drawingSetPathColour(&quot;yellow&quot;); };
    charCodeDict[DRAWING_MODE][&quot;z&quot;] = function () { return drawingUndo(); };

    charCodeDict[INDEX_MODE][&quot;i&quot;] = function () { return toggleSlideIndex(); };
    charCodeDict[INDEX_MODE][&quot;-&quot;] = function () { return indexDecreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;=&quot;] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;+&quot;] = function () { return indexIncreaseNumberOfColumns(); };
    charCodeDict[INDEX_MODE][&quot;0&quot;] = function () { return indexResetNumberOfColumns(); };

    return charCodeDict;
}

/** Function to supply the default key code dictionary.
 *
 * @returns default key code dictionary
 */
function getDefaultKeyCodeDictionary()
{
    var keyCodeDict = new Object();

    keyCodeDict[SLIDE_MODE] = new Object();
    keyCodeDict[INDEX_MODE] = new Object();
    keyCodeDict[DRAWING_MODE] = new Object();

    keyCodeDict[SLIDE_MODE][LEFT_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][RIGHT_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][UP_KEY] = function() { return skipEffects(-1); };
    keyCodeDict[SLIDE_MODE][DOWN_KEY] = function() { return skipEffects(1); };
    keyCodeDict[SLIDE_MODE][PAGE_UP_KEY] = function() { return dispatchEffects(-1); };
    keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY] = function() { return dispatchEffects(1); };
    keyCodeDict[SLIDE_MODE][HOME_KEY] = function() { return slideSetActiveSlide(0); };
    keyCodeDict[SLIDE_MODE][END_KEY] = function() { return slideSetActiveSlide(slides.length - 1); };
    keyCodeDict[SLIDE_MODE][SPACE_KEY] = function() { return dispatchEffects(1); };

    keyCodeDict[INDEX_MODE][LEFT_KEY] = function() { return indexSetPageSlide(activeSlide - 1); };
    keyCodeDict[INDEX_MODE][RIGHT_KEY] = function() { return indexSetPageSlide(activeSlide + 1); };
    keyCodeDict[INDEX_MODE][UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_UP_KEY] = function() { return indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY] = function() { return indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS); };
    keyCodeDict[INDEX_MODE][HOME_KEY] = function() { return indexSetPageSlide(0); };
    keyCodeDict[INDEX_MODE][END_KEY] = function() { return indexSetPageSlide(slides.length - 1); };
    keyCodeDict[INDEX_MODE][ENTER_KEY] = function() { return toggleSlideIndex(); };

    keyCodeDict[DRAWING_MODE][ESCAPE_KEY] = function () { return drawingSwitchToSlideMode(); };

    return keyCodeDict;
}

/** Function to handle all mouse events.
 *
 *    @param    evnt    event
 *    @param    action    type of event (e.g. mouse up, mouse wheel)
 */
function mouseHandlerDispatch(evnt, action)
{
    if (!evnt)
        evnt = window.event;

    var retVal = true;

    if (!processingEffect &amp;&amp; mouseHandlerDictionary[currentMode] &amp;&amp; mouseHandlerDictionary[currentMode][action])
    {
        var subRetVal = mouseHandlerDictionary[currentMode][action](evnt);

        if (subRetVal != null &amp;&amp; subRetVal != undefined)
            retVal = subRetVal;
    }

    if (evnt.preventDefault &amp;&amp; !retVal)
        evnt.preventDefault();

    evnt.returnValue = retVal;

    return retVal;
}

// Set mouse event handler.
document.onmousedown = function(e) { return mouseHandlerDispatch(e, MOUSE_DOWN); };
document.onmouseup = function(e) { return mouseHandlerDispatch(e, MOUSE_UP); };
document.onmousemove = function(e) { return mouseHandlerDispatch(e, MOUSE_MOVE); };

// Moz
if (window.addEventListener)
{
    window.addEventListener('DOMMouseScroll', function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); }, false);
}

// Opera Safari OK - may not work in IE
window.onmousewheel = function(e) { return mouseHandlerDispatch(e, MOUSE_WHEEL); };

/** Function to supply the default mouse handler dictionary.
 *
 * @returns default mouse handler dictionary
 */
function getDefaultMouseHandlerDictionary()
{
    var mouseHandlerDict = new Object();

    mouseHandlerDict[SLIDE_MODE] = new Object();
    mouseHandlerDict[INDEX_MODE] = new Object();
    mouseHandlerDict[DRAWING_MODE] = new Object();

    mouseHandlerDict[SLIDE_MODE][MOUSE_DOWN] = function(evnt) { return dispatchEffects(1); };
    mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL] = function(evnt) { return slideMousewheel(evnt); };

    mouseHandlerDict[INDEX_MODE][MOUSE_DOWN] = function(evnt) { return toggleSlideIndex(); };

    mouseHandlerDict[DRAWING_MODE][MOUSE_DOWN] = function(evnt) { return drawingMousedown(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_UP] = function(evnt) { return drawingMouseup(evnt); };
    mouseHandlerDict[DRAWING_MODE][MOUSE_MOVE] = function(evnt) { return drawingMousemove(evnt); };

    return mouseHandlerDict;
}

/** Function to switch from slide mode to drawing mode.
*/
function slideSwitchToDrawingMode()
{
    currentMode = DRAWING_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute(&quot;style&quot;))
        tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
    else
        tempDict = new Object();

    tempDict[&quot;cursor&quot;] = &quot;crosshair&quot;;
    ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to switch from drawing mode to slide mode.
*/
function drawingSwitchToSlideMode()
{
    currentMode = SLIDE_MODE;

    var tempDict;

    if (ROOT_NODE.hasAttribute(&quot;style&quot;))
        tempDict = propStrToDict(ROOT_NODE.getAttribute(&quot;style&quot;));
    else
        tempDict = new Object();

    tempDict[&quot;cursor&quot;] = &quot;auto&quot;;
    ROOT_NODE.setAttribute(&quot;style&quot;, dictToPropStr(tempDict));
}

/** Function to decrease the number of columns in index mode.
*/
function indexDecreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &gt;= 3)
    {
        INDEX_COLUMNS -= 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to increase the number of columns in index mode.
*/
function indexIncreaseNumberOfColumns()
{
    if (INDEX_COLUMNS &lt; 7)
    {
        INDEX_COLUMNS += 1;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset the number of columns in index mode.
*/
function indexResetNumberOfColumns()
{
    if (INDEX_COLUMNS != INDEX_COLUMNS_DEFAULT)
    {
        INDEX_COLUMNS = INDEX_COLUMNS_DEFAULT;
        INDEX_OFFSET = -1
            indexSetPageSlide(activeSlide);
    }
}

/** Function to reset path width in drawing mode.
*/
function drawingResetPathWidth()
{
    path_width = path_width_default;
    set_path_paint_width();
}

/** Function to set path width in drawing mode.
 *
 * @param width new path width
 */
function drawingSetPathWidth(width)
{
    path_width = width;
    set_path_paint_width();
}

/** Function to set path colour in drawing mode.
 *
 * @param colour new path colour
 */
function drawingSetPathColour(colour)
{
    path_colour = colour;
}

/** Function to query the duration of the presentation from the user in slide mode.
*/
function slideQueryDuration()
{
    var new_duration = prompt(&quot;Length of presentation in minutes?&quot;, timer_duration);

    if ((new_duration != null) &amp;&amp; (new_duration != ''))
    {
        timer_duration = new_duration;
    }

    updateTimer();
}

/** Function to add new slide in slide mode.
 *
 * @param afterSlide after which slide to insert the new one
 */
function slideAddSlide(afterSlide)
{
    addSlide(afterSlide);
    slideSetActiveSlide(afterSlide + 1);
    updateTimer();
}

/** Function to toggle the visibility of the progress bar in slide mode.
*/
function slideToggleProgressBarVisibility()
{
    if (progress_bar_visible)
    {
        progress_bar_visible = false;
        hideProgressBar();
    }
    else
    {
        progress_bar_visible = true;
        showProgressBar();
    }
}

/** Function to reset the timer in slide mode.
*/
function slideResetTimer()
{
    timer_start = timer_elapsed;
    updateTimer();
}

/** Convenience function to pad a string with zero in front up to a certain length.
 */
function padString(str, len)
{
    var outStr = str;

    while (outStr.length &lt; len)
    {
        outStr = '0' + outStr;
    }

    return outStr;
}

/** Function to update the export layer.
 */
function slideUpdateExportLayer()
{
    // Suspend redraw since we are going to mess with the slides.
    var suspendHandle = ROOT_NODE.suspendRedraw(2000);

    var tmpActiveSlide = activeSlide;
    var tmpActiveEffect = activeEffect;
    var exportedLayers = new Array();

    for (var counterSlides = 0; counterSlides &lt; slides.length; counterSlides++)
    {
        var exportNode;

        setSlideToState(counterSlides, STATE_START);

        var maxEffect = 0;

        if (slides[counterSlides].effects)
        {
            maxEffect = slides[counterSlides].effects.length;
        }

        exportNode = slides[counterSlides].element.cloneNode(true);
        exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
        exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString(&quot;0&quot;, maxEffect.toString().length));

        exportedLayers.push(exportNode);

        if (slides[counterSlides][&quot;effects&quot;])
        {
            for (var counter = 0; counter &lt; slides[counterSlides][&quot;effects&quot;].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[counterSlides][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[counterSlides][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(parseInt(effect[&quot;dir&quot;]), effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }

                var layerName = &quot;slide_&quot; + padString((counterSlides + 1).toString(), slides.length.toString().length) + &quot;_effect_&quot; + padString((counter + 1).toString(), maxEffect.toString().length);
                exportNode = slides[counterSlides].element.cloneNode(true);
                exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
                exportNode.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, layerName);
                exportNode.setAttribute(&quot;id&quot;, layerName);

                exportedLayers.push(exportNode);
            }
        }
    }

    activeSlide = tmpActiveSlide;
    activeEffect = tmpActiveEffect;
    setSlideToState(activeSlide, activeEffect);

    // Copy image.
    var newDoc = document.documentElement.cloneNode(true);

    // Delete viewbox form new imag and set width and height.
    newDoc.removeAttribute('viewbox');
    newDoc.setAttribute('width', WIDTH);
    newDoc.setAttribute('height', HEIGHT);

    // Delete all layers and script elements.
    var nodesToBeRemoved = new Array();

    for (var childCounter = 0; childCounter &lt;  newDoc.childNodes.length; childCounter++)
    {
        var child = newDoc.childNodes[childCounter];

        if (child.nodeType == 1)
        {
            if ((child.nodeName.toUpperCase() == 'G') || (child.nodeName.toUpperCase() == 'SCRIPT'))
            {
                nodesToBeRemoved.push(child);
            }
        }
    }

    for (var ndCounter = 0; ndCounter &lt; nodesToBeRemoved.length; ndCounter++)
    {
        var nd = nodesToBeRemoved[ndCounter];

        // Before removing the node, check whether it contains any definitions.
        var defs = nd.getElementsByTagNameNS(NSS[&quot;svg&quot;], &quot;defs&quot;);

        for (var defsCounter = 0; defsCounter &lt; defs.length; defsCounter++)
        {
            if (defs[defsCounter].id)
            {
                newDoc.appendChild(defs[defsCounter].cloneNode(true));
            }
        }

        // Remove node.
        nd.parentNode.removeChild(nd);
    }

    // Set current layer.
    if (exportedLayers[0])
    {
        var namedView;

        for (var nodeCounter = 0; nodeCounter &lt; newDoc.childNodes.length; nodeCounter++)
        {
            if ((newDoc.childNodes[nodeCounter].nodeType == 1) &amp;&amp; (newDoc.childNodes[nodeCounter].getAttribute('id') == 'base'))
            {
                namedView = newDoc.childNodes[nodeCounter];
            }
        }

        if (namedView)
        {
            namedView.setAttributeNS(NSS['inkscape'], 'current-layer', exportedLayers[0].getAttributeNS(NSS['inkscape'], 'label'));
        }
    }

    // Add exported layers.
    while (exportedLayers.length &gt; 0)
    {
        var nd = exportedLayers.pop();

        nd.setAttribute(&quot;opacity&quot;,1);
        nd.style.display = &quot;inherit&quot;;

        newDoc.appendChild(nd);
    }

    // Serialise the new document.
  window.location = 'data:application/svg+xml;base64;charset=utf-8,' + window.btoa(unescape(encodeURIComponent((new XMLSerializer()).serializeToString(newDoc))));

    // Unsuspend redraw.
    ROOT_NODE.unsuspendRedraw(suspendHandle);
    ROOT_NODE.forceRedraw();
}

/** Function to undo last drawing operation.
*/
function drawingUndo()
{
    mouse_presentation_path = null;
    mouse_original_path = null;

    if (history_presentation_elements.length &gt; 0)
    {
        var p = history_presentation_elements.pop();
        var parent = p.parentNode.removeChild(p);

        p = history_original_elements.pop();
        parent = p.parentNode.removeChild(p);
    }
}

/** Event handler for mouse down in drawing mode.
 *
 *  @param e the event
 */
function drawingMousedown(e)
{
    var value = 0;

    if (e.button)
        value = e.button;
    else if (e.which)
        value = e.which;

    if (value == 1)
    {
        history_counter++;

        var p = calcCoord(e);

        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
        mouse_original_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
        mouse_original_path.setAttribute(&quot;stroke&quot;, path_colour);
        mouse_original_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
        mouse_original_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
        mouse_original_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date());
        mouse_original_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);
        slides[activeSlide][&quot;original_element&quot;].appendChild(mouse_original_path);
        history_original_elements.push(mouse_original_path);

        mouse_presentation_path = document.createElementNS(NSS[&quot;svg&quot;], &quot;path&quot;);
        mouse_presentation_path.setAttribute(&quot;stroke&quot;, path_colour);
        mouse_presentation_path.setAttribute(&quot;stroke-width&quot;, path_paint_width);
        mouse_presentation_path.setAttribute(&quot;fill&quot;, &quot;none&quot;);
        mouse_presentation_path.setAttribute(&quot;id&quot;, &quot;path &quot; + Date() + &quot; presentation copy&quot;);
        mouse_presentation_path.setAttribute(&quot;d&quot;, &quot;M&quot; + p.x + &quot;,&quot; + p.y);

        if (slides[activeSlide][&quot;viewGroup&quot;])
            slides[activeSlide][&quot;viewGroup&quot;].appendChild(mouse_presentation_path);
        else
            slides[activeSlide][&quot;element&quot;].appendChild(mouse_presentation_path);

        history_presentation_elements.push(mouse_presentation_path);

        return false;
    }

    return true;
}

/** Event handler for mouse up in drawing mode.
 *
 *  @param e the event
 */
function drawingMouseup(e)
{
    if(!e)
        e = window.event;

    if (mouse_presentation_path != null)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
        d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
        mouse_presentation_path.setAttribute(&quot;d&quot;, d);
        mouse_presentation_path = null;
        mouse_original_path.setAttribute(&quot;d&quot;, d);
        mouse_original_path = null;

        return false;
    }

    return true;
}

/** Event handler for mouse move in drawing mode.
 *
 *  @param e the event
 */
function drawingMousemove(e)
{
    if(!e)
        e = window.event;

    var dist = (mouse_last_x - e.clientX) * (mouse_last_x - e.clientX) + (mouse_last_y - e.clientY) * (mouse_last_y - e.clientY);

    if (mouse_presentation_path == null)
    {
        return true;
    }

    if (dist &gt;= mouse_min_dist_sqr)
    {
        var p = calcCoord(e);
        var d = mouse_presentation_path.getAttribute(&quot;d&quot;);
        d += &quot; L&quot; + p.x + &quot;,&quot; + p.y;
        mouse_presentation_path.setAttribute(&quot;d&quot;, d);
        mouse_original_path.setAttribute(&quot;d&quot;, d);
        mouse_last_x = e.clientX;
        mouse_last_y = e.clientY;
    }

    return false;
}

/** Event handler for mouse wheel events in slide mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function slideMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        skipEffects(-1);
    else if (delta &lt; 0)
        skipEffects(1);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Event handler for mouse wheel events in index mode.
 *  based on http://adomas.org/javascript-mouse-wheel/
 *
 *  @param e the event
 */
function indexMousewheel(e)
{
    var delta = 0;

    if (!e)
        e = window.event;

    if (e.wheelDelta)
    { // IE Opera
        delta = e.wheelDelta/120;
    }
    else if (e.detail)
    { // MOZ
        delta = -e.detail/3;
    }

    if (delta &gt; 0)
        indexSetPageSlide(activeSlide - INDEX_COLUMNS * INDEX_COLUMNS);
    else if (delta &lt; 0)
        indexSetPageSlide(activeSlide + INDEX_COLUMNS * INDEX_COLUMNS);

    if (e.preventDefault)
        e.preventDefault();

    e.returnValue = false;
}

/** Function to set the path paint width.
*/
function set_path_paint_width()
{
    var svgPoint1 = document.documentElement.createSVGPoint();
    var svgPoint2 = document.documentElement.createSVGPoint();

    svgPoint1.x = 0.0;
    svgPoint1.y = 0.0;
    svgPoint2.x = 1.0;
    svgPoint2.y = 0.0;

    var matrix = slides[activeSlide][&quot;element&quot;].getTransformToElement(ROOT_NODE);

    if (slides[activeSlide][&quot;viewGroup&quot;])
        matrix = slides[activeSlide][&quot;viewGroup&quot;].getTransformToElement(ROOT_NODE);

    svgPoint1 = svgPoint1.matrixTransform(matrix);
    svgPoint2 = svgPoint2.matrixTransform(matrix);

    path_paint_width = path_width / Math.sqrt((svgPoint2.x - svgPoint1.x) * (svgPoint2.x - svgPoint1.x) + (svgPoint2.y - svgPoint1.y) * (svgPoint2.y - svgPoint1.y));
}

/** The view effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect); for the view effect the options need to contain the old and the new matrix.
 */
function view(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if (!options[&quot;matrixInitial&quot;])
    {
        var tempString = slides[activeSlide][&quot;viewGroup&quot;].getAttribute(&quot;transform&quot;);

        if (tempString)
            options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromAttribute(tempString);
        else
            options[&quot;matrixInitial&quot;] = (new matrixSVG()).fromSVGElements(1, 0, 0, 1, 0, 0);
    }

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixNew&quot;].toAttribute());

            set_path_paint_width();

            options[&quot;matrixInitial&quot;] = null;
            return true;
        }
        else
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixNew&quot;], fraction).toAttribute());
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].toAttribute());
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixOld&quot;].toAttribute());
            set_path_paint_width();

            options[&quot;matrixInitial&quot;] = null;
            return true;
        }
        else
        {
            element.setAttribute(&quot;transform&quot;, options[&quot;matrixInitial&quot;].mix(options[&quot;matrixOld&quot;], fraction).toAttribute());
        }
    }

    return false;
}

/** The fade effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function fade(dir, element, time, options)
{
    var length = 250;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = &quot;none&quot;;
            element.setAttribute(&quot;opacity&quot;, 0);
        }
        else if (fraction &gt;= 1)
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1);
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, fraction);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1);
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.style.display = &quot;none&quot;;
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            element.setAttribute(&quot;opacity&quot;, 1 - fraction);
        }
    }
    return false;
}

/** The appear effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function appear(dir, element, time, options)
{
    if (dir == 1)
    {
        element.style.display = &quot;inherit&quot;;
        element.setAttribute(&quot;opacity&quot;,1);
    }
    else if (dir == -1)
    {
        element.style.display = &quot;none&quot;;
        element.setAttribute(&quot;opacity&quot;,0);
    }
    return true;
}

/** The pop effect.
 *
 *  @param dir direction the effect should be played (1 = forwards, -1 = backwards)
 *  @param element the element the effect should be applied to
 *  @param time the time that has elapsed since the beginning of the effect
 *  @param options a dictionary with additional options (e.g. length of the effect)
 */
function pop(dir, element, time, options)
{
    var length = 500;
    var fraction;

    if ((time == STATE_END) || (time == STATE_START))
        fraction = 1;
    else
    {
        if (options &amp;&amp; options[&quot;length&quot;])
            length = options[&quot;length&quot;];

        fraction = time / length;
    }

    if (dir == 1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.setAttribute(&quot;transform&quot;, &quot;scale(0)&quot;);
            element.style.display = &quot;none&quot;;
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 1);
            element.removeAttribute(&quot;transform&quot;);
            element.style.display = &quot;inherit&quot;;
            return true;
        }
        else
        {
            element.style.display = &quot;inherit&quot;;
            var opacityFraction = fraction * 3;
            if (opacityFraction &gt; 1)
                opacityFraction = 1;
            element.setAttribute(&quot;opacity&quot;, opacityFraction);
            var offsetX = WIDTH * (1.0 - fraction) / 2.0;
            var offsetY = HEIGHT * (1.0 - fraction) / 2.0;
            element.setAttribute(&quot;transform&quot;, &quot;translate(&quot; + offsetX + &quot;,&quot; + offsetY + &quot;) scale(&quot; + fraction + &quot;)&quot;);
        }
    }
    else if (dir == -1)
    {
        if (fraction &lt;= 0)
        {
            element.setAttribute(&quot;opacity&quot;, 1);
            element.setAttribute(&quot;transform&quot;, &quot;scale(1)&quot;);
            element.style.display = &quot;inherit&quot;;
        }
        else if (fraction &gt;= 1)
        {
            element.setAttribute(&quot;opacity&quot;, 0);
            element.removeAttribute(&quot;transform&quot;);
            element.style.display = &quot;none&quot;;
            return true;
        }
        else
        {
            element.setAttribute(&quot;opacity&quot;, 1 - fraction);
            element.setAttribute(&quot;transform&quot;, &quot;scale(&quot; + 1 - fraction + &quot;)&quot;);
            element.style.display = &quot;inherit&quot;;
        }
    }
    return false;
}

/** Function to set a slide either to the start or the end state.
 *
 *  @param slide the slide to use
 *  @param state the state into which the slide should be set
 */
function setSlideToState(slide, state)
{
    slides[slide][&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, slides[slide].initialView);

    if (slides[slide][&quot;effects&quot;])
    {
        if (state == STATE_END)
        {
            for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }
            }
        }
        else if (state == STATE_START)
        {
            for (var counter = slides[slide][&quot;effects&quot;].length - 1; counter &gt;= 0; counter--)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(parseInt(effect[&quot;dir&quot;]) * -1, effect[&quot;element&quot;], STATE_START, effect[&quot;options&quot;]);
                }
            }
        }
        else
        {
            setSlideToState(slide, STATE_START);

            for (var counter = 0; counter &lt; slides[slide][&quot;effects&quot;].length &amp;&amp; counter &lt; state; counter++)
            {
                for (var subCounter = 0; subCounter &lt; slides[slide][&quot;effects&quot;][counter].length; subCounter++)
                {
                    var effect = slides[slide][&quot;effects&quot;][counter][subCounter];
                    if (effect[&quot;effect&quot;] == &quot;fade&quot;)
                        fade(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;appear&quot;)
                        appear(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;pop&quot;)
                        pop(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                    else if (effect[&quot;effect&quot;] == &quot;view&quot;)
                        view(effect[&quot;dir&quot;], effect[&quot;element&quot;], STATE_END, effect[&quot;options&quot;]);
                }
            }
        }
    }

    window.location.hash = (activeSlide + 1) + '_' + activeEffect;
}

/** Convenience function to translate a attribute string into a dictionary.
 *
 *    @param str the attribute string
 *  @return a dictionary
 *  @see dictToPropStr
 */
function propStrToDict(str)
{
    var list = str.split(&quot;;&quot;);
    var obj = new Object();

    for (var counter = 0; counter &lt; list.length; counter++)
    {
        var subStr = list[counter];
        var subList = subStr.split(&quot;:&quot;);
        if (subList.length == 2)
        {
            obj[subList[0]] = subList[1];
        }
    }

    return obj;
}

/** Convenience function to translate a dictionary into a string that can be used as an attribute.
 *
 *  @param dict the dictionary to convert
 *  @return a string that can be used as an attribute
 *  @see propStrToDict
 */
function dictToPropStr(dict)
{
    var str = &quot;&quot;;

    for (var key in dict)
    {
        str += key + &quot;:&quot; + dict[key] + &quot;;&quot;;
    }

    return str;
}

/** Sub-function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *    @param replace dictionary of replaced ids
 *  @see suffixNodeIds
 */
function suffixNoneIds_sub(node, suffix, replace)
{
    if (node.nodeType == 1)
    {
        if (node.getAttribute(&quot;id&quot;))
        {
            var id = node.getAttribute(&quot;id&quot;)
                replace[&quot;#&quot; + id] = id + suffix;
            node.setAttribute(&quot;id&quot;, id + suffix);
        }

        if ((node.nodeName == &quot;use&quot;) &amp;&amp; (node.getAttributeNS(NSS[&quot;xlink&quot;], &quot;href&quot;)) &amp;&amp; (replace[node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;)]))
            node.setAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;, node.getAttribute(NSS[&quot;xlink&quot;], &quot;href&quot;) + suffix);

        if (node.childNodes)
        {
            for (var counter = 0; counter &lt; node.childNodes.length; counter++)
                suffixNoneIds_sub(node.childNodes[counter], suffix, replace);
        }
    }
}

/** Function to add a suffix to the ids of the node and all its children.
 *
 *    @param node the node to change
 *    @param suffix the suffix to add
 *  @return the changed node
 *  @see suffixNodeIds_sub
 */
function suffixNodeIds(node, suffix)
{
    var replace = new Object();

    suffixNoneIds_sub(node, suffix, replace);

    return node;
}

/** Function to build a progress bar.
 *
 *  @param parent node to attach the progress bar to
 */
function createProgressBar(parent_node)
{
    var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;layer_progress_bar&quot;);
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    var rect_progress_bar = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);
    rect_progress_bar.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(128, 128, 128); stroke: none;&quot;);
    rect_progress_bar.setAttribute(&quot;id&quot;, &quot;rect_progress_bar&quot;);
    rect_progress_bar.setAttribute(&quot;x&quot;, 0);
    rect_progress_bar.setAttribute(&quot;y&quot;, 0.99 * HEIGHT);
    rect_progress_bar.setAttribute(&quot;width&quot;, 0);
    rect_progress_bar.setAttribute(&quot;height&quot;, 0.01 * HEIGHT);
    g.appendChild(rect_progress_bar);

    var circle_timer_indicator = document.createElementNS(NSS[&quot;svg&quot;], &quot;circle&quot;);
    circle_timer_indicator.setAttribute(&quot;style&quot;, &quot;marker: none; fill: rgb(255, 0, 0); stroke: none;&quot;);
    circle_timer_indicator.setAttribute(&quot;id&quot;, &quot;circle_timer_indicator&quot;);
    circle_timer_indicator.setAttribute(&quot;cx&quot;, 0.005 * HEIGHT);
    circle_timer_indicator.setAttribute(&quot;cy&quot;, 0.995 * HEIGHT);
    circle_timer_indicator.setAttribute(&quot;r&quot;, 0.005 * HEIGHT);
    g.appendChild(circle_timer_indicator);

    parent_node.appendChild(g);
}

/** Function to hide the progress bar.
 *
 */
function hideProgressBar()
{
    var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
}

/** Function to show the progress bar.
 *
 */
function showProgressBar()
{
    var progress_bar = document.getElementById(&quot;layer_progress_bar&quot;);

    if (!progress_bar)
    {
        return;
    }

    progress_bar.setAttribute(&quot;style&quot;, &quot;display: inherit;&quot;);
}

/** Set progress bar value.
 *
 *    @param value the current slide number
 *
 */
function setProgressBarValue(value)
{
    var rect_progress_bar = document.getElementById(&quot;rect_progress_bar&quot;);

    if (!rect_progress_bar)
    {
        return;
    }

    if (value &lt; 1)
    {
        // First slide, assumed to be the title of the presentation
        var x = 0;
        var w = 0.01 * HEIGHT;
    }
    else if (value &gt;= slides.length - 1)
    {
        // Last slide, assumed to be the end of the presentation
        var x = WIDTH - 0.01 * HEIGHT;
        var w = 0.01 * HEIGHT;
    }
    else
    {
        value -= 1;
        value /= (slides.length - 2);

        var x = WIDTH * value;
        var w = WIDTH / (slides.length - 2);
    }

    rect_progress_bar.setAttribute(&quot;x&quot;, x);
    rect_progress_bar.setAttribute(&quot;width&quot;, w);
}

/** Set time indicator.
 *
 *    @param value the percentage of time elapse so far between 0.0 and 1.0
 *
 */
function setTimeIndicatorValue(value)
{
    var circle_timer_indicator = document.getElementById(&quot;circle_timer_indicator&quot;);

    if (!circle_timer_indicator)
    {
        return;
    }

    if (value &lt; 0.0)
    {
        value = 0.0;
    }

    if (value &gt; 1.0)
    {
        value = 1.0;
    }

    var cx = (WIDTH - 0.01 * HEIGHT) * value + 0.005 * HEIGHT;
    circle_timer_indicator.setAttribute(&quot;cx&quot;, cx);
}

/** Update timer.
 *
 */
function updateTimer()
{
    timer_elapsed += 1;
    setTimeIndicatorValue((timer_elapsed - timer_start) / (60 * timer_duration));
}

/** Convert screen coordinates to document coordinates.
 *
 *  @param e event with screen coordinates
 *
 *  @return coordinates in SVG file coordinate system
 */
function calcCoord(e)
{
    var svgPoint = document.documentElement.createSVGPoint();
    svgPoint.x = e.clientX + window.pageXOffset;
    svgPoint.y = e.clientY + window.pageYOffset;

    var matrix = slides[activeSlide][&quot;element&quot;].getScreenCTM();

    if (slides[activeSlide][&quot;viewGroup&quot;])
        matrix = slides[activeSlide][&quot;viewGroup&quot;].getScreenCTM();

    svgPoint = svgPoint.matrixTransform(matrix.inverse());
    return svgPoint;
}

/** Add slide.
 *
 *    @param after_slide after which slide the new slide should be inserted into the presentation
 */
function addSlide(after_slide)
{
    number_of_added_slides++;

    var g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date() + &quot; presentation copy&quot;);
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    var new_slide = new Object();
    new_slide[&quot;element&quot;] = g;

    // Set build in transition.
    new_slide[&quot;transitionIn&quot;] = new Object();
    var dict = defaultTransitionInDict;
    new_slide[&quot;transitionIn&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
    new_slide[&quot;transitionIn&quot;][&quot;options&quot;] = new Object();

    for (key in dict)
        if (key != &quot;name&quot;)
            new_slide[&quot;transitionIn&quot;][&quot;options&quot;][key] = dict[key];

    // Set build out transition.
    new_slide[&quot;transitionOut&quot;] = new Object();
    dict = defaultTransitionOutDict;
    new_slide[&quot;transitionOut&quot;][&quot;name&quot;] = dict[&quot;name&quot;];
    new_slide[&quot;transitionOut&quot;][&quot;options&quot;] = new Object();

    for (key in dict)
        if (key != &quot;name&quot;)
            new_slide[&quot;transitionOut&quot;][&quot;options&quot;][key] = dict[key];

    // Copy master slide content.
    if (masterSlide)
    {
        var clonedNode = suffixNodeIds(masterSlide.cloneNode(true), &quot;_&quot; + Date() + &quot; presentation_copy&quot;);
        clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;);
        clonedNode.removeAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;);
        clonedNode.style.display = &quot;inherit&quot;;

        g.appendChild(clonedNode);
    }

    // Substitute auto texts.
    substituteAutoTexts(g, &quot;Whiteboard &quot; + number_of_added_slides, &quot;W&quot; + number_of_added_slides, slides.length);

    g.setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + (after_slide + 1) + &quot;)) { indexSetActiveSlide(&quot; + (after_slide + 1) + &quot;); };&quot;);

    // Create a transform group.
    var transformGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    // Add content to transform group.
    while (g.firstChild)
        transformGroup.appendChild(g.firstChild);

    // Transfer the transform attribute from the node to the transform group.
    if (g.getAttribute(&quot;transform&quot;))
    {
        transformGroup.setAttribute(&quot;transform&quot;, g.getAttribute(&quot;transform&quot;));
        g.removeAttribute(&quot;transform&quot;);
    }

    // Create a view group.
    var viewGroup = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);

    viewGroup.appendChild(transformGroup);
    new_slide[&quot;viewGroup&quot;] = g.appendChild(viewGroup);

    // Insert background.
    if (BACKGROUND_COLOR != null)
    {
        var rectNode = document.createElementNS(NSS[&quot;svg&quot;], &quot;rect&quot;);

        rectNode.setAttribute(&quot;x&quot;, 0);
        rectNode.setAttribute(&quot;y&quot;, 0);
        rectNode.setAttribute(&quot;width&quot;, WIDTH);
        rectNode.setAttribute(&quot;height&quot;, HEIGHT);
        rectNode.setAttribute(&quot;id&quot;, &quot;jessyInkBackground&quot; + Date());
        rectNode.setAttribute(&quot;fill&quot;, BACKGROUND_COLOR);

        new_slide[&quot;viewGroup&quot;].insertBefore(rectNode, new_slide[&quot;viewGroup&quot;].firstChild);
    }

    // Set initial view even if there are no other views.
    var matrixOld = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);

    new_slide[&quot;viewGroup&quot;].setAttribute(&quot;transform&quot;, matrixOld.toAttribute());
    new_slide.initialView = matrixOld.toAttribute();

    // Insert slide
    var node = slides[after_slide][&quot;element&quot;];
    var next_node = node.nextSibling;
    var parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    g = document.createElementNS(NSS[&quot;svg&quot;], &quot;g&quot;);
    g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;groupmode&quot;, &quot;layer&quot;);
    g.setAttributeNS(NSS[&quot;inkscape&quot;], &quot;label&quot;, &quot;Whiteboard &quot; + number_of_added_slides);
    g.setAttribute(&quot;clip-path&quot;, &quot;url(#jessyInkSlideClipPath)&quot;);
    g.setAttribute(&quot;id&quot;, &quot;Whiteboard &quot; + Date());
    g.setAttribute(&quot;style&quot;, &quot;display: none;&quot;);

    new_slide[&quot;original_element&quot;] = g;

    node = slides[after_slide][&quot;original_element&quot;];
    next_node = node.nextSibling;
    parent_node = node.parentNode;

    if (next_node)
    {
        parent_node.insertBefore(g, next_node);
    }
    else
    {
        parent_node.appendChild(g);
    }

    before_new_slide = slides.slice(0, after_slide + 1);
    after_new_slide = slides.slice(after_slide + 1);
    slides = before_new_slide.concat(new_slide, after_new_slide);

    //resetting the counter attributes on the slides that follow the new slide...
    for (var counter = after_slide+2; counter &lt; slides.length; counter++)
    {
        slides[counter][&quot;element&quot;].setAttribute(&quot;onmouseover&quot;, &quot;if ((currentMode == INDEX_MODE) &amp;&amp; ( activeSlide != &quot; + counter + &quot;)) { indexSetActiveSlide(&quot; + counter + &quot;); };&quot;);
    }
}

/** Convenience function to obtain a transformation matrix from a point matrix.
 *
 *    @param mPoints Point matrix.
 *    @return A transformation matrix.
 */
function pointMatrixToTransformation(mPoints)
{
    mPointsOld = (new matrixSVG()).fromElements(0, WIDTH, WIDTH, 0, 0, HEIGHT, 1, 1, 1);

    return mPointsOld.mult(mPoints.inv());
}

/** Convenience function to obtain a matrix with three corners of a rectangle.
 *
 *    @param rect an svg rectangle
 *    @return a matrixSVG containing three corners of the rectangle
 */
function rectToMatrix(rect)
{
    rectWidth = rect.getBBox().width;
    rectHeight = rect.getBBox().height;
    rectX = rect.getBBox().x;
    rectY = rect.getBBox().y;
    rectXcorr = 0;
    rectYcorr = 0;

    scaleX = WIDTH / rectWidth;
    scaleY = HEIGHT / rectHeight;

    if (scaleX &gt; scaleY)
    {
        scaleX = scaleY;
        rectXcorr -= (WIDTH / scaleX - rectWidth) / 2;
        rectWidth = WIDTH / scaleX;
    }
    else
    {
        scaleY = scaleX;
        rectYcorr -= (HEIGHT / scaleY - rectHeight) / 2;
        rectHeight = HEIGHT / scaleY;
    }

    if (rect.transform.baseVal.numberOfItems &lt; 1)
    {
        mRectTrans = (new matrixSVG()).fromElements(1, 0, 0, 0, 1, 0, 0, 0, 1);
    }
    else
    {
        mRectTrans = (new matrixSVG()).fromSVGMatrix(rect.transform.baseVal.consolidate().matrix);
    }

    newBasePoints = (new matrixSVG()).fromElements(rectX, rectX, rectX, rectY, rectY, rectY, 1, 1, 1);
    newVectors = (new matrixSVG()).fromElements(rectXcorr, rectXcorr + rectWidth, rectXcorr + rectWidth, rectYcorr, rectYcorr, rectYcorr + rectHeight, 0, 0, 0);

    return mRectTrans.mult(newBasePoints.add(newVectors));
}

/** Function to handle JessyInk elements.
 *
 *    @param    node    Element node.
 */
function handleElement(node)
{
    if (node.getAttributeNS(NSS['jessyink'], 'element') == 'core.video')
    {
        var url;
        var width;
        var height;
        var x;
        var y;
        var transform;

        var tspans = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;tspan&quot;);

        for (var tspanCounter = 0; tspanCounter &lt; tspans.length; tspanCounter++)
        {
            if (tspans[tspanCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;url&quot;)
            {
                url = tspans[tspanCounter].firstChild.nodeValue;
            }
        }

        var rects = node.getElementsByTagNameNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;rect&quot;);

        for (var rectCounter = 0; rectCounter &lt; rects.length; rectCounter++)
        {
            if (rects[rectCounter].getAttributeNS(&quot;https://launchpad.net/jessyink&quot;, &quot;video&quot;) == &quot;rect&quot;)
            {
                x = rects[rectCounter].getAttribute(&quot;x&quot;);
                y = rects[rectCounter].getAttribute(&quot;y&quot;);
                width = rects[rectCounter].getAttribute(&quot;width&quot;);
                height = rects[rectCounter].getAttribute(&quot;height&quot;);
                transform = rects[rectCounter].getAttribute(&quot;transform&quot;);
            }
        }

        for (var childCounter = 0; childCounter &lt; node.childNodes.length; childCounter++)
        {
            if (node.childNodes[childCounter].nodeType == 1)
            {
                if (node.childNodes[childCounter].style)
                {
                    node.childNodes[childCounter].style.display = 'none';
                }
                else
                {
                    node.childNodes[childCounter].setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
                }
            }
        }

        var foreignNode = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;foreignObject&quot;);
        foreignNode.setAttribute(&quot;x&quot;, x);
        foreignNode.setAttribute(&quot;y&quot;, y);
        foreignNode.setAttribute(&quot;width&quot;, width);
        foreignNode.setAttribute(&quot;height&quot;, height);
        foreignNode.setAttribute(&quot;transform&quot;, transform);

        var videoNode = document.createElementNS(&quot;http://www.w3.org/1999/xhtml&quot;, &quot;video&quot;);
        videoNode.setAttribute(&quot;src&quot;, url);

        foreignNode.appendChild(videoNode);
        node.appendChild(foreignNode);
    }
}

/** Class processing the location hash.
 *
 *    @param str location hash
 */
function LocationHash(str)
{
    this.slideNumber = 0;
    this.effectNumber = 0;

    str = str.substr(1, str.length - 1);

    var parts = str.split('_');

    // Try to extract slide number.
    if (parts.length &gt;= 1)
    {
        try
        {
            var slideNumber = parseInt(parts[0]);

            if (!isNaN(slideNumber))
            {
                this.slideNumber = slideNumber - 1;
            }
        }
        catch (e)
        {
        }
    }

    // Try to extract effect number.
    if (parts.length &gt;= 2)
    {
        try
        {
            var effectNumber = parseInt(parts[1]);

            if (!isNaN(effectNumber))
            {
                this.effectNumber = effectNumber;
            }
        }
        catch (e)
        {
        }
    }
}

/** Class representing an svg matrix.
*/
function matrixSVG()
{
    this.e11 = 0; // a
    this.e12 = 0; // c
    this.e13 = 0; // e
    this.e21 = 0; // b
    this.e22 = 0; // d
    this.e23 = 0; // f
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 0;
}

/** Constructor function.
 *
 *    @param a element a (i.e. 1, 1) as described in the svg standard.
 *    @param b element b (i.e. 2, 1) as described in the svg standard.
 *    @param c element c (i.e. 1, 2) as described in the svg standard.
 *    @param d element d (i.e. 2, 2) as described in the svg standard.
 *    @param e element e (i.e. 1, 3) as described in the svg standard.
 *    @param f element f (i.e. 2, 3) as described in the svg standard.
 */
matrixSVG.prototype.fromSVGElements = function(a, b, c, d, e, f)
{
    this.e11 = a;
    this.e12 = c;
    this.e13 = e;
    this.e21 = b;
    this.e22 = d;
    this.e23 = f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param matrix an svg matrix as described in the svg standard.
 */
matrixSVG.prototype.fromSVGMatrix = function(m)
{
    this.e11 = m.a;
    this.e12 = m.c;
    this.e13 = m.e;
    this.e21 = m.b;
    this.e22 = m.d;
    this.e23 = m.f;
    this.e31 = 0;
    this.e32 = 0;
    this.e33 = 1;

    return this;
}

/** Constructor function.
 *
 *    @param e11 element 1, 1 of the matrix.
 *    @param e12 element 1, 2 of the matrix.
 *    @param e13 element 1, 3 of the matrix.
 *    @param e21 element 2, 1 of the matrix.
 *    @param e22 element 2, 2 of the matrix.
 *    @param e23 element 2, 3 of the matrix.
 *    @param e31 element 3, 1 of the matrix.
 *    @param e32 element 3, 2 of the matrix.
 *    @param e33 element 3, 3 of the matrix.
 */
matrixSVG.prototype.fromElements = function(e11, e12, e13, e21, e22, e23, e31, e32, e33)
{
    this.e11 = e11;
    this.e12 = e12;
    this.e13 = e13;
    this.e21 = e21;
    this.e22 = e22;
    this.e23 = e23;
    this.e31 = e31;
    this.e32 = e32;
    this.e33 = e33;

    return this;
}

/** Constructor function.
 *
 *    @param attrString string value of the &quot;transform&quot; attribute (currently only &quot;matrix&quot; is accepted)
 */
matrixSVG.prototype.fromAttribute = function(attrString)
{
    str = attrString.substr(7, attrString.length - 8);

    str = str.trim();

    strArray = str.split(&quot;,&quot;);

    // Opera does not use commas to separate the values of the matrix, only spaces.
    if (strArray.length != 6)
        strArray = str.split(&quot; &quot;);

    this.e11 = parseFloat(strArray[0]);
    this.e21 = parseFloat(strArray[1]);
    this.e31 = 0;
    this.e12 = parseFloat(strArray[2]);
    this.e22 = parseFloat(strArray[3]);
    this.e32 = 0;
    this.e13 = parseFloat(strArray[4]);
    this.e23 = parseFloat(strArray[5]);
    this.e33 = 1;

    return this;
}

/** Output function
 *
 *    @return a string that can be used as the &quot;transform&quot; attribute.
 */
matrixSVG.prototype.toAttribute = function()
{
    return &quot;matrix(&quot; + this.e11 + &quot;, &quot; + this.e21 + &quot;, &quot; + this.e12 + &quot;, &quot; + this.e22 + &quot;, &quot; + this.e13 + &quot;, &quot; + this.e23 + &quot;)&quot;;
}

/** Matrix nversion.
 *
 *    @return the inverse of the matrix
 */
matrixSVG.prototype.inv = function()
{
    out = new matrixSVG();

    det = this.e11 * (this.e33 * this.e22 - this.e32 * this.e23) - this.e21 * (this.e33 * this.e12 - this.e32 * this.e13) + this.e31 * (this.e23 * this.e12 - this.e22 * this.e13);

    out.e11 =  (this.e33 * this.e22 - this.e32 * this.e23) / det;
    out.e12 = -(this.e33 * this.e12 - this.e32 * this.e13) / det;
    out.e13 =  (this.e23 * this.e12 - this.e22 * this.e13) / det;
    out.e21 = -(this.e33 * this.e21 - this.e31 * this.e23) / det;
    out.e22 =  (this.e33 * this.e11 - this.e31 * this.e13) / det;
    out.e23 = -(this.e23 * this.e11 - this.e21 * this.e13) / det;
    out.e31 =  (this.e32 * this.e21 - this.e31 * this.e22) / det;
    out.e32 = -(this.e32 * this.e11 - this.e31 * this.e12) / det;
    out.e33 =  (this.e22 * this.e11 - this.e21 * this.e12) / det;

    return out;
}

/** Matrix multiplication.
 *
 *    @param op another svg matrix
 *    @return this * op
 */
matrixSVG.prototype.mult = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 * op.e11 + this.e12 * op.e21 + this.e13 * op.e31;
    out.e12 = this.e11 * op.e12 + this.e12 * op.e22 + this.e13 * op.e32;
    out.e13 = this.e11 * op.e13 + this.e12 * op.e23 + this.e13 * op.e33;
    out.e21 = this.e21 * op.e11 + this.e22 * op.e21 + this.e23 * op.e31;
    out.e22 = this.e21 * op.e12 + this.e22 * op.e22 + this.e23 * op.e32;
    out.e23 = this.e21 * op.e13 + this.e22 * op.e23 + this.e23 * op.e33;
    out.e31 = this.e31 * op.e11 + this.e32 * op.e21 + this.e33 * op.e31;
    out.e32 = this.e31 * op.e12 + this.e32 * op.e22 + this.e33 * op.e32;
    out.e33 = this.e31 * op.e13 + this.e32 * op.e23 + this.e33 * op.e33;

    return out;
}

/** Matrix addition.
 *
 *    @param op another svg matrix
 *    @return this + op
 */
matrixSVG.prototype.add = function(op)
{
    out = new matrixSVG();

    out.e11 = this.e11 + op.e11;
    out.e12 = this.e12 + op.e12;
    out.e13 = this.e13 + op.e13;
    out.e21 = this.e21 + op.e21;
    out.e22 = this.e22 + op.e22;
    out.e23 = this.e23 + op.e23;
    out.e31 = this.e31 + op.e31;
    out.e32 = this.e32 + op.e32;
    out.e33 = this.e33 + op.e33;

    return out;
}

/** Matrix mixing.
 *
 *    @param op another svg matrix
 *    @parma contribOp contribution of the other matrix (0 &lt;= contribOp &lt;= 1)
 *    @return (1 - contribOp) * this + contribOp * op
 */
matrixSVG.prototype.mix = function(op, contribOp)
{
    contribThis = 1.0 - contribOp;
    out = new matrixSVG();

    out.e11 = contribThis * this.e11 + contribOp * op.e11;
    out.e12 = contribThis * this.e12 + contribOp * op.e12;
    out.e13 = contribThis * this.e13 + contribOp * op.e13;
    out.e21 = contribThis * this.e21 + contribOp * op.e21;
    out.e22 = contribThis * this.e22 + contribOp * op.e22;
    out.e23 = contribThis * this.e23 + contribOp * op.e23;
    out.e31 = contribThis * this.e31 + contribOp * op.e31;
    out.e32 = contribThis * this.e32 + contribOp * op.e32;
    out.e33 = contribThis * this.e33 + contribOp * op.e33;

    return out;
}

/** Trimming function for strings.
*/
String.prototype.trim = function()
{
    return this.replace(/^\s+|\s+$/g, '');
}

/** SVGElement.getTransformToElement polyfill */
SVGElement.prototype.getTransformToElement = SVGElement.prototype.getTransformToElement || function(elem) {
    return elem.getScreenCTM().inverse().multiply(this.getScreenCTM());
};
</script></svg>
